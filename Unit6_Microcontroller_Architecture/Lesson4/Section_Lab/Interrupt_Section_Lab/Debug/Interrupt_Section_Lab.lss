
Interrupt_Section_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e6  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000301  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039e  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000166e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_2>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_Leds_Init>:
    }
}

void GPIO_Leds_Init()
{
	DDRD |= (1<<PD5) | (1<<PD6) | (1<<PD7);// PIN 5,6,7 AS OUTPUT
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6e       	ori	r24, 0xE0	; 224
  70:	81 bb       	out	0x11, r24	; 17
  72:	08 95       	ret

00000074 <GPIO_Int_Init>:

}

void GPIO_Int_Init()
{
	DDRD &= ~ ( (1<<PD2) | (1<<PD3) );
  74:	81 b3       	in	r24, 0x11	; 17
  76:	83 7f       	andi	r24, 0xF3	; 243
  78:	81 bb       	out	0x11, r24	; 17
	DDRB &= ~(1<<PB2);
  7a:	87 b3       	in	r24, 0x17	; 23
  7c:	8b 7f       	andi	r24, 0xFB	; 251
  7e:	87 bb       	out	0x17, r24	; 23
  80:	08 95       	ret

00000082 <main>:
void GPIO_Leds_Init();
void GPIO_Int_Init();

int main(void)
{
	GPIO_Leds_Init();
  82:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_Leds_Init>
	GPIO_Int_Init();
  86:	0e 94 3a 00 	call	0x74	; 0x74 <GPIO_Int_Init>
	
	MCUCR |= (1 << ISC00) | (1 << ISC10) | (1 << ISC11);
  8a:	85 b7       	in	r24, 0x35	; 53
  8c:	8d 60       	ori	r24, 0x0D	; 13
  8e:	85 bf       	out	0x35, r24	; 53
	MCUCSR &= ~(1 << ISC2);
  90:	84 b7       	in	r24, 0x34	; 52
  92:	8f 7b       	andi	r24, 0xBF	; 191
  94:	84 bf       	out	0x34, r24	; 52
	
	GICR |= (1 << INT0) | (1 << INT1) | (1 << INT2);
  96:	8b b7       	in	r24, 0x3b	; 59
  98:	80 6e       	ori	r24, 0xE0	; 224
  9a:	8b bf       	out	0x3b, r24	; 59
	
	sei();
  9c:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		PORTD &= (1<<PD5) | (1<<PD6) | (1<<PD7);
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	80 7e       	andi	r24, 0xE0	; 224
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	fc cf       	rjmp	.-8      	; 0x9e <main+0x1c>

000000a6 <__vector_1>:
	DDRD &= ~ ( (1<<PD2) | (1<<PD3) );
	DDRB &= ~(1<<PB2);
}

ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	PORTD |= (1<<PD5);
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	98 e1       	ldi	r25, 0x18	; 24
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <__vector_1+0x1c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <__vector_1+0x26>
  cc:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<PD5);	
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	82 bb       	out	0x12, r24	; 18
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_2>:

ISR(INT1_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	PORTD |= (1<<PD6);
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	82 bb       	out	0x12, r24	; 18
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	89 e6       	ldi	r24, 0x69	; 105
  fe:	98 e1       	ldi	r25, 0x18	; 24
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <__vector_2+0x1c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <__vector_2+0x26>
 10a:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<PD6);
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	8f 7b       	andi	r24, 0xBF	; 191
 110:	82 bb       	out	0x12, r24	; 18
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_3>:

ISR(INT2_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
    PORTD |= (1<<PD7);
 132:	82 b3       	in	r24, 0x12	; 18
 134:	80 68       	ori	r24, 0x80	; 128
 136:	82 bb       	out	0x12, r24	; 18
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	89 e6       	ldi	r24, 0x69	; 105
 13c:	98 e1       	ldi	r25, 0x18	; 24
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <__vector_3+0x1c>
 146:	00 c0       	rjmp	.+0      	; 0x148 <__vector_3+0x26>
 148:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<PD7);
 14a:	82 b3       	in	r24, 0x12	; 18
 14c:	8f 77       	andi	r24, 0x7F	; 127
 14e:	82 bb       	out	0x12, r24	; 18
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>

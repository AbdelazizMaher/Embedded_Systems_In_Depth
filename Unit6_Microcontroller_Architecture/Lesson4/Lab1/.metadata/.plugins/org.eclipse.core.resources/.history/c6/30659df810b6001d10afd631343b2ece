/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdlib.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//RCC
#define  RCC_BASE   				( uint32_t )( 0x40021000 )
#define  RCC_CR     				*( volatile uint32_t *)( RCC_BASE + 0x0 )
#define  RCC_CFGR   				*( volatile uint32_t *)( RCC_BASE + 0x04 )
#define RCC_APB2ENR                 *( ( volatile uint32_t* )( RCC_BASE + 0x18 ) )

//GPIO
#define GPIOA_BASE                  ( uint32_t )0x40010800
#define GPIOA_CRH                   *( ( volatile uint32_t* )( GPIOA_BASE + 0x04 ) )
#define GPIOA_CRL					*( volatile uint32_t * )( GPIOA_BASE + 0x00 )
#define GPIOA_ODR                   *( ( volatile uint32_t* )( GPIOA_BASE + 0x0C ) )

//EXTI
#define EXTI_BASE	        		( uint32_t )0x40010400
#define EXTI_RTSR					*( volatile uint32_t* )( EXTI_BASE + 0x08 )
#define EXTI_IMR					*( volatile uint32_t* )( EXTI_BASE + 0x00 )
#define EXTI_PR		    			*( volatile uint32_t* )( EXTI_BASE + 0x14 )

//AFIO
#define AFIO_BASE	        		( uint32_t )0x40010000
#define AFIO_EXTICR1    			*( volatile uint32_t* )( AFIO_BASE + 0x08 )

//NVIC
#define NVIC_ISER0					*( volatile uint32_t* )( 0xE000E100 )

#define RCC_IOPAEN                  ( 1 << 2 )
#define GPIOA_13                    ( 1 << 13 )

void Clock_Init()
{
	RCC_APB2ENR |= RCC_IOPAEN;  // enable clock

	//Bit 0 AFIOEN
	RCC_APB2ENR |= (1<<0);
}


GPIO_Init()
{
	GPIOA_CRL |= (1<<2);//PIN A0 as input

	GPIOA_CRH &= ~( 7 << 20 );
	GPIOA_CRH |= ( 2 << 20 );   //enable pin as output
}

int main(void)
{
	Clock_Init();
	GPIO_Init();

	//Select portA for EXTI0
	AFIO_EXTICR1 = 0x0;

    //Rising trigger enabled
	EXTI_RTSR |= (1<<0);

	//Enable Mask EXTI0
	EXTI_IMR |= (1<<0);

	//Enable NIVC IRQ6 (EXTI0)
	NVIC_ISER0 |= (1<<6);

	while(1);
}

void EXTI0_IRQHandler ()
{
	//Toggle led
	GPIOA_ODR ^= (1<<13);
    //Clear the EXTIO pending register
	EXTI_PR |= (1<<0);
}

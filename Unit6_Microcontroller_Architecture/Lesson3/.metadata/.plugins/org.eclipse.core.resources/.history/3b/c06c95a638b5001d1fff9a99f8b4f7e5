/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdlib.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


#define  RCC_BASE   	( uint32_t )( 0x40021000 )
#define  RCC_CR     	*( volatile uint32_t *)( RCC_BASE + 0x0 )
#define  RCC_CFGR   	*( volatile uint32_t *)( RCC_BASE + 0x04 )

#define HSIRDY           (1<<1)

void Clock_Init()
{
	//Bit 0 HSION: Internal high-speed clock enable
	//Set and cleared by software.
	//Set by hardware to force the internal 8 MHz RC oscillator ON when leaving Stop or Standby
	//mode or in case of failure of the external 4-16 MHz oscillator used directly or indirectly as
	//system clock. This bit cannot be reset if the internal 8 MHz RC is used directly or indirectly
	//as system clock or is selected to become the system clock.
	//0: internal 8 MHz RC oscillator OFF
	//1: internal 8 MHz RC oscillator ON
	 RCC_CR |= (1<<0);  // enabled by default;

	 //Bit 1 HSIRDY: Internal high-speed clock ready flag
	 //	Set by hardware to indicate that internal 8 MHz RC oscillator is stable. After the HSION bit is
	 //	cleared, HSIRDY goes low after 6 internal 8 MHz RC oscillator clock cycles.
	 //	0: internal 8 MHz RC oscillator not ready
	 //	1: internal 8 MHz RC oscillator ready
	while(! ( RCC_CR  & HSIRDY ) );

	//Bits 7:4 HPRE: AHB prescaler
	//	Set and cleared by software to control the division factor of the AHB clock.
	//	0xxx: SYSCLK not divided
	//	1000: SYSCLK divided by 2
	//	1001: SYSCLK divided by 4
	//	1010: SYSCLK divided by 8
	//	1011: SYSCLK divided by 16
	//	1100: SYSCLK divided by 64
	//	1101: SYSCLK divided by 128
	//	1110: SYSCLK divided by 256
	//	1111: SYSCLK divided by 512
	RCC_CFGR |=	 ( 0b0000 << 4 );

	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
    //	Set and cleared by software to control the division factor of the APB low-speed clock
    //	(PCLK1).
    //	Warning: the software has to set correctly these bits to not exceed 36 MHz on this domain.
    //	0xx: HCLK not divided
    //	100: HCLK divided by 2
    //	101: HCLK divided by 4
    //	110: HCLK divided by 8
    //	111: HCLK divided by 16
	RCC_CFGR |=	 ( 0b100 << 8 );


	//	Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	//	Set and cleared by software to control the division factor of the APB high-speed clock
	//	(PCLK2).
	//	0xx: HCLK not divided
	//	100: HCLK divided by 2
	//	101: HCLK divided by 4
	//	110: HCLK divided by 8
	//	111: HCLK divided by 16
	RCC_CFGR |=	 ( 0b101 << 11 );

}

int main(void)
{
	Clock_Init();

    /* Loop forever */
	for(;;);
}


STM32F103C6.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001304  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001434  08001434  00011434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001454  08001454  0001145c  2**0
                  CONTENTS
  4 .ARM          00000000  08001454  08001454  0001145c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001454  0800145c  0001145c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001454  08001454  00011454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001458  08001458  00011458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001145c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000000  0800145c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  0800145c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001145c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b7f  00000000  00000000  00011485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c79  00000000  00000000  00014004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000141e  00000000  00000000  00014c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002f8  00000000  00000000  000160a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000270  00000000  00000000  00016398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000308f  00000000  00000000  00016608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000040fa  00000000  00000000  00019697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c5d4  00000000  00000000  0001d791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00029d65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a0c  00000000  00000000  00029db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800141c 	.word	0x0800141c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800141c 	.word	0x0800141c

08000170 <EEPROM_Init>:
#include "I2C_Slave_EEPROM.h"



void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	// 					  PB7: I2C1_SDA

	I2C_Config_t I2C_Cfg;

	// I2C Controller Acts as a Master
	I2C_Cfg.General_Call_Address_Detection = I2C_ENGC_ENABLE;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2C_Cfg.ACK_Control = I2C_ACK_ENABLE;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2C_Cfg.Clock_Speed = I2C_SCLK_SM_100K;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <EEPROM_Init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C_Cfg.I2C_Mode = I2C_MODE_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2C_Cfg.P_SlaveEvent_IRQ_CallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_Cfg.Stretch_Mode = I2C_CLK_STRETCH_ENABLE;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_Init(EEPROM_Slave_I2Cx, &I2C_Cfg);
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	4619      	mov	r1, r3
 8000194:	4805      	ldr	r0, [pc, #20]	; (80001ac <EEPROM_Init+0x3c>)
 8000196:	f000 fafb 	bl	8000790 <MCAL_I2C_Init>
	MCAL_I2C_GPIO_SetPins(EEPROM_Slave_I2Cx);
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 fc0c 	bl	80009b8 <MCAL_I2C_GPIO_SetPins>

}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_Write_nBytes>:



uint8_t EEPROM_Write_nBytes(uint16_t Memory_Address, uint8_t *bytes,uint8_t DataLength)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c6      	sub	sp, #280	; 0x118
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80001be:	6019      	str	r1, [r3, #0]
 80001c0:	4611      	mov	r1, r2
 80001c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001c6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80001ca:	4602      	mov	r2, r0
 80001cc:	801a      	strh	r2, [r3, #0]
 80001ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001d2:	f2a3 130b 	subw	r3, r3, #267	; 0x10b
 80001d6:	460a      	mov	r2, r1
 80001d8:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 80001da:	2300      	movs	r3, #0
 80001dc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	uint8_t Buffer[256];

	Buffer[0] = (uint8_t)(Memory_Address >> 8);			// Upper Byte Memory Address
 80001e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001e4:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80001f8:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (uint8_t)(Memory_Address);				// Lower Byte Memory Address
 80001fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001fe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	b2da      	uxtb	r2, r3
 8000206:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800020a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800020e:	705a      	strb	r2, [r3, #1]

	for(i=2;i<(DataLength+2);i++)
 8000210:	2302      	movs	r3, #2
 8000212:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000216:	e015      	b.n	8000244 <EEPROM_Write_nBytes+0x94>
		Buffer[i] = bytes[i-2];
 8000218:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800021c:	3b02      	subs	r3, #2
 800021e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000222:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000226:	6812      	ldr	r2, [r2, #0]
 8000228:	441a      	add	r2, r3
 800022a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800022e:	7811      	ldrb	r1, [r2, #0]
 8000230:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000234:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000238:	54d1      	strb	r1, [r2, r3]
	for(i=2;i<(DataLength+2);i++)
 800023a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800023e:	3301      	adds	r3, #1
 8000240:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000248:	f2a3 130b 	subw	r3, r3, #267	; 0x10b
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	1c5a      	adds	r2, r3, #1
 8000250:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000254:	429a      	cmp	r2, r3
 8000256:	dadf      	bge.n	8000218 <EEPROM_Write_nBytes+0x68>

	MCAL_I2C_Master_Transmit(EEPROM_Slave_I2Cx, EEPROM_Slave_Address, Buffer, (DataLength+2) , WITH_STOP, START);
 8000258:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800025c:	f2a3 130b 	subw	r3, r3, #267	; 0x10b
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	3302      	adds	r3, #2
 8000264:	4619      	mov	r1, r3
 8000266:	f107 020c 	add.w	r2, r7, #12
 800026a:	2300      	movs	r3, #0
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	2300      	movs	r3, #0
 8000270:	9300      	str	r3, [sp, #0]
 8000272:	460b      	mov	r3, r1
 8000274:	212a      	movs	r1, #42	; 0x2a
 8000276:	4804      	ldr	r0, [pc, #16]	; (8000288 <EEPROM_Write_nBytes+0xd8>)
 8000278:	f000 fbdc 	bl	8000a34 <MCAL_I2C_Master_Transmit>

	return 0;
 800027c:	2300      	movs	r3, #0
}
 800027e:	4618      	mov	r0, r3
 8000280:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40005400 	.word	0x40005400

0800028c <EEPROM_Read_nBytes>:



uint8_t EEPROM_Read_nBytes(uint16_t Memory_Address, uint8_t *bytes,uint8_t DataLength)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af02      	add	r7, sp, #8
 8000292:	4603      	mov	r3, r0
 8000294:	6039      	str	r1, [r7, #0]
 8000296:	80fb      	strh	r3, [r7, #6]
 8000298:	4613      	mov	r3, r2
 800029a:	717b      	strb	r3, [r7, #5]
	uint8_t Buffer[2];
	Buffer[0] = (uint8_t)(Memory_Address >> 8);			// Upper Byte Memory Address
 800029c:	88fb      	ldrh	r3, [r7, #6]
 800029e:	0a1b      	lsrs	r3, r3, #8
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	733b      	strb	r3, [r7, #12]
	Buffer[1] = (uint8_t)(Memory_Address);				// Lower Byte Memory Address
 80002a6:	88fb      	ldrh	r3, [r7, #6]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	737b      	strb	r3, [r7, #13]


	// Write Address Only
	MCAL_I2C_Master_Transmit(EEPROM_Slave_I2Cx, EEPROM_Slave_Address, Buffer, 2, WITHOUT_STOP, START);
 80002ac:	f107 020c 	add.w	r2, r7, #12
 80002b0:	2300      	movs	r3, #0
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	2301      	movs	r3, #1
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2302      	movs	r3, #2
 80002ba:	212a      	movs	r1, #42	; 0x2a
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <EEPROM_Read_nBytes+0x54>)
 80002be:	f000 fbb9 	bl	8000a34 <MCAL_I2C_Master_Transmit>

	// Read Data
	MCAL_I2C_Master_Receive(EEPROM_Slave_I2Cx, EEPROM_Slave_Address, bytes, DataLength, WITH_STOP, REPEATED_START);
 80002c2:	797b      	ldrb	r3, [r7, #5]
 80002c4:	2201      	movs	r2, #1
 80002c6:	9201      	str	r2, [sp, #4]
 80002c8:	2200      	movs	r2, #0
 80002ca:	9200      	str	r2, [sp, #0]
 80002cc:	683a      	ldr	r2, [r7, #0]
 80002ce:	212a      	movs	r1, #42	; 0x2a
 80002d0:	4803      	ldr	r0, [pc, #12]	; (80002e0 <EEPROM_Read_nBytes+0x54>)
 80002d2:	f000 fbff 	bl	8000ad4 <MCAL_I2C_Master_Receive>

	return 0;
 80002d6:	2300      	movs	r3, #0
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40005400 	.word	0x40005400

080002e4 <EXTI0_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void EXTI0_IRQHandler()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	EXTI->PR |= ( 1 << 0 );
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <EXTI0_IRQHandler+0x1c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <EXTI0_IRQHandler+0x1c>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6153      	str	r3, [r2, #20]

	P_IRQ_Callback_g[0]();
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <EXTI0_IRQHandler+0x20>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4798      	blx	r3
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40010400 	.word	0x40010400
 8000304:	2000001c 	.word	0x2000001c

08000308 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <EXTI1_IRQHandler+0x1c>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <EXTI1_IRQHandler+0x1c>)
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[1]();
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <EXTI1_IRQHandler+0x20>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4798      	blx	r3
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40010400 	.word	0x40010400
 8000328:	2000001c 	.word	0x2000001c

0800032c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <EXTI2_IRQHandler+0x1c>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <EXTI2_IRQHandler+0x1c>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[2]();
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <EXTI2_IRQHandler+0x20>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4798      	blx	r3
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40010400 	.word	0x40010400
 800034c:	2000001c 	.word	0x2000001c

08000350 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI3_IRQHandler+0x1c>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <EXTI3_IRQHandler+0x1c>)
 800035a:	f043 0308 	orr.w	r3, r3, #8
 800035e:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[3]();
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <EXTI3_IRQHandler+0x20>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4798      	blx	r3
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010400 	.word	0x40010400
 8000370:	2000001c 	.word	0x2000001c

08000374 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <EXTI4_IRQHandler+0x1c>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <EXTI4_IRQHandler+0x1c>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[4]();
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <EXTI4_IRQHandler+0x20>)
 8000386:	691b      	ldr	r3, [r3, #16]
 8000388:	4798      	blx	r3
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40010400 	.word	0x40010400
 8000394:	2000001c 	.word	0x2000001c

08000398 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5 ; P_IRQ_Callback_g[5](); };
 800039c:	4b26      	ldr	r3, [pc, #152]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d008      	beq.n	80003ba <EXTI9_5_IRQHandler+0x22>
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a22      	ldr	r2, [pc, #136]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6153      	str	r3, [r2, #20]
 80003b4:	4b21      	ldr	r3, [pc, #132]	; (800043c <EXTI9_5_IRQHandler+0xa4>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6 ; P_IRQ_Callback_g[6](); };
 80003ba:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d008      	beq.n	80003d8 <EXTI9_5_IRQHandler+0x40>
 80003c6:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a1b      	ldr	r2, [pc, #108]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <EXTI9_5_IRQHandler+0xa4>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7 ; P_IRQ_Callback_g[7](); };
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d008      	beq.n	80003f6 <EXTI9_5_IRQHandler+0x5e>
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a13      	ldr	r2, [pc, #76]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ee:	6153      	str	r3, [r2, #20]
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <EXTI9_5_IRQHandler+0xa4>)
 80003f2:	69db      	ldr	r3, [r3, #28]
 80003f4:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8 ; P_IRQ_Callback_g[8](); };
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d008      	beq.n	8000414 <EXTI9_5_IRQHandler+0x7c>
 8000402:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a0c      	ldr	r2, [pc, #48]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 8000408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <EXTI9_5_IRQHandler+0xa4>)
 8000410:	6a1b      	ldr	r3, [r3, #32]
 8000412:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9 ; P_IRQ_Callback_g[9](); };
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800041c:	2b00      	cmp	r3, #0
 800041e:	d008      	beq.n	8000432 <EXTI9_5_IRQHandler+0x9a>
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <EXTI9_5_IRQHandler+0xa0>)
 8000426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042a:	6153      	str	r3, [r2, #20]
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <EXTI9_5_IRQHandler+0xa4>)
 800042e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000430:	4798      	blx	r3
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010400 	.word	0x40010400
 800043c:	2000001c 	.word	0x2000001c

08000440 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10 ; P_IRQ_Callback_g[10](); };
 8000444:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800044c:	2b00      	cmp	r3, #0
 800044e:	d008      	beq.n	8000462 <EXTI15_10_IRQHandler+0x22>
 8000450:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a29      	ldr	r2, [pc, #164]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800045a:	6153      	str	r3, [r2, #20]
 800045c:	4b28      	ldr	r3, [pc, #160]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 800045e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000460:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11 ; P_IRQ_Callback_g[11](); };
 8000462:	4b26      	ldr	r3, [pc, #152]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800046a:	2b00      	cmp	r3, #0
 800046c:	d008      	beq.n	8000480 <EXTI15_10_IRQHandler+0x40>
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a22      	ldr	r2, [pc, #136]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 800047c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047e:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12 ; P_IRQ_Callback_g[12](); };
 8000480:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000488:	2b00      	cmp	r3, #0
 800048a:	d008      	beq.n	800049e <EXTI15_10_IRQHandler+0x5e>
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 8000492:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000496:	6153      	str	r3, [r2, #20]
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049c:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13 ; P_IRQ_Callback_g[13](); };
 800049e:	4b17      	ldr	r3, [pc, #92]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d008      	beq.n	80004bc <EXTI15_10_IRQHandler+0x7c>
 80004aa:	4b14      	ldr	r3, [pc, #80]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a13      	ldr	r2, [pc, #76]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 80004b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ba:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14 ; P_IRQ_Callback_g[14](); };
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d008      	beq.n	80004da <EXTI15_10_IRQHandler+0x9a>
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d2:	6153      	str	r3, [r2, #20]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 80004d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d8:	4798      	blx	r3
	if( EXTI->PR & 1<<15 ) { EXTI->PR |= 1<<15 ; P_IRQ_Callback_g[15](); };
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d008      	beq.n	80004f8 <EXTI15_10_IRQHandler+0xb8>
 80004e6:	4b05      	ldr	r3, [pc, #20]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a04      	ldr	r2, [pc, #16]	; (80004fc <EXTI15_10_IRQHandler+0xbc>)
 80004ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b03      	ldr	r3, [pc, #12]	; (8000500 <EXTI15_10_IRQHandler+0xc0>)
 80004f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f6:	4798      	blx	r3
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40010400 	.word	0x40010400
 8000500:	2000001c 	.word	0x2000001c

08000504 <Get_CRLH_Position>:
 * ----------------------------------------------------------
 * 				  Generic Functions
 *-----------------------------------------------------------
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]
	switch( PinNumber )
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000514:	f000 80a5 	beq.w	8000662 <Get_CRLH_Position+0x15e>
 8000518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800051c:	f300 80a3 	bgt.w	8000666 <Get_CRLH_Position+0x162>
 8000520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000524:	f000 809b 	beq.w	800065e <Get_CRLH_Position+0x15a>
 8000528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800052c:	f300 809b 	bgt.w	8000666 <Get_CRLH_Position+0x162>
 8000530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000534:	f000 8091 	beq.w	800065a <Get_CRLH_Position+0x156>
 8000538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800053c:	f300 8093 	bgt.w	8000666 <Get_CRLH_Position+0x162>
 8000540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000544:	f000 8087 	beq.w	8000656 <Get_CRLH_Position+0x152>
 8000548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800054c:	f300 808b 	bgt.w	8000666 <Get_CRLH_Position+0x162>
 8000550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000554:	d07d      	beq.n	8000652 <Get_CRLH_Position+0x14e>
 8000556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800055a:	f300 8084 	bgt.w	8000666 <Get_CRLH_Position+0x162>
 800055e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000562:	d074      	beq.n	800064e <Get_CRLH_Position+0x14a>
 8000564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000568:	dc7d      	bgt.n	8000666 <Get_CRLH_Position+0x162>
 800056a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800056e:	d06c      	beq.n	800064a <Get_CRLH_Position+0x146>
 8000570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000574:	dc77      	bgt.n	8000666 <Get_CRLH_Position+0x162>
 8000576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800057a:	d064      	beq.n	8000646 <Get_CRLH_Position+0x142>
 800057c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000580:	dc71      	bgt.n	8000666 <Get_CRLH_Position+0x162>
 8000582:	2b80      	cmp	r3, #128	; 0x80
 8000584:	d05d      	beq.n	8000642 <Get_CRLH_Position+0x13e>
 8000586:	2b80      	cmp	r3, #128	; 0x80
 8000588:	dc6d      	bgt.n	8000666 <Get_CRLH_Position+0x162>
 800058a:	2b20      	cmp	r3, #32
 800058c:	dc48      	bgt.n	8000620 <Get_CRLH_Position+0x11c>
 800058e:	2b00      	cmp	r3, #0
 8000590:	dd69      	ble.n	8000666 <Get_CRLH_Position+0x162>
 8000592:	3b01      	subs	r3, #1
 8000594:	2b1f      	cmp	r3, #31
 8000596:	d866      	bhi.n	8000666 <Get_CRLH_Position+0x162>
 8000598:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <Get_CRLH_Position+0x9c>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	08000627 	.word	0x08000627
 80005a4:	0800062b 	.word	0x0800062b
 80005a8:	08000667 	.word	0x08000667
 80005ac:	0800062f 	.word	0x0800062f
 80005b0:	08000667 	.word	0x08000667
 80005b4:	08000667 	.word	0x08000667
 80005b8:	08000667 	.word	0x08000667
 80005bc:	08000633 	.word	0x08000633
 80005c0:	08000667 	.word	0x08000667
 80005c4:	08000667 	.word	0x08000667
 80005c8:	08000667 	.word	0x08000667
 80005cc:	08000667 	.word	0x08000667
 80005d0:	08000667 	.word	0x08000667
 80005d4:	08000667 	.word	0x08000667
 80005d8:	08000667 	.word	0x08000667
 80005dc:	08000637 	.word	0x08000637
 80005e0:	08000667 	.word	0x08000667
 80005e4:	08000667 	.word	0x08000667
 80005e8:	08000667 	.word	0x08000667
 80005ec:	08000667 	.word	0x08000667
 80005f0:	08000667 	.word	0x08000667
 80005f4:	08000667 	.word	0x08000667
 80005f8:	08000667 	.word	0x08000667
 80005fc:	08000667 	.word	0x08000667
 8000600:	08000667 	.word	0x08000667
 8000604:	08000667 	.word	0x08000667
 8000608:	08000667 	.word	0x08000667
 800060c:	08000667 	.word	0x08000667
 8000610:	08000667 	.word	0x08000667
 8000614:	08000667 	.word	0x08000667
 8000618:	08000667 	.word	0x08000667
 800061c:	0800063b 	.word	0x0800063b
 8000620:	2b40      	cmp	r3, #64	; 0x40
 8000622:	d00c      	beq.n	800063e <Get_CRLH_Position+0x13a>
 8000624:	e01f      	b.n	8000666 <Get_CRLH_Position+0x162>
	{
	//CRL
	case GPIO_PIN_0:
		return 0;
 8000626:	2300      	movs	r3, #0
 8000628:	e01e      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_1:
		return 4;
 800062a:	2304      	movs	r3, #4
 800062c:	e01c      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_2:
		return 8;
 800062e:	2308      	movs	r3, #8
 8000630:	e01a      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_3:
		return 12;
 8000632:	230c      	movs	r3, #12
 8000634:	e018      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_4:
		return 16;
 8000636:	2310      	movs	r3, #16
 8000638:	e016      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_5:
		return 20;
 800063a:	2314      	movs	r3, #20
 800063c:	e014      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_6:
		return 24;
 800063e:	2318      	movs	r3, #24
 8000640:	e012      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_7:
		return 28;
 8000642:	231c      	movs	r3, #28
 8000644:	e010      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

		//CRH
	case GPIO_PIN_8:
		return 0;
 8000646:	2300      	movs	r3, #0
 8000648:	e00e      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_9:
		return 4;
 800064a:	2304      	movs	r3, #4
 800064c:	e00c      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_10:
		return 8;
 800064e:	2308      	movs	r3, #8
 8000650:	e00a      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_11:
		return 12;
 8000652:	230c      	movs	r3, #12
 8000654:	e008      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_12:
		return 16;
 8000656:	2310      	movs	r3, #16
 8000658:	e006      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_13:
		return 20;
 800065a:	2314      	movs	r3, #20
 800065c:	e004      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_14:
		return 24;
 800065e:	2318      	movs	r3, #24
 8000660:	e002      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_15:
		return 28;
 8000662:	231c      	movs	r3, #28
 8000664:	e000      	b.n	8000668 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <MCAL_GPIO_Init>:
 * @retval 		- None
 * Note			- STM32F103C6 MCU has GPIO A,B,C,D,E modules
 * 				  but LQFP48 package has only GPIO A,B, part of C/D exported as external Pins from the modules
 **================================================================*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PinConfig_t *Pin_Config)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
	volatile uint32_t *ConfigReg = NULL;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
	uint8_t ConfigPin = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) Configure Pins from 0 --> 7
	//Port configuration register high (GPIOx_CRH) Configure Pins from 8 --> 15
	ConfigReg = ( Pin_Config->GPIO_PinNumber < GPIO_PIN_8 ) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	2bff      	cmp	r3, #255	; 0xff
 800068c:	d801      	bhi.n	8000692 <MCAL_GPIO_Init+0x1e>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	e001      	b.n	8000696 <MCAL_GPIO_Init+0x22>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3304      	adds	r3, #4
 8000696:	60bb      	str	r3, [r7, #8]

	//Clear  CNF[1:0] MODE[1:0]
	(*ConfigReg) &= ~( (0xF) << Get_CRLH_Position(Pin_Config->GPIO_PinNumber) );
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff31 	bl	8000504 <Get_CRLH_Position>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	230f      	movs	r3, #15
 80006a8:	4093      	lsls	r3, r2
 80006aa:	43da      	mvns	r2, r3
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	401a      	ands	r2, r3
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	601a      	str	r2, [r3, #0]

	//If Pin is output
	if( (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_OUTPUT_PP ) || (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_OUTPUT_OD ) | (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_ALTFN_OUTPUT_OD ) | (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_ALTFN_OUTPUT_PP ) )
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	789b      	ldrb	r3, [r3, #2]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d01a      	beq.n	80006f4 <MCAL_GPIO_Init+0x80>
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	2b05      	cmp	r3, #5
 80006c4:	bf0c      	ite	eq
 80006c6:	2301      	moveq	r3, #1
 80006c8:	2300      	movne	r3, #0
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	789b      	ldrb	r3, [r3, #2]
 80006d0:	2b07      	cmp	r3, #7
 80006d2:	bf0c      	ite	eq
 80006d4:	2301      	moveq	r3, #1
 80006d6:	2300      	movne	r3, #0
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4313      	orrs	r3, r2
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	789b      	ldrb	r3, [r3, #2]
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	bf0c      	ite	eq
 80006e8:	2301      	moveq	r3, #1
 80006ea:	2300      	movne	r3, #0
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00e      	beq.n	8000712 <MCAL_GPIO_Init+0x9e>
	{
		//Set CNF[1:0] MODE[1:0]
		ConfigPin = ( (( (Pin_Config->GPIO_Mode - 4) << 2 ) | ( Pin_Config->GPIO_Output_Speed ))  & 0x0F );
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	789b      	ldrb	r3, [r3, #2]
 80006f8:	3b04      	subs	r3, #4
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	b25a      	sxtb	r2, r3
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	78db      	ldrb	r3, [r3, #3]
 8000702:	b25b      	sxtb	r3, r3
 8000704:	4313      	orrs	r3, r2
 8000706:	b25b      	sxtb	r3, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	e02c      	b.n	800076c <MCAL_GPIO_Init+0xf8>
	}
	//If Pin is input
	else //MODE = 00 :Input Mode(reset state)
	{
		if( (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_INPUT_FLOA ) || (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_Analog ) )
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	789b      	ldrb	r3, [r3, #2]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d003      	beq.n	8000722 <MCAL_GPIO_Init+0xae>
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d107      	bne.n	8000732 <MCAL_GPIO_Init+0xbe>
		{
			//Set CNF[1:0] MODE[1:0]00
			ConfigPin = ( ( (Pin_Config->GPIO_Mode) << 2 ) & 0x0F );
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	73fb      	strb	r3, [r7, #15]
 8000730:	e01c      	b.n	800076c <MCAL_GPIO_Init+0xf8>
		}
		else if( Pin_Config->GPIO_Mode == GPIO_PIN_MODE_ALTFN_INPUT ) //Consider it as Input Floating
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	789b      	ldrb	r3, [r3, #2]
 8000736:	2b08      	cmp	r3, #8
 8000738:	d102      	bne.n	8000740 <MCAL_GPIO_Init+0xcc>
		{
			//Set CNF[1:0] MODE[1:0]00
			ConfigPin = ( ( (GPIO_PIN_MODE_INPUT_FLOA) << 2 ) & 0x0F );
 800073a:	2304      	movs	r3, #4
 800073c:	73fb      	strb	r3, [r7, #15]
 800073e:	e015      	b.n	800076c <MCAL_GPIO_Init+0xf8>
		}
		else // PU\PD Input
		{
			ConfigPin = ( ( (GPIO_PIN_MODE_INPUT_PU) << 2 ) & 0x0F );
 8000740:	2308      	movs	r3, #8
 8000742:	73fb      	strb	r3, [r7, #15]

			if ( Pin_Config->GPIO_Mode == GPIO_PIN_MODE_INPUT_PU )
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	789b      	ldrb	r3, [r3, #2]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d107      	bne.n	800075c <MCAL_GPIO_Init+0xe8>
			{
				//PxODR = 1 :Table 20. Port bit configuration table
				GPIOx->ODR |= (Pin_Config->GPIO_PinNumber );
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	683a      	ldr	r2, [r7, #0]
 8000752:	8812      	ldrh	r2, [r2, #0]
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	e007      	b.n	800076c <MCAL_GPIO_Init+0xf8>
			}
			else
			{
				//PxODR = 0 :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(Pin_Config->GPIO_PinNumber);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	8812      	ldrh	r2, [r2, #0]
 8000764:	43d2      	mvns	r2, r2
 8000766:	401a      	ands	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CRH\CRL
	(*ConfigReg) |= ( ConfigPin << Get_CRLH_Position(Pin_Config->GPIO_PinNumber) );
 800076c:	7bfc      	ldrb	r4, [r7, #15]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fec6 	bl	8000504 <Get_CRLH_Position>
 8000778:	4603      	mov	r3, r0
 800077a:	fa04 f203 	lsl.w	r2, r4, r3
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	431a      	orrs	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	601a      	str	r2, [r3, #0]
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bd90      	pop	{r4, r7, pc}

08000790 <MCAL_I2C_Init>:
 * @param [in]  -I2C_Config :All the I2C configuration
 * @retval      -None
 * Note         -Supports Master in Polling Mechanism & Slave in Interrupt Mechanism
 **================================================================*/
void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_Config_t *I2C_Cfg)
{
 8000790:	b5b0      	push	{r4, r5, r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
	uint16_t tempreg = 0, freqrange = 0 , SM_Speed = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	82fb      	strh	r3, [r7, #22]
 800079e:	2300      	movs	r3, #0
 80007a0:	82bb      	strh	r3, [r7, #20]
 80007a2:	2300      	movs	r3, #0
 80007a4:	827b      	strh	r3, [r7, #18]
	uint32_t pclk1 = 8000000;
 80007a6:	4b7b      	ldr	r3, [pc, #492]	; (8000994 <MCAL_I2C_Init+0x204>)
 80007a8:	60fb      	str	r3, [r7, #12]

	// Enable RCC clock
	if( I2Cx == I2C1 )
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a7a      	ldr	r2, [pc, #488]	; (8000998 <MCAL_I2C_Init+0x208>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d110      	bne.n	80007d4 <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_Cfg;
 80007b2:	4a7a      	ldr	r2, [pc, #488]	; (800099c <MCAL_I2C_Init+0x20c>)
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	4614      	mov	r4, r2
 80007b8:	461d      	mov	r5, r3
 80007ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c2:	682b      	ldr	r3, [r5, #0]
 80007c4:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_ENABLE();
 80007c6:	4b76      	ldr	r3, [pc, #472]	; (80009a0 <MCAL_I2C_Init+0x210>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a75      	ldr	r2, [pc, #468]	; (80009a0 <MCAL_I2C_Init+0x210>)
 80007cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	e010      	b.n	80007f6 <MCAL_I2C_Init+0x66>
	}
	else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_Cfg;
 80007d4:	4b71      	ldr	r3, [pc, #452]	; (800099c <MCAL_I2C_Init+0x20c>)
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80007dc:	4615      	mov	r5, r2
 80007de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e6:	682b      	ldr	r3, [r5, #0]
 80007e8:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_ENABLE();
 80007ea:	4b6d      	ldr	r3, [pc, #436]	; (80009a0 <MCAL_I2C_Init+0x210>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a6c      	ldr	r2, [pc, #432]	; (80009a0 <MCAL_I2C_Init+0x210>)
 80007f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f4:	61d3      	str	r3, [r2, #28]
	}

	// Mode
	if( I2C_Cfg->I2C_Mode == I2C_MODE_I2C )
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 8082 	bne.w	8000904 <MCAL_I2C_Init+0x174>
	{
		/******************   Init Time   ******************/
		// I2C_CR2.FREQ[5:0] : Peripheral clock frequency from APB1
		// Get the I2Cx CR2 Value
		tempreg = I2Cx->CR2;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	82fb      	strh	r3, [r7, #22]
		// Clear Frequency FREQ[5:0] bits
		tempreg &= ~(I2C_CR2_FREQ_Msk);
 8000806:	8afb      	ldrh	r3, [r7, #22]
 8000808:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800080c:	82fb      	strh	r3, [r7, #22]
		// Get pclk1 Frequency Value
		pclk1 = MCAL_RCC_GetPClk1Freq();
 800080e:	f000 fc4d 	bl	80010ac <MCAL_RCC_GetPClk1Freq>
 8000812:	60f8      	str	r0, [r7, #12]
		// Set the Frequency Bits Depending on pclk1 value
		freqrange = (uint16_t)(pclk1 / 1000000);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4a63      	ldr	r2, [pc, #396]	; (80009a4 <MCAL_I2C_Init+0x214>)
 8000818:	fba2 2303 	umull	r2, r3, r2, r3
 800081c:	0c9b      	lsrs	r3, r3, #18
 800081e:	82bb      	strh	r3, [r7, #20]

		tempreg |= freqrange;
 8000820:	8afa      	ldrh	r2, [r7, #22]
 8000822:	8abb      	ldrh	r3, [r7, #20]
 8000824:	4313      	orrs	r3, r2
 8000826:	82fb      	strh	r3, [r7, #22]
		// Write to I2Cx CR2 register
		I2Cx->CR2 = tempreg;
 8000828:	8afa      	ldrh	r2, [r7, #22]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	605a      	str	r2, [r3, #4]

		//Configure the clock control register I2C_CCR
		// Disable The Selected I2C Peripheral To Configure Time
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f023 0201 	bic.w	r2, r3, #1
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]

		tempreg = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	82fb      	strh	r3, [r7, #22]
		// Configure Speed In Standard Mode
		if( I2C_Cfg->Clock_Speed == I2C_SCLK_SM_50K || I2C_Cfg->Clock_Speed == I2C_SCLK_SM_100K )
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000846:	4293      	cmp	r3, r2
 8000848:	d004      	beq.n	8000854 <MCAL_I2C_Init+0xc4>
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a56      	ldr	r2, [pc, #344]	; (80009a8 <MCAL_I2C_Init+0x218>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d112      	bne.n	800087a <MCAL_I2C_Init+0xea>
			// Standard Mode Speed Calculations
			//					 Tclk / 2 = CCR * Tpclk1
			// 					 CCR = Tclk / (2 * Tpclk1)
			//					 CCR = Fpclk1 / (2 * I2C_ClockFrequency)

			SM_Speed = (uint16_t)( pclk1 / ( I2C_Cfg->Clock_Speed << 1 ) );
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000860:	827b      	strh	r3, [r7, #18]
			tempreg |= SM_Speed;
 8000862:	8afa      	ldrh	r2, [r7, #22]
 8000864:	8a7b      	ldrh	r3, [r7, #18]
 8000866:	4313      	orrs	r3, r2
 8000868:	82fb      	strh	r3, [r7, #22]
			// Write to CCR
			I2Cx->CCR = tempreg;
 800086a:	8afa      	ldrh	r2, [r7, #22]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	61da      	str	r2, [r3, #28]

			/******************   TRISE_Configuration   ******************/
			//	If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//	therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 8000870:	8abb      	ldrh	r3, [r7, #20]
 8000872:	3301      	adds	r3, #1
 8000874:	461a      	mov	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	621a      	str	r2, [r3, #32]
		{
			//TODO  Fast Mode Is Not Implemented
		}

		/******************  I2Cx CR1_Configuration   ******************/
		tempreg = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	82fb      	strh	r3, [r7, #22]
		// Get The I2Cx CR1 value
		tempreg = I2Cx->CR1;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	82fb      	strh	r3, [r7, #22]

		tempreg |= (uint16_t)( I2C_Cfg->ACK_Control | I2C_Cfg->General_Call_Address_Detection | I2C_Cfg->I2C_Mode | I2C_Cfg->Stretch_Mode );
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	b29a      	uxth	r2, r3
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	b29b      	uxth	r3, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	b29a      	uxth	r2, r3
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	b29b      	uxth	r3, r3
 800089a:	4313      	orrs	r3, r2
 800089c:	b29a      	uxth	r2, r3
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	8afb      	ldrh	r3, [r7, #22]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	82fb      	strh	r3, [r7, #22]
		// Write to I2Cx CR1 register
		I2Cx->CR1 = tempreg;
 80008ae:	8afa      	ldrh	r2, [r7, #22]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	601a      	str	r2, [r3, #0]

		/******************  I2Cx OAR1 & OAR2 Configuration   ******************/
		tempreg = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	82fb      	strh	r3, [r7, #22]
		if(I2C_Cfg->I2C_Slave_Address.Enable_Dual_Address == 1)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	899b      	ldrh	r3, [r3, #12]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d10d      	bne.n	80008dc <MCAL_I2C_Init+0x14c>
		{
			tempreg = I2C_OAR2_ENDUAL;
 80008c0:	2301      	movs	r3, #1
 80008c2:	82fb      	strh	r3, [r7, #22]
			tempreg |= I2C_Cfg->I2C_Slave_Address.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	8a1b      	ldrh	r3, [r3, #16]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tempreg;
 80008d6:	8afa      	ldrh	r2, [r7, #22]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	60da      	str	r2, [r3, #12]
		}

		tempreg = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	82fb      	strh	r3, [r7, #22]

		tempreg |= I2C_Cfg->I2C_Slave_Address.Primary_Slave_Address << I2C_OAR1_ADD_Pos;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	89db      	ldrh	r3, [r3, #14]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2C_Cfg->I2C_Slave_Address.I2C_Addressing_Mode;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	8afb      	ldrh	r3, [r7, #22]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	82fb      	strh	r3, [r7, #22]
		// Write to I2Cx OAR1 register
		I2Cx->OAR1 = tempreg;
 80008fe:	8afa      	ldrh	r2, [r7, #22]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	609a      	str	r2, [r3, #8]
	{
		//TODO  SMBUS Not Implemented
	}

	// Interrupt mode (Slave mode) // Check CallBack Pointer != NULL
	if( I2C_Cfg->P_SlaveEvent_IRQ_CallBack != NULL )
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	6a1b      	ldr	r3, [r3, #32]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d038      	beq.n	800097e <MCAL_I2C_Init+0x1ee>
	{
		// Enable IRQs
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	605a      	str	r2, [r3, #4]

		if( I2Cx == I2C1 )
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a19      	ldr	r2, [pc, #100]	; (8000998 <MCAL_I2C_Init+0x208>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d10c      	bne.n	8000952 <MCAL_I2C_Init+0x1c2>
		{
			NVIC_IRQ31_I2C1_EV_ENABLE();
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MCAL_I2C_Init+0x21c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <MCAL_I2C_Init+0x21c>)
 800093e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000942:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_ENABLE();
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MCAL_I2C_Init+0x220>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <MCAL_I2C_Init+0x220>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	e00f      	b.n	8000972 <MCAL_I2C_Init+0x1e2>

		}
		else if( I2Cx == I2C2 )
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <MCAL_I2C_Init+0x224>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d10b      	bne.n	8000972 <MCAL_I2C_Init+0x1e2>
		{
			NVIC_IRQ33_I2C2_EV_ENABLE();
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MCAL_I2C_Init+0x220>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <MCAL_I2C_Init+0x220>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_ENABLE();
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MCAL_I2C_Init+0x220>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <MCAL_I2C_Init+0x220>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	6013      	str	r3, [r2, #0]
		}
		I2Cx->SR1 = 0;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
	}
	// Enable The Selected I2C Peripheral
	I2Cx->CR1 |= I2C_CR1_PE;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f043 0201 	orr.w	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	601a      	str	r2, [r3, #0]
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bdb0      	pop	{r4, r5, r7, pc}
 8000992:	bf00      	nop
 8000994:	007a1200 	.word	0x007a1200
 8000998:	40005400 	.word	0x40005400
 800099c:	2000005c 	.word	0x2000005c
 80009a0:	40021000 	.word	0x40021000
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	000186a0 	.word	0x000186a0
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	e000e104 	.word	0xe000e104
 80009b4:	40005800 	.word	0x40005800

080009b8 <MCAL_I2C_GPIO_SetPins>:
 * @param [in]	- I2Cx :Where x can be (1...3 depending on device used)
 * @retval 		- None
 * Note			- Should Enable the Corresponding GPIO/AFIO In RCC
 **================================================================*/
void MCAL_I2C_GPIO_SetPins(I2C_TypeDef* I2Cx)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if( I2Cx == I2C1 )
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <MCAL_I2C_GPIO_SetPins+0x70>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d114      	bne.n	80009f2 <MCAL_I2C_GPIO_SetPins+0x3a>
	{
		//			 PB6: I2C1_SCL
		// 			 PB7: I2C1_SDA

		PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_OD;
 80009c8:	2307      	movs	r3, #7
 80009ca:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]

		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80009d0:	2340      	movs	r3, #64	; 0x40
 80009d2:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	4814      	ldr	r0, [pc, #80]	; (8000a2c <MCAL_I2C_GPIO_SetPins+0x74>)
 80009dc:	f7ff fe4a 	bl	8000674 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	4619      	mov	r1, r3
 80009ea:	4810      	ldr	r0, [pc, #64]	; (8000a2c <MCAL_I2C_GPIO_SetPins+0x74>)
 80009ec:	f7ff fe42 	bl	8000674 <MCAL_GPIO_Init>
		MCAL_GPIO_Init(GPIOB, &PinCfg);

		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
		MCAL_GPIO_Init(GPIOB, &PinCfg);
	}
}
 80009f0:	e015      	b.n	8000a1e <MCAL_I2C_GPIO_SetPins+0x66>
	else if( I2Cx == I2C2 )
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <MCAL_I2C_GPIO_SetPins+0x78>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d111      	bne.n	8000a1e <MCAL_I2C_GPIO_SetPins+0x66>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80009fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fe:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <MCAL_I2C_GPIO_SetPins+0x74>)
 8000a08:	f7ff fe34 	bl	8000674 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a10:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MCAL_I2C_GPIO_SetPins+0x74>)
 8000a1a:	f7ff fe2b 	bl	8000674 <MCAL_GPIO_Init>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40010c00 	.word	0x40010c00
 8000a30:	40005800 	.word	0x40005800

08000a34 <MCAL_I2C_Master_Transmit>:
 * @param [in] 	- Start: If you want to send a Start or repeated start
 * @retval 		- None
 * Note			- Master Transmit Data In Polling Mode
 **================================================================*/
void MCAL_I2C_Master_Transmit(I2C_TypeDef *I2Cx, uint16_t SlaveAddress, uint8_t *DataOut, uint32_t DataLen, eStopCondition Stop, eStartCondition Start)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	460b      	mov	r3, r1
 8000a42:	817b      	strh	r3, [r7, #10]
	// Todo
	// Support Timeout (Configure timer working for specific duration)

	// 1- Set The START bit in I2C_CRQ to generate a start condition
	I2C_Generate_START(I2Cx, I2C_ENABLE, Start);
 8000a44:	7f3b      	ldrb	r3, [r7, #28]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2101      	movs	r1, #1
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f000 f8de 	bl	8000c0c <I2C_Generate_START>

	// 2- Wait for EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000a50:	bf00      	nop
 8000a52:	2101      	movs	r1, #1
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f000 f97b 	bl	8000d50 <I2C_GetFlagStatus>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0f8      	beq.n	8000a52 <MCAL_I2C_Master_Transmit+0x1e>

	// 3- Send Address
	I2C_SendAddress(I2Cx, SlaveAddress, I2C_Direction_Transmitter);
 8000a60:	897b      	ldrh	r3, [r7, #10]
 8000a62:	2200      	movs	r2, #0
 8000a64:	4619      	mov	r1, r3
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 f912 	bl	8000c90 <I2C_SendAddress>

	// Wait for EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000a6c:	bf00      	nop
 8000a6e:	2102      	movs	r1, #2
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f000 f96d 	bl	8000d50 <I2C_GetFlagStatus>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f8      	beq.n	8000a6e <MCAL_I2C_Master_Transmit+0x3a>

	// 4- Check : TRA, BUSY, MSL, TXE Flags
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000a7c:	bf00      	nop
 8000a7e:	4914      	ldr	r1, [pc, #80]	; (8000ad0 <MCAL_I2C_Master_Transmit+0x9c>)
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f000 f965 	bl	8000d50 <I2C_GetFlagStatus>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0f8      	beq.n	8000a7e <MCAL_I2C_Master_Transmit+0x4a>

	// 5- Send Data
	while( DataLen >0 )
 8000a8c:	e012      	b.n	8000ab4 <MCAL_I2C_Master_Transmit+0x80>
	{
		// Write in the DR register the data to be sent
		I2Cx->DR = *DataOut;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	611a      	str	r2, [r3, #16]
		DataOut++;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	607b      	str	r3, [r7, #4]
		DataLen--;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	603b      	str	r3, [r7, #0]

		// Wait EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 8000aa4:	bf00      	nop
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f000 f951 	bl	8000d50 <I2C_GetFlagStatus>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f8      	beq.n	8000aa6 <MCAL_I2C_Master_Transmit+0x72>
	while( DataLen >0 )
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1e9      	bne.n	8000a8e <MCAL_I2C_Master_Transmit+0x5a>
	// Already the last byte checked in the for loop
	//	EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	//	while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	// 6- Stop Condition
	if(Stop == WITH_STOP)
 8000aba:	7e3b      	ldrb	r3, [r7, #24]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d103      	bne.n	8000ac8 <MCAL_I2C_Master_Transmit+0x94>
	{
		I2C_Generate_STOP(I2Cx,I2C_ENABLE);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f000 f8c9 	bl	8000c5a <I2C_Generate_STOP>
	}
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	00070080 	.word	0x00070080

08000ad4 <MCAL_I2C_Master_Receive>:


void MCAL_I2C_Master_Receive(I2C_TypeDef *I2Cx, uint16_t SlaveAddress, uint8_t *DataIn, uint32_t DataLen, eStopCondition Stop, eStartCondition Start)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	817b      	strh	r3, [r7, #10]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4a47      	ldr	r2, [pc, #284]	; (8000c04 <MCAL_I2C_Master_Receive+0x130>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	bf14      	ite	ne
 8000aec:	2301      	movne	r3, #1
 8000aee:	2300      	moveq	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	75fb      	strb	r3, [r7, #23]

	// 1- Set START bit in I2C_CRQ to generate a start condition
	I2C_Generate_START(I2Cx, I2C_ENABLE, REPEATED_START);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2101      	movs	r1, #1
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f000 f887 	bl	8000c0c <I2C_Generate_START>

	// 2- Wait for EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000afe:	bf00      	nop
 8000b00:	2101      	movs	r1, #1
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f000 f924 	bl	8000d50 <I2C_GetFlagStatus>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0f8      	beq.n	8000b00 <MCAL_I2C_Master_Receive+0x2c>

	// 3- Send Address
	I2C_SendAddress(I2Cx, SlaveAddress, I2C_Direction_Reciever);
 8000b0e:	897b      	ldrh	r3, [r7, #10]
 8000b10:	2201      	movs	r2, #1
 8000b12:	4619      	mov	r1, r3
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f000 f8bb 	bl	8000c90 <I2C_SendAddress>

	//Wait for EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000b1a:	bf00      	nop
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 f916 	bl	8000d50 <I2C_GetFlagStatus>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0f8      	beq.n	8000b1c <MCAL_I2C_Master_Receive+0x48>

	//procedure to read only 1 byte from slave
    if( DataLen == 1 )
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d151      	bne.n	8000bd4 <MCAL_I2C_Master_Receive+0x100>
    {
		//Disable Acking
    	I2C_AcknowledgeConfig(I2Cx,I2C_DISABLE);
 8000b30:	2100      	movs	r1, #0
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f000 f8e2 	bl	8000cfc <I2C_AcknowledgeConfig>

    	// Wait for EV7: RXNE=1, Cleared by reading DR
    	while(!I2C_GetFlagStatus(I2Cx, EV7));
 8000b38:	bf00      	nop
 8000b3a:	2103      	movs	r1, #3
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f000 f907 	bl	8000d50 <I2C_GetFlagStatus>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0f8      	beq.n	8000b3a <MCAL_I2C_Master_Receive+0x66>

    	if( Stop == WITH_STOP )
 8000b48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d103      	bne.n	8000b58 <MCAL_I2C_Master_Receive+0x84>
    	{
    		I2C_Generate_STOP(I2Cx, I2C_ENABLE);
 8000b50:	2101      	movs	r1, #1
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f000 f881 	bl	8000c5a <I2C_Generate_STOP>
    	}

    	// Read data from register
    	*DataIn = I2Cx->DR;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	701a      	strb	r2, [r3, #0]
    	DataLen--;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	e037      	b.n	8000bda <MCAL_I2C_Master_Receive+0x106>
    else
    {
        while( DataLen > 0 )
        {
        	// Wait for EV7: RXNE=1, Cleared by reading DR
        	while(!I2C_GetFlagStatus(I2Cx, EV7));
 8000b6a:	bf00      	nop
 8000b6c:	2103      	movs	r1, #3
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f000 f8ee 	bl	8000d50 <I2C_GetFlagStatus>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f8      	beq.n	8000b6c <MCAL_I2C_Master_Receive+0x98>

    		if( DataLen == 2 )
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d11e      	bne.n	8000bbe <MCAL_I2C_Master_Receive+0xea>
    		{
        		*DataIn = I2Cx->DR;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	701a      	strb	r2, [r3, #0]
        		DataIn++;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
        		DataLen--;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	603b      	str	r3, [r7, #0]

               	// Wait for EV7: RXNE=1, Cleared by reading DR
                while(!I2C_GetFlagStatus(I2Cx, EV7));
 8000b96:	bf00      	nop
 8000b98:	2103      	movs	r1, #3
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f000 f8d8 	bl	8000d50 <I2C_GetFlagStatus>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0f8      	beq.n	8000b98 <MCAL_I2C_Master_Receive+0xc4>

    			//Disable Acking
    	    	I2C_AcknowledgeConfig(I2Cx,I2C_DISABLE);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 f8a7 	bl	8000cfc <I2C_AcknowledgeConfig>

            	if( Stop == WITH_STOP )
 8000bae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d103      	bne.n	8000bbe <MCAL_I2C_Master_Receive+0xea>
            	{
            		I2C_Generate_STOP(I2Cx, I2C_ENABLE);
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f000 f84e 	bl	8000c5a <I2C_Generate_STOP>
            	}

    		}
    		*DataIn = I2Cx->DR;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	701a      	strb	r2, [r3, #0]
    		DataIn++;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
    		DataLen--;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
        while( DataLen > 0 )
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1c7      	bne.n	8000b6a <MCAL_I2C_Master_Receive+0x96>
        }
    }

	// Re-enabling the acknowledge According to the original configuration
	if( Global_I2C_Config[index].ACK_Control == I2C_ACK_ENABLE )
 8000bda:	7dfa      	ldrb	r2, [r7, #23]
 8000bdc:	490a      	ldr	r1, [pc, #40]	; (8000c08 <MCAL_I2C_Master_Receive+0x134>)
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	4413      	add	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3318      	adds	r3, #24
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bf0:	d103      	bne.n	8000bfa <MCAL_I2C_Master_Receive+0x126>
	{
		I2C_AcknowledgeConfig(I2Cx,I2C_ENABLE);
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f000 f881 	bl	8000cfc <I2C_AcknowledgeConfig>
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40005400 	.word	0x40005400
 8000c08:	2000005c 	.word	0x2000005c

08000c0c <I2C_Generate_START>:
{
	return ((uint8_t)(I2Cx->DR));
}

void I2C_Generate_START(I2C_TypeDef *I2Cx, eFunctionalState NewState,eStartCondition Start)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	70bb      	strb	r3, [r7, #2]
	// Check if Start or Repeated Start
	if( Start != REPEATED_START )
 8000c1c:	78bb      	ldrb	r3, [r7, #2]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d007      	beq.n	8000c32 <I2C_Generate_START+0x26>
	{
		// Check if The Bus is Idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000c22:	bf00      	nop
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f892 	bl	8000d50 <I2C_GetFlagStatus>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f8      	bne.n	8000c24 <I2C_Generate_START+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if( NewState != I2C_DISABLE )
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <I2C_Generate_START+0x3a>
	{
		// Generate a Start Condition
		I2Cx->CR1 |= I2C_CR1_START;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	601a      	str	r2, [r3, #0]
	else
	{
		// Disable The Start Condition Generation
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}
}
 8000c44:	e005      	b.n	8000c52 <I2C_Generate_START+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <I2C_Generate_STOP>:

void I2C_Generate_STOP(I2C_TypeDef *I2Cx, eFunctionalState NewState)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	70fb      	strb	r3, [r7, #3]
	if( NewState != I2C_DISABLE)
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d006      	beq.n	8000c7a <I2C_Generate_STOP+0x20>
	{
		// Generate a Stop Condition
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	601a      	str	r2, [r3, #0]
	else
	{
		// Disable The Stop Condition Generation
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000c78:	e005      	b.n	8000c86 <I2C_Generate_STOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16_t Address, eI2C_Direction Direction)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	707b      	strb	r3, [r7, #1]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <I2C_SendAddress+0x64>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	bf14      	ite	ne
 8000ca8:	2301      	movne	r3, #1
 8000caa:	2300      	moveq	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	73fb      	strb	r3, [r7, #15]

	// Check if 7-bit address or 10-bit address
	if(Global_I2C_Config[index].I2C_Slave_Address.I2C_Addressing_Mode == I2C_ADDRESSING_7BIT)
 8000cb0:	7bfa      	ldrb	r2, [r7, #15]
 8000cb2:	4911      	ldr	r1, [pc, #68]	; (8000cf8 <I2C_SendAddress+0x68>)
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	4413      	add	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	3314      	adds	r3, #20
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d111      	bne.n	8000cea <I2C_SendAddress+0x5a>
	{
		Address = (Address << 1);
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	807b      	strh	r3, [r7, #2]

		if( Direction != I2C_Direction_Transmitter )
 8000ccc:	787b      	ldrb	r3, [r7, #1]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d004      	beq.n	8000cdc <I2C_SendAddress+0x4c>
		{
			// Set The Address bit0 For Read
			Address |= 1<<0;
 8000cd2:	887b      	ldrh	r3, [r7, #2]
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	807b      	strh	r3, [r7, #2]
 8000cda:	e003      	b.n	8000ce4 <I2C_SendAddress+0x54>
		}
		else
		{
			// Reset The Address bit0 For write
			Address &= ~(1<<0);
 8000cdc:	887b      	ldrh	r3, [r7, #2]
 8000cde:	f023 0301 	bic.w	r3, r3, #1
 8000ce2:	807b      	strh	r3, [r7, #2]
		}

		// Send The Address
		I2Cx->DR = Address;
 8000ce4:	887a      	ldrh	r2, [r7, #2]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	611a      	str	r2, [r3, #16]
	}
	else
	{
		//Todo Not Implemented
	}
}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	2000005c 	.word	0x2000005c

08000cfc <I2C_AcknowledgeConfig>:

void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, eFunctionalState NewState)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	70fb      	strb	r3, [r7, #3]
	if (NewState != I2C_DISABLE)
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <I2C_AcknowledgeConfig+0x20>
	{
		/* Enable the acknowledgment */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the acknowledgment */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000d1a:	e005      	b.n	8000d28 <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <I2C_ClearADDRFlag>:

void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
    uint32_t dummy_read;
    dummy_read = pI2Cx->SR1;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	60fb      	str	r3, [r7, #12]
    dummy_read = pI2Cx->SR2;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	60fb      	str	r3, [r7, #12]
	(void)dummy_read;
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <I2C_GetFlagStatus>:

eFlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, eI2C_Events Event)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b087      	sub	sp, #28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
	uint32_t flag1 = 0 , flag2 = 0 , lastEvent = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
	eFlagStatus BitStatus = I2C_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	75fb      	strb	r3, [r7, #23]
	switch( Event )
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2b05      	cmp	r3, #5
 8000d6e:	d811      	bhi.n	8000d94 <I2C_GetFlagStatus+0x44>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	2b05      	cmp	r3, #5
 8000d74:	d86a      	bhi.n	8000e4c <I2C_GetFlagStatus+0xfc>
 8000d76:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <I2C_GetFlagStatus+0x2c>)
 8000d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7c:	08000d9f 	.word	0x08000d9f
 8000d80:	08000db7 	.word	0x08000db7
 8000d84:	08000dcf 	.word	0x08000dcf
 8000d88:	08000de7 	.word	0x08000de7
 8000d8c:	08000dff 	.word	0x08000dff
 8000d90:	08000dff 	.word	0x08000dff
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <I2C_GetFlagStatus+0x108>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d03c      	beq.n	8000e16 <I2C_GetFlagStatus+0xc6>
 8000d9c:	e056      	b.n	8000e4c <I2C_GetFlagStatus+0xfc>
		//		0: No communication on the bus
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when the interface is disabled (PE=0)
		if(I2Cx->SR2 & (I2C_SR2_BUSY))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <I2C_GetFlagStatus+0x60>
			BitStatus = I2C_SET;
 8000daa:	2301      	movs	r3, #1
 8000dac:	75fb      	strb	r3, [r7, #23]
		else
			BitStatus = I2C_RESET;
		break;
 8000dae:	e04d      	b.n	8000e4c <I2C_GetFlagStatus+0xfc>
			BitStatus = I2C_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	75fb      	strb	r3, [r7, #23]
		break;
 8000db4:	e04a      	b.n	8000e4c <I2C_GetFlagStatus+0xfc>
		//		Bit 0 SB: Start bit (Master mode)
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by hardware when PE=0
		if(I2Cx->SR1 & (I2C_SR1_SB))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <I2C_GetFlagStatus+0x78>
			BitStatus = I2C_SET;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	75fb      	strb	r3, [r7, #23]
		else
			BitStatus = I2C_RESET;
		break;
 8000dc6:	e041      	b.n	8000e4c <I2C_GetFlagStatus+0xfc>
			BitStatus = I2C_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	75fb      	strb	r3, [r7, #23]
		break;
 8000dcc:	e03e      	b.n	8000e4c <I2C_GetFlagStatus+0xfc>
	case EV6:
	{
		//		Bit 1 ADDR: Address sent (Master mode)/matched(Slave mode)
		//		0: No end of address transmission
		//		1: End of address transmission
		if(I2Cx->SR1 & (I2C_SR1_ADDR))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <I2C_GetFlagStatus+0x90>
			BitStatus = I2C_SET;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	75fb      	strb	r3, [r7, #23]
		else
			BitStatus = I2C_RESET;
		break;
 8000dde:	e035      	b.n	8000e4c <I2C_GetFlagStatus+0xfc>
			BitStatus = I2C_RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	75fb      	strb	r3, [r7, #23]
		break;
 8000de4:	e032      	b.n	8000e4c <I2C_GetFlagStatus+0xfc>
	case EV7:
	{
		//		Bit 6 RxNE: Data register not empty (receivers)
		//		0: Data register empty
		//		1: Data register not empty
		if((I2Cx->SR1)& (I2C_SR1_RXNE))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <I2C_GetFlagStatus+0xa8>
			BitStatus = I2C_SET;
 8000df2:	2301      	movs	r3, #1
 8000df4:	75fb      	strb	r3, [r7, #23]
		else
			BitStatus = I2C_RESET;
		break;
 8000df6:	e029      	b.n	8000e4c <I2C_GetFlagStatus+0xfc>
			BitStatus = I2C_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	75fb      	strb	r3, [r7, #23]
		break;
 8000dfc:	e026      	b.n	8000e4c <I2C_GetFlagStatus+0xfc>
	case EV8_1:
	case EV8:
	{
		//		EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR.
		//		EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		if((I2Cx->SR1)& (I2C_SR1_TXE))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <I2C_GetFlagStatus+0xc0>
			BitStatus = I2C_SET;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	75fb      	strb	r3, [r7, #23]
		else
			BitStatus = I2C_RESET;
		break;
 8000e0e:	e01d      	b.n	8000e4c <I2C_GetFlagStatus+0xfc>
			BitStatus = I2C_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	75fb      	strb	r3, [r7, #23]
		break;
 8000e14:	e01a      	b.n	8000e4c <I2C_GetFlagStatus+0xfc>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		// Read I2Cx status register
		flag1 = I2Cx->SR1;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	60fb      	str	r3, [r7, #12]

		flag2 = flag2 << 16;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	041b      	lsls	r3, r3, #16
 8000e26:	60fb      	str	r3, [r7, #12]
		// Get The Last event value from status registers
		lastEvent = (flag1 | flag2) & ((uint32_t)(0x00FFFFFF));
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e32:	60bb      	str	r3, [r7, #8]
		// Check whether the last event contains I2C_Event
		if( ( lastEvent &  Event ) == Event )
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d102      	bne.n	8000e46 <I2C_GetFlagStatus+0xf6>
			BitStatus = I2C_SET;
 8000e40:	2301      	movs	r3, #1
 8000e42:	75fb      	strb	r3, [r7, #23]
		else
			BitStatus = I2C_RESET;
		break;
 8000e44:	e001      	b.n	8000e4a <I2C_GetFlagStatus+0xfa>
			BitStatus = I2C_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	75fb      	strb	r3, [r7, #23]
		break;
 8000e4a:	bf00      	nop
	}
	}

	return BitStatus;
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	371c      	adds	r7, #28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	00070080 	.word	0x00070080

08000e5c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
	I2C_TypeDef *I2Cx = I2C1;
 8000e62:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <I2C1_EV_IRQHandler+0xdc>)
 8000e64:	60fb      	str	r3, [r7, #12]
	// Interrupt Handling for both master and slave
	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e6e:	60bb      	str	r3, [r7, #8]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e78:	607b      	str	r3, [r7, #4]
	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	603b      	str	r3, [r7, #0]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00a      	beq.n	8000ea0 <I2C1_EV_IRQHandler+0x44>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d007      	beq.n	8000ea0 <I2C1_EV_IRQHandler+0x44>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f000 f860 	bl	8000f60 <Slave_States>
	}
	//----------------------------------------------------------
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	603b      	str	r3, [r7, #0]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode  : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00f      	beq.n	8000ed0 <I2C1_EV_IRQHandler+0x74>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00c      	beq.n	8000ed0 <I2C1_EV_IRQHandler+0x74>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d106      	bne.n	8000ed0 <I2C1_EV_IRQHandler+0x74>
		}
		else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			I2C_ClearADDRFlag(I2Cx);
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff ff35 	bl	8000d32 <I2C_ClearADDRFlag>
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000ec8:	2102      	movs	r1, #2
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 f848 	bl	8000f60 <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3 = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed8:	603b      	str	r3, [r7, #0]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00f      	beq.n	8000f00 <I2C1_EV_IRQHandler+0xa4>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00c      	beq.n	8000f00 <I2C1_EV_IRQHandler+0xa4>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d009      	beq.n	8000f00 <I2C1_EV_IRQHandler+0xa4>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d103      	bne.n	8000f00 <I2C1_EV_IRQHandler+0xa4>

		}
		else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000ef8:	2103      	movs	r1, #3
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 f830 	bl	8000f60 <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3 = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f08:	603b      	str	r3, [r7, #0]
	// Handle For interrupt generated by SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00f      	beq.n	8000f30 <I2C1_EV_IRQHandler+0xd4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00c      	beq.n	8000f30 <I2C1_EV_IRQHandler+0xd4>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d009      	beq.n	8000f30 <I2C1_EV_IRQHandler+0xd4>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d103      	bne.n	8000f30 <I2C1_EV_IRQHandler+0xd4>
			//The device is master
		}
		else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000f28:	2104      	movs	r1, #4
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f000 f818 	bl	8000f60 <Slave_States>
		}
	}

}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40005400 	.word	0x40005400

08000f3c <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <Slave_States>:



void Slave_States(I2C_TypeDef* I2Cx  ,eI2C_Slave_State State)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a32      	ldr	r2, [pc, #200]	; (8001038 <Slave_States+0xd8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	bf14      	ite	ne
 8000f74:	2301      	movne	r3, #1
 8000f76:	2300      	moveq	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	73fb      	strb	r3, [r7, #15]

	switch ( State )
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d856      	bhi.n	8001030 <Slave_States+0xd0>
 8000f82:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <Slave_States+0x28>)
 8000f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f88:	08000fa3 	.word	0x08000fa3
 8000f8c:	08000f9d 	.word	0x08000f9d
 8000f90:	08000fc7 	.word	0x08000fc7
 8000f94:	08000fdf 	.word	0x08000fdf
 8000f98:	08001003 	.word	0x08001003
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else
		}

		break ;
 8000fa0:	e046      	b.n	8001030 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d03b      	beq.n	8001026 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_STOP) ;
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	4922      	ldr	r1, [pc, #136]	; (800103c <Slave_States+0xdc>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	3320      	adds	r3, #32
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	4798      	blx	r3
		}

		break ;
 8000fc4:	e02f      	b.n	8001026 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_ADDR_Matched) ;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	491c      	ldr	r1, [pc, #112]	; (800103c <Slave_States+0xdc>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3320      	adds	r3, #32
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2002      	movs	r0, #2
 8000fda:	4798      	blx	r3

		break ;
 8000fdc:	e028      	b.n	8001030 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d01f      	beq.n	800102a <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_DATA_REQ) ;
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	4913      	ldr	r1, [pc, #76]	; (800103c <Slave_States+0xdc>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3320      	adds	r3, #32
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	4798      	blx	r3
		}

		break ;
 8001000:	e013      	b.n	800102a <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10f      	bne.n	800102e <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_DATA_RCV) ;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	490a      	ldr	r1, [pc, #40]	; (800103c <Slave_States+0xdc>)
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	3320      	adds	r3, #32
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2004      	movs	r0, #4
 8001022:	4798      	blx	r3
		}

		break ;
 8001024:	e003      	b.n	800102e <Slave_States+0xce>
		break ;
 8001026:	bf00      	nop
 8001028:	e002      	b.n	8001030 <Slave_States+0xd0>
		break ;
 800102a:	bf00      	nop
 800102c:	e000      	b.n	8001030 <Slave_States+0xd0>
		break ;
 800102e:	bf00      	nop
	}
	}

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40005400 	.word	0x40005400
 800103c:	2000005c 	.word	0x2000005c

08001040 <MCAL_RCC_GetSysClkFreq>:
 *-----------------------------------------------------------
 */


uint32_t MCAL_RCC_GetSysClkFreq(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
	//Set and cleared by hardware to indicate which clock source is used as system clock.
	//00: HSI oscillator used as system clock
	//01: HSE oscillator used as system clock
	//10: PLL used as system clock
	//11: Not applicable
	switch( (RCC->CFGR >> 2) & 0b11 )
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MCAL_RCC_GetSysClkFreq+0x38>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d00a      	beq.n	8001068 <MCAL_RCC_GetSysClkFreq+0x28>
 8001052:	2b02      	cmp	r3, #2
 8001054:	d80a      	bhi.n	800106c <MCAL_RCC_GetSysClkFreq+0x2c>
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <MCAL_RCC_GetSysClkFreq+0x20>
 800105a:	2b01      	cmp	r3, #1
 800105c:	d002      	beq.n	8001064 <MCAL_RCC_GetSysClkFreq+0x24>
 800105e:	e005      	b.n	800106c <MCAL_RCC_GetSysClkFreq+0x2c>
	{

	case 0:
		return HSI_RC_CLK;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MCAL_RCC_GetSysClkFreq+0x3c>)
 8001062:	e004      	b.n	800106e <MCAL_RCC_GetSysClkFreq+0x2e>
		break;

	case 1:
		//TODO User should specify it
		return HSE_CLK;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MCAL_RCC_GetSysClkFreq+0x40>)
 8001066:	e002      	b.n	800106e <MCAL_RCC_GetSysClkFreq+0x2e>
		break;

	case 2:
		//TODO Should Be calculated
		return 16000000;
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <MCAL_RCC_GetSysClkFreq+0x40>)
 800106a:	e000      	b.n	800106e <MCAL_RCC_GetSysClkFreq+0x2e>
		break;

	}
	return HSI_RC_CLK;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <MCAL_RCC_GetSysClkFreq+0x3c>)
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
 800107c:	007a1200 	.word	0x007a1200
 8001080:	00f42400 	.word	0x00f42400

08001084 <MCAL_RCC_GetHClkFreq>:

uint32_t MCAL_RCC_GetHClkFreq(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (    MCAL_RCC_GetSysClkFreq() >> (  AHBPrescTable[ (RCC->CFGR >> 4) & 0xF ]  )    );
 8001088:	f7ff ffda 	bl	8001040 <MCAL_RCC_GetSysClkFreq>
 800108c:	4602      	mov	r2, r0
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <MCAL_RCC_GetHClkFreq+0x20>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	f003 030f 	and.w	r3, r3, #15
 8001098:	4903      	ldr	r1, [pc, #12]	; (80010a8 <MCAL_RCC_GetHClkFreq+0x24>)
 800109a:	5ccb      	ldrb	r3, [r1, r3]
 800109c:	fa22 f303 	lsr.w	r3, r2, r3

}
 80010a0:	4618      	mov	r0, r3
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40021000 	.word	0x40021000
 80010a8:	08001444 	.word	0x08001444

080010ac <MCAL_RCC_GetPClk1Freq>:

uint32_t MCAL_RCC_GetPClk1Freq(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (    MCAL_RCC_GetHClkFreq() >> (  APBPrescTable[ (RCC->CFGR >> 8) & 0b111 ]  )    );
 80010b0:	f7ff ffe8 	bl	8001084 <MCAL_RCC_GetHClkFreq>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <MCAL_RCC_GetPClk1Freq+0x20>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	4903      	ldr	r1, [pc, #12]	; (80010d0 <MCAL_RCC_GetPClk1Freq+0x24>)
 80010c2:	5ccb      	ldrb	r3, [r1, r3]
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	0800143c 	.word	0x0800143c

080010d4 <SPI1_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void SPI1_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	struct sSPI_IRQ_SRC irq_src;

	irq_src.RXNE  = ( ( SPI1->SR & (SPI_RXNE_FLAG) ) >> 0   );
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <SPI1_IRQHandler+0x50>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	793b      	ldrb	r3, [r7, #4]
 80010e6:	f362 0341 	bfi	r3, r2, #1, #1
 80010ea:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( SPI1->SR & (SPI_TXE_FLAG) )  >> 1   );
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <SPI1_IRQHandler+0x50>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	085b      	lsrs	r3, r3, #1
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	793b      	ldrb	r3, [r7, #4]
 80010fa:	f362 0300 	bfi	r3, r2, #0, #1
 80010fe:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = ( ( SPI1->SR & (SPI_ERRI_FLAG) )  >> 4   );
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <SPI1_IRQHandler+0x50>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	b2da      	uxtb	r2, r3
 800110c:	793b      	ldrb	r3, [r7, #4]
 800110e:	f362 0382 	bfi	r3, r2, #2, #1
 8001112:	713b      	strb	r3, [r7, #4]

	P_SPI_IRQ_Callback_g[0](irq_src);
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SPI1_IRQHandler+0x54>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	7938      	ldrb	r0, [r7, #4]
 800111a:	4798      	blx	r3
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40013000 	.word	0x40013000
 8001128:	200000a4 	.word	0x200000a4

0800112c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	struct sSPI_IRQ_SRC irq_src;

	irq_src.RXNE  = ( ( SPI2->SR & (SPI_RXNE_FLAG) ) >> 0   );
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <SPI2_IRQHandler+0x50>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	b2da      	uxtb	r2, r3
 800113c:	793b      	ldrb	r3, [r7, #4]
 800113e:	f362 0341 	bfi	r3, r2, #1, #1
 8001142:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( SPI2->SR & (SPI_TXE_FLAG) )  >> 1   );
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <SPI2_IRQHandler+0x50>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	085b      	lsrs	r3, r3, #1
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	b2da      	uxtb	r2, r3
 8001150:	793b      	ldrb	r3, [r7, #4]
 8001152:	f362 0300 	bfi	r3, r2, #0, #1
 8001156:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = ( ( SPI2->SR & (SPI_ERRI_FLAG) )  >> 4   );
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <SPI2_IRQHandler+0x50>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	793b      	ldrb	r3, [r7, #4]
 8001166:	f362 0382 	bfi	r3, r2, #2, #1
 800116a:	713b      	strb	r3, [r7, #4]

	P_SPI_IRQ_Callback_g[1](irq_src);
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SPI2_IRQHandler+0x54>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	7938      	ldrb	r0, [r7, #4]
 8001172:	4798      	blx	r3
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40003800 	.word	0x40003800
 8001180:	200000a4 	.word	0x200000a4

08001184 <USART1_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void USART1_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART1->SR & (UART_PE_FLAG) )   >> 1   );
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <USART1_IRQHandler+0x68>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	085b      	lsrs	r3, r3, #1
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	793b      	ldrb	r3, [r7, #4]
 8001198:	f362 03c3 	bfi	r3, r2, #3, #1
 800119c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART1->SR & (UART_RXNE_FLAG) ) >> 5   );
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <USART1_IRQHandler+0x68>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	793b      	ldrb	r3, [r7, #4]
 80011ac:	f362 0341 	bfi	r3, r2, #1, #1
 80011b0:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART1->SR & (UART_TC_FLAG) )   >> 6   );
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <USART1_IRQHandler+0x68>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	099b      	lsrs	r3, r3, #6
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	793b      	ldrb	r3, [r7, #4]
 80011c0:	f362 0382 	bfi	r3, r2, #2, #1
 80011c4:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART1->SR & (UART_TXE_FLAG) )  >> 7   );
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <USART1_IRQHandler+0x68>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	09db      	lsrs	r3, r3, #7
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	793b      	ldrb	r3, [r7, #4]
 80011d4:	f362 0300 	bfi	r3, r2, #0, #1
 80011d8:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[0](irq_src);
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <USART1_IRQHandler+0x6c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	7938      	ldrb	r0, [r7, #4]
 80011e0:	4798      	blx	r3
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40013800 	.word	0x40013800
 80011f0:	200000ac 	.word	0x200000ac

080011f4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART2->SR & (UART_PE_FLAG) )   >> 1   );
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <USART2_IRQHandler+0x68>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	085b      	lsrs	r3, r3, #1
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	793b      	ldrb	r3, [r7, #4]
 8001208:	f362 03c3 	bfi	r3, r2, #3, #1
 800120c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART2->SR & (UART_RXNE_FLAG) ) >> 5   );
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <USART2_IRQHandler+0x68>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	793b      	ldrb	r3, [r7, #4]
 800121c:	f362 0341 	bfi	r3, r2, #1, #1
 8001220:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART2->SR & (UART_TC_FLAG) )   >> 6   );
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <USART2_IRQHandler+0x68>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	099b      	lsrs	r3, r3, #6
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	793b      	ldrb	r3, [r7, #4]
 8001230:	f362 0382 	bfi	r3, r2, #2, #1
 8001234:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART2->SR & (UART_TXE_FLAG) )  >> 7   );
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <USART2_IRQHandler+0x68>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	09db      	lsrs	r3, r3, #7
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	793b      	ldrb	r3, [r7, #4]
 8001244:	f362 0300 	bfi	r3, r2, #0, #1
 8001248:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[1](irq_src);
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <USART2_IRQHandler+0x6c>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	7938      	ldrb	r0, [r7, #4]
 8001250:	4798      	blx	r3
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40004400 	.word	0x40004400
 8001260:	200000ac 	.word	0x200000ac

08001264 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART3->SR & (UART_PE_FLAG) )   >> 1   );
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <USART3_IRQHandler+0x68>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	085b      	lsrs	r3, r3, #1
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	793b      	ldrb	r3, [r7, #4]
 8001278:	f362 03c3 	bfi	r3, r2, #3, #1
 800127c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART3->SR & (UART_RXNE_FLAG) ) >> 5   );
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <USART3_IRQHandler+0x68>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	793b      	ldrb	r3, [r7, #4]
 800128c:	f362 0341 	bfi	r3, r2, #1, #1
 8001290:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART3->SR & (UART_TC_FLAG) )   >> 6   );
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <USART3_IRQHandler+0x68>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	099b      	lsrs	r3, r3, #6
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	793b      	ldrb	r3, [r7, #4]
 80012a0:	f362 0382 	bfi	r3, r2, #2, #1
 80012a4:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART3->SR & (UART_TXE_FLAG) )  >> 7   );
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <USART3_IRQHandler+0x68>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	09db      	lsrs	r3, r3, #7
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	793b      	ldrb	r3, [r7, #4]
 80012b4:	f362 0300 	bfi	r3, r2, #0, #1
 80012b8:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[2](irq_src);
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <USART3_IRQHandler+0x6c>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	7938      	ldrb	r0, [r7, #4]
 80012c0:	4798      	blx	r3
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40004800 	.word	0x40004800
 80012d0:	200000ac 	.word	0x200000ac

080012d4 <main>:
#include"Stm32f103c6_I2C_Driver.h"
#include "I2C_Slave_EEPROM.h"

void Clock_Init();
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
	Clock_Init();
 80012da:	f000 f83d 	bl	8001358 <Clock_Init>

	// Test case (1)
	unsigned char ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 80012de:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <main+0x80>)
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012e8:	6018      	str	r0, [r3, #0]
 80012ea:	3304      	adds	r3, #4
 80012ec:	8019      	strh	r1, [r3, #0]
 80012ee:	3302      	adds	r3, #2
 80012f0:	0c0a      	lsrs	r2, r1, #16
 80012f2:	701a      	strb	r2, [r3, #0]
	unsigned char ch2[7] = {0};
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2100      	movs	r1, #0
 80012fc:	460a      	mov	r2, r1
 80012fe:	801a      	strh	r2, [r3, #0]
 8001300:	460a      	mov	r2, r1
 8001302:	709a      	strb	r2, [r3, #2]

	EEPROM_Init();
 8001304:	f7fe ff34 	bl	8000170 <EEPROM_Init>
	EEPROM_Write_nBytes(0xAF, ch1, 7);
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	2207      	movs	r2, #7
 800130e:	4619      	mov	r1, r3
 8001310:	20af      	movs	r0, #175	; 0xaf
 8001312:	f7fe ff4d 	bl	80001b0 <EEPROM_Write_nBytes>
	EEPROM_Read_nBytes(0xAF, ch2, 7);
 8001316:	463b      	mov	r3, r7
 8001318:	2207      	movs	r2, #7
 800131a:	4619      	mov	r1, r3
 800131c:	20af      	movs	r0, #175	; 0xaf
 800131e:	f7fe ffb5 	bl	800028c <EEPROM_Read_nBytes>

	// Test case (2)
	ch1[0] = 0xA;
 8001322:	230a      	movs	r3, #10
 8001324:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8001326:	230b      	movs	r3, #11
 8001328:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 800132a:	230c      	movs	r3, #12
 800132c:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 800132e:	230d      	movs	r3, #13
 8001330:	72fb      	strb	r3, [r7, #11]

	EEPROM_Write_nBytes(0xFFF, ch1, 4);
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2204      	movs	r2, #4
 8001338:	4619      	mov	r1, r3
 800133a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800133e:	f7fe ff37 	bl	80001b0 <EEPROM_Write_nBytes>
	EEPROM_Read_nBytes(0xFFF, ch2, 4);
 8001342:	463b      	mov	r3, r7
 8001344:	2204      	movs	r2, #4
 8001346:	4619      	mov	r1, r3
 8001348:	f640 70ff 	movw	r0, #4095	; 0xfff
 800134c:	f7fe ff9e 	bl	800028c <EEPROM_Read_nBytes>

	while(1)
 8001350:	e7fe      	b.n	8001350 <main+0x7c>
 8001352:	bf00      	nop
 8001354:	08001434 	.word	0x08001434

08001358 <Clock_Init>:

	}
}

void Clock_Init()
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	// Enable PORTA ,PORTB clock
	GPIOA_CLOCK_ENABLE();
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <Clock_Init+0x24>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <Clock_Init+0x24>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
	GPIOB_CLOCK_ENABLE();
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <Clock_Init+0x24>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a03      	ldr	r2, [pc, #12]	; (800137c <Clock_Init+0x24>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6193      	str	r3, [r2, #24]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40021000 	.word	0x40021000

08001380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001382:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001384:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <LoopForever+0x6>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	; (80013c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <LoopForever+0xe>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	; (80013cc <LoopForever+0x16>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013ae:	f000 f811 	bl	80013d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013b2:	f7ff ff8f 	bl	80012d4 <main>

080013b6 <LoopForever>:

LoopForever:
    b LoopForever
 80013b6:	e7fe      	b.n	80013b6 <LoopForever>
  ldr   r0, =_estack
 80013b8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80013c4:	0800145c 	.word	0x0800145c
  ldr r2, =_sbss
 80013c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80013cc:	200000b8 	.word	0x200000b8

080013d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC1_2_IRQHandler>
	...

080013d4 <__libc_init_array>:
 80013d4:	b570      	push	{r4, r5, r6, lr}
 80013d6:	2600      	movs	r6, #0
 80013d8:	4d0c      	ldr	r5, [pc, #48]	; (800140c <__libc_init_array+0x38>)
 80013da:	4c0d      	ldr	r4, [pc, #52]	; (8001410 <__libc_init_array+0x3c>)
 80013dc:	1b64      	subs	r4, r4, r5
 80013de:	10a4      	asrs	r4, r4, #2
 80013e0:	42a6      	cmp	r6, r4
 80013e2:	d109      	bne.n	80013f8 <__libc_init_array+0x24>
 80013e4:	f000 f81a 	bl	800141c <_init>
 80013e8:	2600      	movs	r6, #0
 80013ea:	4d0a      	ldr	r5, [pc, #40]	; (8001414 <__libc_init_array+0x40>)
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <__libc_init_array+0x44>)
 80013ee:	1b64      	subs	r4, r4, r5
 80013f0:	10a4      	asrs	r4, r4, #2
 80013f2:	42a6      	cmp	r6, r4
 80013f4:	d105      	bne.n	8001402 <__libc_init_array+0x2e>
 80013f6:	bd70      	pop	{r4, r5, r6, pc}
 80013f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80013fc:	4798      	blx	r3
 80013fe:	3601      	adds	r6, #1
 8001400:	e7ee      	b.n	80013e0 <__libc_init_array+0xc>
 8001402:	f855 3b04 	ldr.w	r3, [r5], #4
 8001406:	4798      	blx	r3
 8001408:	3601      	adds	r6, #1
 800140a:	e7f2      	b.n	80013f2 <__libc_init_array+0x1e>
 800140c:	08001454 	.word	0x08001454
 8001410:	08001454 	.word	0x08001454
 8001414:	08001454 	.word	0x08001454
 8001418:	08001458 	.word	0x08001458

0800141c <_init>:
 800141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800141e:	bf00      	nop
 8001420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001422:	bc08      	pop	{r3}
 8001424:	469e      	mov	lr, r3
 8001426:	4770      	bx	lr

08001428 <_fini>:
 8001428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142a:	bf00      	nop
 800142c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800142e:	bc08      	pop	{r3}
 8001430:	469e      	mov	lr, r3
 8001432:	4770      	bx	lr

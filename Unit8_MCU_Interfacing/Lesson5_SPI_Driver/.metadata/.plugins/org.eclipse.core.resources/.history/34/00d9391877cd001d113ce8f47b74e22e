/*
 * Stm32f103c6_USART_Driver.c
 *
 *  Created on: Mar 27, 2023
 *      Author: Abdelaziz Maher
 */

#include"Stm32f103c6_USART_Driver.h"


/*
 * ======================================================================
 *                                          Generic variables
 *======================================================================
 */
UART_Config_t* Global_UART_Cfg = NULL ;


/*
 * ======================================================================
 *                                          Generic Functions
 *======================================================================
 */



/*
 *-----------------------------------------------------------
 * 				APIs Functions Definitions
 *-----------------------------------------------------------
 */


/**================================================================
 * @Fn			- MCAL_UART_Init
 * @brief       -Initialize UART (Asynchronous Only)
 * @param [in]  -USARTx :Where x can be (1...3 depending on device used)
 * @param [in]  -UART_Cfg :All the UART configuration
 * @retval      -None
 * Note         -support for now ASynch mode and clock 8 HZ
 **================================================================*/
void MCAL_UART_Init(USART_TypeDef* USARTx,UART_Config_t* UART_Cfg)
{
	uint32_t pclk,BRR;
	Global_UART_Cfg = UART_Cfg;

	//Enable the Clock for given USART Peripheral
	if( USARTx == USART1 )
		RCC_USART1_CLK_ENABLE();

	else if ( USARTx == USART2 )
		RCC_USART2_CLK_ENABLE();

	else if ( USARTx == USART3 )
		RCC_USART3_CLK_ENABLE();

	//Enable USART Module
	//Bit 13 UE: USART enable
	USARTx->CR1 |= (1<<13) ;

	//Mode TX-RX
	USARTx->CR1 |= UART_Cfg->USART_Mode ;

	// PayLoad width
	//Bit 12 M:Word length
	USARTx->CR1 |= UART_Cfg->PayLoad_Length ;

	//Parity Bits
	USARTx->CR1 |= UART_Cfg->Parity ;

	//Stop Bits
	USARTx->CR2 |= UART_Cfg->StopBits;

	//Hardware Flow Control
	USARTx->CR3 |= UART_Cfg->HwFlowCTRL ;

	//Configure baud rate
	//PCLK2 For USART1
	//PCLK1 for USART2 ,3
	if(USARTx == USART1)
		pclk = MCAL_RCC_GetPClk2Freq();
	else
		pclk = MCAL_RCC_GetPClk1Freq();

	BRR = UART_BRR_Register(pclk ,UART_Cfg->USART_BAUDRATE ) ;

	USARTx->BRR =BRR ;

	//Enable/Disable Interrupt
	if(UART_Cfg->IRQ_Enable != UART_IRQ_ENABLE_NONE)
	{
		USARTx->CR1 |= UART_Cfg->IRQ_Enable ;

		//enable NVIC for USART IRQ
		if(USARTx == USART1)
			NVIC_IRQ37_USART1_ENABLE();

		else if (USARTx == USART2)
			NVIC_IRQ38_USART2_ENABLE();

		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_ENABLE();
	}
}

/**================================================================
 * @Fn			- MCAL_UART_DeInit
 * @brief 		- Initialize EXTI from specific GPIO PIN and specify the Mask/Trigger Conditions and IRQ Callback
 * @param [in]	- USARTx :Where x can be (1...3 depending on device used)
 * @retval 		- None
 * Note			- STM32F103C6 MCU has GPIO A,B,C,D,E modules
 * 				  but LQFP48 package has only GPIO A,B, part of C/D exported as external Pins from the modules
 * 				- Also Mandatory to Enable RCC Clock for AFIO and the Corresponding GPIO
 **================================================================*/
void MCAL_UART_DeInit(USART_TypeDef * USARTx)
{
	if(USARTx == USART1)
	{
		RCC_USART1_RESET();
		NVIC_IRQ37_USART1_DISABLE();
	}

	else if (USARTx == USART2)
	{
		RCC_USART2_RESET();
		NVIC_IRQ38_USART2_DISABLE();
	}

	else if (USARTx == USART3)
	{
		RCC_USART3_RESET();
		NVIC_IRQ39_USART3_DISABLE();
	}
}

/**================================================================
 * @Fn			- MCAL_UART_GPIO_SetPins
 * @brief 		- DeInitialize UART (Asynchronous Only)
 * @param [in]	- USARTx :Where x can be (1...3 depending on device used)
 * @retval 		- None
 * Note			- Reset the Model by RCC
 **================================================================*/
void MCAL_UART_GPIO_SetPins(USART_TypeDef * USARTx)
{

}

/**================================================================
 * @Fn			- MCAL_UART_SendData
 * @brief 		- Send Data Buffer on UART
 * @param [in]	- USARTx :Where x can be (1...3 depending on device used)
 * @param [in]	- pTXBuffer: The Data Buffer that will be transmitted
 * @param [in]	- PollingEn: Enable or Disable UART polling
 * @retval 		- None
 * Note			- Should Initialize UART first
 **================================================================*/
void MCAL_UART_SendData(USART_TypeDef * USARTX , uint16_t * pTXBuffer , enum Polling_mechism PollingEn)
{
	//Wait Until TXE is set in SR
	if ( PollingEn == ENABLE )
		while(! ( USARTx->SR & ( 1<<7 ) ) );

}

/**================================================================
 * @Fn			- MCAL_UART_ReceiveData
 * @brief 		- Receive Data Buffer on UART
 * @param [in]	- USARTx :Where x can be (1...3 depending on device used)
 * @param [in]	- pRXBuffer: The Data Buffer that will be Received
 * @param [in]	- PollingEn: Enable or Disable UART polling
 * @retval 		- None
 * Note			- Should Initialize UART first
 **================================================================*/
void MCAL_UART_ReceiveData(USART_TypeDef * USARTx,uint16_t * pRXBuffer , enum Polling_mechism PollingEn)
{
	//Wait Until RXNE is set in SR
	if ( PollingEn == ENABLE )
		while(! ( USARTx->SR & ( 1<<5 ) ) );

	//check the data length
	//	When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	//	the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	//	because it is replaced by the parity->
	//	When receiving with the parity enabled, the value read in the MSB bit is the received parity
	//	bit->
}

/**================================================================
 * @Fn			- MCAL_UART_WAIT_TC
 * @brief 		- Initialize EXTI from specific GPIO PIN and specify the Mask/Trigger Conditions and IRQ Callback
 * @param [in]	- USARTx :Where x can be (1...3 depending on device used)
 * @retval 		- None
 * Note			- None
 **================================================================*/
void MCAL_UART_WAIT_TC (USART_TypeDef * USARTx)
{
	while(! ( USARTx->SR & ( 1<<6 ) ) );
}


/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include"Stm32f103x6.h"
#include"Stm32f103c6_GPIO_Driver.h"
#include"Stm32f103c6_USART_Driver.h"
#include"Stm32f103c6_SPI_Driver.h"

#define UART_Interrupt
#define SPI_MASTER
//#define SPI_SLAVE

unsigned char rxtx;

void Clock_Init();
void UART_Init();
void UART1_App_Callback();

int main(void)
{
	Clock_Init();
	UART_Init();

	SPI_Config_t SPI_Cfg;

	SPI_Cfg.Communication_Mode = SPI_Direction_2Lines;
	SPI_Cfg.BaudRate_Prescaler = SPI_BaudRate_Prescaler_8;
	SPI_Cfg.Frame_Format = SPI_Frame_Format_MSB_First;
	SPI_Cfg.CLK_Phase = SPI_CPHA_2Edge_First_Data_Capture_Edge;
	SPI_Cfg.CLK_Polarity = SPI_CPOL_High;
	SPI_Cfg.Date_Size = SPI_Data_Size_8Bit_Mode;


    #ifdef SPI_MASTER
	       SPI_Cfg.Device_Mode = SPI_Device_Mode_Master;
	       SPI_Cfg.NSS = SPI_NSS_Soft_NSSInternal_SET;
	       SPI_Cfg.IRQ_Enable = SPI_IRQ_ENABLE_NONE;
	       SPI_Cfg.P_IRQ_CallBack = NULL;

           // Configure pin.4 of gpioA as SS
	       GPIO_PinConfig_t PinCfg ;
		   PinCfg.GPIO_PinNumber = GPIO_PIN_4 ;
		   PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
		   PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
		   MCAL_GPIO_Init(GPIOA, &PinCfg);

           // Force SS to high(idle)
		   MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_STATE_SET);

    #endif
	#ifdef SPI_SLAVE
	       SPI_Cfg.Device_Mode = SPI_Device_Mode_Slave;
	       SPI_Cfg.NSS = SPI_NSS_Hard_Slave;
	       SPI_Cfg.IRQ_Enable = SPI_IRQ_ENABLE_NONE;
	       SPI_Cfg.P_IRQ_CallBack = NULL;
	#endif

    MCAL_SPI_Init(SPI1,&SPI_Cfg);
    MCAL_SPI_GPIO_SetPins(SPI1);

	while(1)
	{

	}
}

void Clock_Init()
{
	// enable PORTA ,PORTB clock
	GPIOA_CLOCK_ENABLE();
	GPIOB_CLOCK_ENABLE();
}

void UART_Init()
{
	UART_Config_t UART_Cfg;

	UART_Cfg.USART_BAUDRATE = UART_BAUDRATE_9600;
	UART_Cfg.HwFlowCTRL = UART_HwFlowCTL_NONE;
	UART_Cfg.USART_Mode = UART_MODE_RXTX;
	UART_Cfg.PayLoad_Length = UART_PayLoad_Length_8bit;
	UART_Cfg.Parity = UART_Parity_NONE;
	UART_Cfg.StopBits = UART_StopBits_1;
    #ifdef UART_Interrupt
			UART_Cfg.IRQ_Enable = UART_IRQ_ENABLE_RXNEIE;
			UART_Cfg.P_IRQ_CallBack = UART1_App_Callback;
    #endif
    #ifndef	UART_Interrupt
			UART_Cfg.P_IRQ_CallBack = NULL;
			UART_Cfg.IRQ_Enable = UART_IRQ_ENABLE_NONE;
   #endif

	MCAL_UART_Init(USART1,&UART_Cfg);
	MCAL_UART_GPIO_SetPins(USART1);
}

void UART1_App_Callback()
{
	MCAL_UART_ReceiveData(USART1, (uint16_t*)&rxtx, DISABLE);
	MCAL_UART_SendData(USART1, (uint16_t*)&rxtx, DISABLE);

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_STATE_RESET);
	MCAL_SPI_TXRX(SPI1,(uint16_t*)&rxtx ,Enable);
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_STATE_SET);
}


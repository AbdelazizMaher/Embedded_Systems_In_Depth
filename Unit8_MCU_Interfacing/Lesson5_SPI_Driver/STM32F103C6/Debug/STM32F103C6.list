
STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010d0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001200  08001200  00011200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001218  08001218  00011220  2**0
                  CONTENTS
  4 .ARM          00000000  08001218  08001218  00011220  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001218  08001220  00011220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001218  08001218  00011218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800121c  0800121c  0001121c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000000  08001220  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08001220  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020ac  00000000  00000000  00011249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009b9  00000000  00000000  000132f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000e1c  00000000  00000000  00013cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000238  00000000  00000000  00014ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001d0  00000000  00000000  00014d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f4c  00000000  00000000  00014ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f94  00000000  00000000  00015e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a96a  00000000  00000000  00018db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00023722  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000740  00000000  00000000  00023774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080011e8 	.word	0x080011e8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080011e8 	.word	0x080011e8

08000170 <EXTI0_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void EXTI0_IRQHandler()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	EXTI->PR |= ( 1 << 0 );
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	P_IRQ_Callback_g[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5 ; P_IRQ_Callback_g[5](); };
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6 ; P_IRQ_Callback_g[6](); };
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7 ; P_IRQ_Callback_g[7](); };
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8 ; P_IRQ_Callback_g[8](); };
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9 ; P_IRQ_Callback_g[9](); };
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10 ; P_IRQ_Callback_g[10](); };
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11 ; P_IRQ_Callback_g[11](); };
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12 ; P_IRQ_Callback_g[12](); };
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13 ; P_IRQ_Callback_g[13](); };
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14 ; P_IRQ_Callback_g[14](); };
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if( EXTI->PR & 1<<15 ) { EXTI->PR |= 1<<15 ; P_IRQ_Callback_g[15](); };
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <Get_CRLH_Position>:
 * ----------------------------------------------------------
 * 				  Generic Functions
 *-----------------------------------------------------------
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch( PinNumber )
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a0:	f000 80a5 	beq.w	80004ee <Get_CRLH_Position+0x15e>
 80003a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a8:	f300 80a3 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b0:	f000 809b 	beq.w	80004ea <Get_CRLH_Position+0x15a>
 80003b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b8:	f300 809b 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c0:	f000 8091 	beq.w	80004e6 <Get_CRLH_Position+0x156>
 80003c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c8:	f300 8093 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d0:	f000 8087 	beq.w	80004e2 <Get_CRLH_Position+0x152>
 80003d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d8:	f300 808b 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e0:	d07d      	beq.n	80004de <Get_CRLH_Position+0x14e>
 80003e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e6:	f300 8084 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003ee:	d074      	beq.n	80004da <Get_CRLH_Position+0x14a>
 80003f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003f4:	dc7d      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 80003f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003fa:	d06c      	beq.n	80004d6 <Get_CRLH_Position+0x146>
 80003fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000400:	dc77      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 8000402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000406:	d064      	beq.n	80004d2 <Get_CRLH_Position+0x142>
 8000408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800040c:	dc71      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 800040e:	2b80      	cmp	r3, #128	; 0x80
 8000410:	d05d      	beq.n	80004ce <Get_CRLH_Position+0x13e>
 8000412:	2b80      	cmp	r3, #128	; 0x80
 8000414:	dc6d      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 8000416:	2b20      	cmp	r3, #32
 8000418:	dc48      	bgt.n	80004ac <Get_CRLH_Position+0x11c>
 800041a:	2b00      	cmp	r3, #0
 800041c:	dd69      	ble.n	80004f2 <Get_CRLH_Position+0x162>
 800041e:	3b01      	subs	r3, #1
 8000420:	2b1f      	cmp	r3, #31
 8000422:	d866      	bhi.n	80004f2 <Get_CRLH_Position+0x162>
 8000424:	a201      	add	r2, pc, #4	; (adr r2, 800042c <Get_CRLH_Position+0x9c>)
 8000426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042a:	bf00      	nop
 800042c:	080004b3 	.word	0x080004b3
 8000430:	080004b7 	.word	0x080004b7
 8000434:	080004f3 	.word	0x080004f3
 8000438:	080004bb 	.word	0x080004bb
 800043c:	080004f3 	.word	0x080004f3
 8000440:	080004f3 	.word	0x080004f3
 8000444:	080004f3 	.word	0x080004f3
 8000448:	080004bf 	.word	0x080004bf
 800044c:	080004f3 	.word	0x080004f3
 8000450:	080004f3 	.word	0x080004f3
 8000454:	080004f3 	.word	0x080004f3
 8000458:	080004f3 	.word	0x080004f3
 800045c:	080004f3 	.word	0x080004f3
 8000460:	080004f3 	.word	0x080004f3
 8000464:	080004f3 	.word	0x080004f3
 8000468:	080004c3 	.word	0x080004c3
 800046c:	080004f3 	.word	0x080004f3
 8000470:	080004f3 	.word	0x080004f3
 8000474:	080004f3 	.word	0x080004f3
 8000478:	080004f3 	.word	0x080004f3
 800047c:	080004f3 	.word	0x080004f3
 8000480:	080004f3 	.word	0x080004f3
 8000484:	080004f3 	.word	0x080004f3
 8000488:	080004f3 	.word	0x080004f3
 800048c:	080004f3 	.word	0x080004f3
 8000490:	080004f3 	.word	0x080004f3
 8000494:	080004f3 	.word	0x080004f3
 8000498:	080004f3 	.word	0x080004f3
 800049c:	080004f3 	.word	0x080004f3
 80004a0:	080004f3 	.word	0x080004f3
 80004a4:	080004f3 	.word	0x080004f3
 80004a8:	080004c7 	.word	0x080004c7
 80004ac:	2b40      	cmp	r3, #64	; 0x40
 80004ae:	d00c      	beq.n	80004ca <Get_CRLH_Position+0x13a>
 80004b0:	e01f      	b.n	80004f2 <Get_CRLH_Position+0x162>
	{
	//CRL
	case GPIO_PIN_0:
		return 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e01e      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_1:
		return 4;
 80004b6:	2304      	movs	r3, #4
 80004b8:	e01c      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_2:
		return 8;
 80004ba:	2308      	movs	r3, #8
 80004bc:	e01a      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_3:
		return 12;
 80004be:	230c      	movs	r3, #12
 80004c0:	e018      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_4:
		return 16;
 80004c2:	2310      	movs	r3, #16
 80004c4:	e016      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_5:
		return 20;
 80004c6:	2314      	movs	r3, #20
 80004c8:	e014      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_6:
		return 24;
 80004ca:	2318      	movs	r3, #24
 80004cc:	e012      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_7:
		return 28;
 80004ce:	231c      	movs	r3, #28
 80004d0:	e010      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

		//CRH
	case GPIO_PIN_8:
		return 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e00e      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_9:
		return 4;
 80004d6:	2304      	movs	r3, #4
 80004d8:	e00c      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_10:
		return 8;
 80004da:	2308      	movs	r3, #8
 80004dc:	e00a      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_11:
		return 12;
 80004de:	230c      	movs	r3, #12
 80004e0:	e008      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_12:
		return 16;
 80004e2:	2310      	movs	r3, #16
 80004e4:	e006      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_13:
		return 20;
 80004e6:	2314      	movs	r3, #20
 80004e8:	e004      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_14:
		return 24;
 80004ea:	2318      	movs	r3, #24
 80004ec:	e002      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_15:
		return 28;
 80004ee:	231c      	movs	r3, #28
 80004f0:	e000      	b.n	80004f4 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MCAL_GPIO_Init>:
 * @retval 		- None
 * Note			- STM32F103C6 MCU has GPIO A,B,C,D,E modules
 * 				  but LQFP48 package has only GPIO A,B, part of C/D exported as external Pins from the modules
 **================================================================*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PinConfig_t *Pin_Config)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	volatile uint32_t *ConfigReg = NULL;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
	uint8_t ConfigPin = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) Configure Pins from 0 --> 7
	//Port configuration register high (GPIOx_CRH) Configure Pins from 8 --> 15
	ConfigReg = ( Pin_Config->GPIO_PinNumber < GPIO_PIN_8 ) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	2bff      	cmp	r3, #255	; 0xff
 8000518:	d801      	bhi.n	800051e <MCAL_GPIO_Init+0x1e>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	e001      	b.n	8000522 <MCAL_GPIO_Init+0x22>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3304      	adds	r3, #4
 8000522:	60bb      	str	r3, [r7, #8]

	//Clear  CNF[1:0] MODE[1:0]
	(*ConfigReg) &= ~( (0xF) << Get_CRLH_Position(Pin_Config->GPIO_PinNumber) );
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff31 	bl	8000390 <Get_CRLH_Position>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	230f      	movs	r3, #15
 8000534:	4093      	lsls	r3, r2
 8000536:	43da      	mvns	r2, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	401a      	ands	r2, r3
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	601a      	str	r2, [r3, #0]

	//If Pin is output
	if( (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_OUTPUT_PP ) || (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_OUTPUT_OD ) | (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_ALTFN_OUTPUT_OD ) | (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_ALTFN_OUTPUT_PP ) )
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	789b      	ldrb	r3, [r3, #2]
 8000546:	2b04      	cmp	r3, #4
 8000548:	d01a      	beq.n	8000580 <MCAL_GPIO_Init+0x80>
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	789b      	ldrb	r3, [r3, #2]
 800054e:	2b05      	cmp	r3, #5
 8000550:	bf0c      	ite	eq
 8000552:	2301      	moveq	r3, #1
 8000554:	2300      	movne	r3, #0
 8000556:	b2da      	uxtb	r2, r3
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	789b      	ldrb	r3, [r3, #2]
 800055c:	2b07      	cmp	r3, #7
 800055e:	bf0c      	ite	eq
 8000560:	2301      	moveq	r3, #1
 8000562:	2300      	movne	r3, #0
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4313      	orrs	r3, r2
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	789b      	ldrb	r3, [r3, #2]
 8000570:	2b06      	cmp	r3, #6
 8000572:	bf0c      	ite	eq
 8000574:	2301      	moveq	r3, #1
 8000576:	2300      	movne	r3, #0
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4313      	orrs	r3, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00e      	beq.n	800059e <MCAL_GPIO_Init+0x9e>
	{
		//Set CNF[1:0] MODE[1:0]
		ConfigPin = ( (( (Pin_Config->GPIO_Mode - 4) << 2 ) | ( Pin_Config->GPIO_Output_Speed ))  & 0x0F );
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	789b      	ldrb	r3, [r3, #2]
 8000584:	3b04      	subs	r3, #4
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	b25a      	sxtb	r2, r3
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	78db      	ldrb	r3, [r3, #3]
 800058e:	b25b      	sxtb	r3, r3
 8000590:	4313      	orrs	r3, r2
 8000592:	b25b      	sxtb	r3, r3
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f003 030f 	and.w	r3, r3, #15
 800059a:	73fb      	strb	r3, [r7, #15]
 800059c:	e02c      	b.n	80005f8 <MCAL_GPIO_Init+0xf8>
	}
	//If Pin is input
	else //MODE = 00 :Input Mode(reset state)
	{
		if( (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_INPUT_FLOA ) || (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_Analog ) )
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	789b      	ldrb	r3, [r3, #2]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d003      	beq.n	80005ae <MCAL_GPIO_Init+0xae>
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d107      	bne.n	80005be <MCAL_GPIO_Init+0xbe>
		{
			//Set CNF[1:0] MODE[1:0]00
			ConfigPin = ( ( (Pin_Config->GPIO_Mode) << 2 ) & 0x0F );
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	789b      	ldrb	r3, [r3, #2]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	f003 030f 	and.w	r3, r3, #15
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	e01c      	b.n	80005f8 <MCAL_GPIO_Init+0xf8>
		}
		else if( Pin_Config->GPIO_Mode == GPIO_PIN_MODE_ALTFN_INPUT ) //Consider it as Input Floating
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	789b      	ldrb	r3, [r3, #2]
 80005c2:	2b08      	cmp	r3, #8
 80005c4:	d102      	bne.n	80005cc <MCAL_GPIO_Init+0xcc>
		{
			//Set CNF[1:0] MODE[1:0]00
			ConfigPin = ( ( (GPIO_PIN_MODE_INPUT_FLOA) << 2 ) & 0x0F );
 80005c6:	2304      	movs	r3, #4
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e015      	b.n	80005f8 <MCAL_GPIO_Init+0xf8>
		}
		else // PU\PD Input
		{
			ConfigPin = ( ( (GPIO_PIN_MODE_INPUT_PU) << 2 ) & 0x0F );
 80005cc:	2308      	movs	r3, #8
 80005ce:	73fb      	strb	r3, [r7, #15]

			if ( Pin_Config->GPIO_Mode == GPIO_PIN_MODE_INPUT_PU )
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d107      	bne.n	80005e8 <MCAL_GPIO_Init+0xe8>
			{
				//PxODR = 1 :Table 20. Port bit configuration table
				GPIOx->ODR |= (Pin_Config->GPIO_PinNumber );
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	8812      	ldrh	r2, [r2, #0]
 80005e0:	431a      	orrs	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	e007      	b.n	80005f8 <MCAL_GPIO_Init+0xf8>
			}
			else
			{
				//PxODR = 0 :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(Pin_Config->GPIO_PinNumber);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	8812      	ldrh	r2, [r2, #0]
 80005f0:	43d2      	mvns	r2, r2
 80005f2:	401a      	ands	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CRH\CRL
	(*ConfigReg) |= ( ConfigPin << Get_CRLH_Position(Pin_Config->GPIO_PinNumber) );
 80005f8:	7bfc      	ldrb	r4, [r7, #15]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fec6 	bl	8000390 <Get_CRLH_Position>
 8000604:	4603      	mov	r3, r0
 8000606:	fa04 f203 	lsl.w	r2, r4, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	431a      	orrs	r2, r3
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bd90      	pop	{r4, r7, pc}

0800061c <MCAL_RCC_GetSysClkFreq>:
 *-----------------------------------------------------------
 */


uint32_t MCAL_RCC_GetSysClkFreq(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
	//Set and cleared by hardware to indicate which clock source is used as system clock.
	//00: HSI oscillator used as system clock
	//01: HSE oscillator used as system clock
	//10: PLL used as system clock
	//11: Not applicable
	switch( (RCC->CFGR >> 2) & 0b11 )
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MCAL_RCC_GetSysClkFreq+0x38>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	f003 0303 	and.w	r3, r3, #3
 800062a:	2b02      	cmp	r3, #2
 800062c:	d00a      	beq.n	8000644 <MCAL_RCC_GetSysClkFreq+0x28>
 800062e:	2b02      	cmp	r3, #2
 8000630:	d80a      	bhi.n	8000648 <MCAL_RCC_GetSysClkFreq+0x2c>
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <MCAL_RCC_GetSysClkFreq+0x20>
 8000636:	2b01      	cmp	r3, #1
 8000638:	d002      	beq.n	8000640 <MCAL_RCC_GetSysClkFreq+0x24>
 800063a:	e005      	b.n	8000648 <MCAL_RCC_GetSysClkFreq+0x2c>
	{

	case 0:
		return HSI_RC_CLK;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MCAL_RCC_GetSysClkFreq+0x3c>)
 800063e:	e004      	b.n	800064a <MCAL_RCC_GetSysClkFreq+0x2e>
		break;

	case 1:
		//TODO User should specify it
		return HSE_CLK;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MCAL_RCC_GetSysClkFreq+0x40>)
 8000642:	e002      	b.n	800064a <MCAL_RCC_GetSysClkFreq+0x2e>
		break;

	case 2:
		//TODO Should Be calculated
		return 16000000;
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <MCAL_RCC_GetSysClkFreq+0x40>)
 8000646:	e000      	b.n	800064a <MCAL_RCC_GetSysClkFreq+0x2e>
		break;

	}
	return HSI_RC_CLK;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <MCAL_RCC_GetSysClkFreq+0x3c>)
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000
 8000658:	007a1200 	.word	0x007a1200
 800065c:	00f42400 	.word	0x00f42400

08000660 <MCAL_RCC_GetHClkFreq>:

uint32_t MCAL_RCC_GetHClkFreq(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (    MCAL_RCC_GetSysClkFreq() >> (  AHBPrescTable[ (RCC->CFGR >> 4) & 0xF ]  )    );
 8000664:	f7ff ffda 	bl	800061c <MCAL_RCC_GetSysClkFreq>
 8000668:	4602      	mov	r2, r0
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <MCAL_RCC_GetHClkFreq+0x20>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	091b      	lsrs	r3, r3, #4
 8000670:	f003 030f 	and.w	r3, r3, #15
 8000674:	4903      	ldr	r1, [pc, #12]	; (8000684 <MCAL_RCC_GetHClkFreq+0x24>)
 8000676:	5ccb      	ldrb	r3, [r1, r3]
 8000678:	fa22 f303 	lsr.w	r3, r2, r3

}
 800067c:	4618      	mov	r0, r3
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	08001208 	.word	0x08001208

08000688 <MCAL_RCC_GetPClk1Freq>:

uint32_t MCAL_RCC_GetPClk1Freq(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (    MCAL_RCC_GetHClkFreq() >> (  APBPrescTable[ (RCC->CFGR >> 8) & 0b111 ]  )    );
 800068c:	f7ff ffe8 	bl	8000660 <MCAL_RCC_GetHClkFreq>
 8000690:	4602      	mov	r2, r0
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MCAL_RCC_GetPClk1Freq+0x20>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	f003 0307 	and.w	r3, r3, #7
 800069c:	4903      	ldr	r1, [pc, #12]	; (80006ac <MCAL_RCC_GetPClk1Freq+0x24>)
 800069e:	5ccb      	ldrb	r3, [r1, r3]
 80006a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	08001200 	.word	0x08001200

080006b0 <MCAL_RCC_GetPClk2Freq>:

uint32_t MCAL_RCC_GetPClk2Freq(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB High-speed prescaler (APB2)
	return (    MCAL_RCC_GetHClkFreq() >> (  APBPrescTable[ (RCC->CFGR >> 11) & 0b111 ]  )    );
 80006b4:	f7ff ffd4 	bl	8000660 <MCAL_RCC_GetHClkFreq>
 80006b8:	4602      	mov	r2, r0
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MCAL_RCC_GetPClk2Freq+0x20>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	0adb      	lsrs	r3, r3, #11
 80006c0:	f003 0307 	and.w	r3, r3, #7
 80006c4:	4903      	ldr	r1, [pc, #12]	; (80006d4 <MCAL_RCC_GetPClk2Freq+0x24>)
 80006c6:	5ccb      	ldrb	r3, [r1, r3]
 80006c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000
 80006d4:	08001200 	.word	0x08001200

080006d8 <MCAL_SPI_Init>:
 * @param [in]  -SPI_Config :All the SPI configuration
 * @retval      -None
 * Note         -Support for SPI Full Duplex Master/Slave Only & NSS HW/SW
 **================================================================*/
void MCAL_SPI_Init(SPI_TypeDef* SPIx,SPI_Config_t* SPI_Cfg)
{
 80006d8:	b4b0      	push	{r4, r5, r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
	//Safety for registers
	uint16_t tempreg_CR1 = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	81fb      	strh	r3, [r7, #14]
	uint16_t tempreg_CR2 = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	81bb      	strh	r3, [r7, #12]

	//Check The number of SPIx
	if(SPIx == SPI1)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a4e      	ldr	r2, [pc, #312]	; (8000828 <MCAL_SPI_Init+0x150>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d113      	bne.n	800071a <MCAL_SPI_Init+0x42>
	{
		Global_SPI_Cfg1 = *SPI_Cfg;
 80006f2:	4a4e      	ldr	r2, [pc, #312]	; (800082c <MCAL_SPI_Init+0x154>)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	4614      	mov	r4, r2
 80006f8:	461d      	mov	r5, r3
 80006fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000702:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Cfg[SPI1_INDEX] = &Global_SPI_Cfg1;
 8000706:	4b4a      	ldr	r3, [pc, #296]	; (8000830 <MCAL_SPI_Init+0x158>)
 8000708:	4a48      	ldr	r2, [pc, #288]	; (800082c <MCAL_SPI_Init+0x154>)
 800070a:	601a      	str	r2, [r3, #0]
		RCC_SPI1_CLK_ENABLE();
 800070c:	4b49      	ldr	r3, [pc, #292]	; (8000834 <MCAL_SPI_Init+0x15c>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a48      	ldr	r2, [pc, #288]	; (8000834 <MCAL_SPI_Init+0x15c>)
 8000712:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	e016      	b.n	8000748 <MCAL_SPI_Init+0x70>

	}
	else if(SPIx == SPI2)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a46      	ldr	r2, [pc, #280]	; (8000838 <MCAL_SPI_Init+0x160>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d112      	bne.n	8000748 <MCAL_SPI_Init+0x70>
	{
		Global_SPI_Cfg2 = *SPI_Cfg;
 8000722:	4a46      	ldr	r2, [pc, #280]	; (800083c <MCAL_SPI_Init+0x164>)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	4614      	mov	r4, r2
 8000728:	461d      	mov	r5, r3
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000732:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Cfg[SPI2_INDEX] = &Global_SPI_Cfg2;
 8000736:	4b3e      	ldr	r3, [pc, #248]	; (8000830 <MCAL_SPI_Init+0x158>)
 8000738:	4a40      	ldr	r2, [pc, #256]	; (800083c <MCAL_SPI_Init+0x164>)
 800073a:	605a      	str	r2, [r3, #4]
		RCC_SPI2_CLK_ENABLE();
 800073c:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <MCAL_SPI_Init+0x15c>)
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	4a3c      	ldr	r2, [pc, #240]	; (8000834 <MCAL_SPI_Init+0x15c>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	61d3      	str	r3, [r2, #28]
	}

	//Set Bit 6 SPE: SPI enable
	tempreg_CR1 = ( 1<<6 );
 8000748:	2340      	movs	r3, #64	; 0x40
 800074a:	81fb      	strh	r3, [r7, #14]

	//Master or Salve
	tempreg_CR1 |= SPI_Cfg->Device_Mode;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	4313      	orrs	r3, r2
 8000754:	81fb      	strh	r3, [r7, #14]

	//SPI Communication_Mode
	tempreg_CR1 |= SPI_Cfg->Communication_Mode;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	885a      	ldrh	r2, [r3, #2]
 800075a:	89fb      	ldrh	r3, [r7, #14]
 800075c:	4313      	orrs	r3, r2
 800075e:	81fb      	strh	r3, [r7, #14]

	//SPI Frame_Format
	tempreg_CR1 |= SPI_Cfg->Frame_Format;
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	889a      	ldrh	r2, [r3, #4]
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	4313      	orrs	r3, r2
 8000768:	81fb      	strh	r3, [r7, #14]

	//SPI Date_Size
	tempreg_CR1 |= SPI_Cfg->Date_Size;
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	88da      	ldrh	r2, [r3, #6]
 800076e:	89fb      	ldrh	r3, [r7, #14]
 8000770:	4313      	orrs	r3, r2
 8000772:	81fb      	strh	r3, [r7, #14]

	//SPI CLK_Polarity
	tempreg_CR1 |= SPI_Cfg->CLK_Polarity;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	891a      	ldrh	r2, [r3, #8]
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	4313      	orrs	r3, r2
 800077c:	81fb      	strh	r3, [r7, #14]

	//SPI CLK_Phase
	tempreg_CR1 |= SPI_Cfg->CLK_Phase;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	895a      	ldrh	r2, [r3, #10]
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	4313      	orrs	r3, r2
 8000786:	81fb      	strh	r3, [r7, #14]

	//====================SPI NSS======================
	if( SPI_Cfg->NSS == SPI_NSS_Hard_Master_SS_Out_ENABLE )
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	899b      	ldrh	r3, [r3, #12]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d105      	bne.n	800079c <MCAL_SPI_Init+0xc4>
	{
		tempreg_CR2 |=SPI_Cfg->NSS;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	899a      	ldrh	r2, [r3, #12]
 8000794:	89bb      	ldrh	r3, [r7, #12]
 8000796:	4313      	orrs	r3, r2
 8000798:	81bb      	strh	r3, [r7, #12]
 800079a:	e00e      	b.n	80007ba <MCAL_SPI_Init+0xe2>
	}
	else if( SPI_Cfg->NSS == SPI_NSS_Hard_Master_SS_Out_DISABLE )
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	899b      	ldrh	r3, [r3, #12]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d105      	bne.n	80007b0 <MCAL_SPI_Init+0xd8>
	{
		tempreg_CR2 &=SPI_Cfg->NSS;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	899a      	ldrh	r2, [r3, #12]
 80007a8:	89bb      	ldrh	r3, [r7, #12]
 80007aa:	4013      	ands	r3, r2
 80007ac:	81bb      	strh	r3, [r7, #12]
 80007ae:	e004      	b.n	80007ba <MCAL_SPI_Init+0xe2>
	}
	else
	{
		tempreg_CR1 |=SPI_Cfg->NSS;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	899a      	ldrh	r2, [r3, #12]
 80007b4:	89fb      	ldrh	r3, [r7, #14]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	81fb      	strh	r3, [r7, #14]
	}
    //======================================================

	//SPI_BaudRate_Prescaler
	tempreg_CR1 |= SPI_Cfg->BaudRate_Prescaler;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	89da      	ldrh	r2, [r3, #14]
 80007be:	89fb      	ldrh	r3, [r7, #14]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	81fb      	strh	r3, [r7, #14]

	//SPI_IRQ_Enable
	if( SPI_Cfg->IRQ_Enable != SPI_IRQ_ENABLE_NONE )
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	8a1b      	ldrh	r3, [r3, #16]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d021      	beq.n	8000810 <MCAL_SPI_Init+0x138>
	{
		//SPI_IRQ_Enable_define
		tempreg_CR2 |=SPI_Cfg->IRQ_Enable;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	8a1a      	ldrh	r2, [r3, #16]
 80007d0:	89bb      	ldrh	r3, [r7, #12]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	81bb      	strh	r3, [r7, #12]
		if(SPIx == SPI1)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MCAL_SPI_Init+0x150>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d10a      	bne.n	80007f4 <MCAL_SPI_Init+0x11c>
		{
			NVIC_IRQ35_SPI1_ENABLE();
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MCAL_SPI_Init+0x168>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a17      	ldr	r2, [pc, #92]	; (8000840 <MCAL_SPI_Init+0x168>)
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	6013      	str	r3, [r2, #0]
			P_SPI_IRQ_Callback_g[0] = SPI_Cfg->P_IRQ_CallBack;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MCAL_SPI_Init+0x16c>)
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	e00d      	b.n	8000810 <MCAL_SPI_Init+0x138>
		}
		else if(SPIx == SPI2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <MCAL_SPI_Init+0x160>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d109      	bne.n	8000810 <MCAL_SPI_Init+0x138>
		{
			NVIC_IRQ36_SPI2_ENABLE();
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MCAL_SPI_Init+0x168>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <MCAL_SPI_Init+0x168>)
 8000802:	f043 0308 	orr.w	r3, r3, #8
 8000806:	6013      	str	r3, [r2, #0]
			P_SPI_IRQ_Callback_g[1] = SPI_Cfg->P_IRQ_CallBack;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <MCAL_SPI_Init+0x16c>)
 800080e:	6053      	str	r3, [r2, #4]
		}

	}

	SPIx->CR1 = tempreg_CR1;
 8000810:	89fa      	ldrh	r2, [r7, #14]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tempreg_CR2;
 8000816:	89ba      	ldrh	r2, [r7, #12]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	605a      	str	r2, [r3, #4]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bcb0      	pop	{r4, r5, r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40013000 	.word	0x40013000
 800082c:	20000064 	.word	0x20000064
 8000830:	2000005c 	.word	0x2000005c
 8000834:	40021000 	.word	0x40021000
 8000838:	40003800 	.word	0x40003800
 800083c:	2000007c 	.word	0x2000007c
 8000840:	e000e104 	.word	0xe000e104
 8000844:	20000094 	.word	0x20000094

08000848 <MCAL_SPI_GPIO_SetPins>:
 * @param [in]	- SPIx :Where x can be (1...3 depending on device used)
 * @retval 		- None
 * Note			- Should Enable the corresponding GPIO/AFIO In RCC
 **================================================================*/
void MCAL_SPI_GPIO_SetPins(SPI_TypeDef* SPIx)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

		if(SPIx == SPI1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a81      	ldr	r2, [pc, #516]	; (8000a58 <MCAL_SPI_GPIO_SetPins+0x210>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d177      	bne.n	8000948 <MCAL_SPI_GPIO_SetPins+0x100>
		{
			//PA4 : SPI1_NSS
			//PA5 : SPI1_SCK
			//PA6 : SPI1_MISO
			//PA7 : SPI1_MOSI
			if( Global_SPI_Cfg[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_Master )
 8000858:	4b80      	ldr	r3, [pc, #512]	; (8000a5c <MCAL_SPI_GPIO_SetPins+0x214>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	2b04      	cmp	r3, #4
 8000860:	d142      	bne.n	80008e8 <MCAL_SPI_GPIO_SetPins+0xa0>
			{
				//PA4 : SPI1_NSS
				switch (Global_SPI_Cfg[SPI1_INDEX]->NSS)
 8000862:	4b7e      	ldr	r3, [pc, #504]	; (8000a5c <MCAL_SPI_GPIO_SetPins+0x214>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	899b      	ldrh	r3, [r3, #12]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d002      	beq.n	8000872 <MCAL_SPI_GPIO_SetPins+0x2a>
 800086c:	2b04      	cmp	r3, #4
 800086e:	d00b      	beq.n	8000888 <MCAL_SPI_GPIO_SetPins+0x40>
 8000870:	e017      	b.n	80008a2 <MCAL_SPI_GPIO_SetPins+0x5a>
				{
				// Input
				case SPI_NSS_Hard_Master_SS_Out_DISABLE:
					//  Master-Slave Input Floating
					PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000872:	2310      	movs	r3, #16
 8000874:	81bb      	strh	r3, [r7, #12]
					PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 8000876:	2301      	movs	r3, #1
 8000878:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOA, &PinCfg);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	4877      	ldr	r0, [pc, #476]	; (8000a60 <MCAL_SPI_GPIO_SetPins+0x218>)
 8000882:	f7ff fe3d 	bl	8000500 <MCAL_GPIO_Init>
					break;
 8000886:	e00c      	b.n	80008a2 <MCAL_SPI_GPIO_SetPins+0x5a>

				// Output
				case SPI_NSS_Hard_Master_SS_Out_ENABLE:
					// NNS Output Alternate function pp
					PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000888:	2310      	movs	r3, #16
 800088a:	81bb      	strh	r3, [r7, #12]
					PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
 800088c:	2306      	movs	r3, #6
 800088e:	73bb      	strb	r3, [r7, #14]
					PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000890:	2301      	movs	r3, #1
 8000892:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	4871      	ldr	r0, [pc, #452]	; (8000a60 <MCAL_SPI_GPIO_SetPins+0x218>)
 800089c:	f7ff fe30 	bl	8000500 <MCAL_GPIO_Init>
					break;
 80008a0:	bf00      	nop
				}

				//PA5 : SPI1_SCK
				//Master AF Push-Pull
				PinCfg.GPIO_PinNumber = GPIO_PIN_5 ;
 80008a2:	2320      	movs	r3, #32
 80008a4:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
 80008a6:	2306      	movs	r3, #6
 80008a8:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80008aa:	2301      	movs	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	486a      	ldr	r0, [pc, #424]	; (8000a60 <MCAL_SPI_GPIO_SetPins+0x218>)
 80008b6:	f7ff fe23 	bl	8000500 <MCAL_GPIO_Init>

				//PA6 : SPI1_MISO (supported only full duplex)
				//full duplex / master Input floating
				PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 80008be:	2301      	movs	r3, #1
 80008c0:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	4865      	ldr	r0, [pc, #404]	; (8000a60 <MCAL_SPI_GPIO_SetPins+0x218>)
 80008ca:	f7ff fe19 	bl	8000500 <MCAL_GPIO_Init>

				//PA7 : SPI1_MOSI
				//Full duplex / Master AF Push-Pull
				PinCfg.GPIO_PinNumber = GPIO_PIN_7 ;
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
 80008d2:	2306      	movs	r3, #6
 80008d4:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	485f      	ldr	r0, [pc, #380]	; (8000a60 <MCAL_SPI_GPIO_SetPins+0x218>)
 80008e2:	f7ff fe0d 	bl	8000500 <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_15;
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
				MCAL_GPIO_Init(GPIOB, &PinCfg);
			}
		}
}
 80008e6:	e0b3      	b.n	8000a50 <MCAL_SPI_GPIO_SetPins+0x208>
				if(Global_SPI_Cfg[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 80008e8:	4b5c      	ldr	r3, [pc, #368]	; (8000a5c <MCAL_SPI_GPIO_SetPins+0x214>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	899b      	ldrh	r3, [r3, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d109      	bne.n	8000906 <MCAL_SPI_GPIO_SetPins+0xbe>
					PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80008f2:	2310      	movs	r3, #16
 80008f4:	81bb      	strh	r3, [r7, #12]
					PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 80008f6:	2301      	movs	r3, #1
 80008f8:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOA, &PinCfg);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	4857      	ldr	r0, [pc, #348]	; (8000a60 <MCAL_SPI_GPIO_SetPins+0x218>)
 8000902:	f7ff fdfd 	bl	8000500 <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000906:	2320      	movs	r3, #32
 8000908:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 800090a:	2301      	movs	r3, #1
 800090c:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	4852      	ldr	r0, [pc, #328]	; (8000a60 <MCAL_SPI_GPIO_SetPins+0x218>)
 8000916:	f7ff fdf3 	bl	8000500 <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_6 ;
 800091a:	2340      	movs	r3, #64	; 0x40
 800091c:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
 800091e:	2306      	movs	r3, #6
 8000920:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000922:	2301      	movs	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	484c      	ldr	r0, [pc, #304]	; (8000a60 <MCAL_SPI_GPIO_SetPins+0x218>)
 800092e:	f7ff fde7 	bl	8000500 <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 8000936:	2301      	movs	r3, #1
 8000938:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	4847      	ldr	r0, [pc, #284]	; (8000a60 <MCAL_SPI_GPIO_SetPins+0x218>)
 8000942:	f7ff fddd 	bl	8000500 <MCAL_GPIO_Init>
}
 8000946:	e083      	b.n	8000a50 <MCAL_SPI_GPIO_SetPins+0x208>
		}else if(SPIx == SPI2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a46      	ldr	r2, [pc, #280]	; (8000a64 <MCAL_SPI_GPIO_SetPins+0x21c>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d17f      	bne.n	8000a50 <MCAL_SPI_GPIO_SetPins+0x208>
			if( Global_SPI_Cfg[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_Master )
 8000950:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <MCAL_SPI_GPIO_SetPins+0x214>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	2b04      	cmp	r3, #4
 8000958:	d147      	bne.n	80009ea <MCAL_SPI_GPIO_SetPins+0x1a2>
				switch (Global_SPI_Cfg[SPI1_INDEX]->NSS)
 800095a:	4b40      	ldr	r3, [pc, #256]	; (8000a5c <MCAL_SPI_GPIO_SetPins+0x214>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	899b      	ldrh	r3, [r3, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <MCAL_SPI_GPIO_SetPins+0x122>
 8000964:	2b04      	cmp	r3, #4
 8000966:	d00c      	beq.n	8000982 <MCAL_SPI_GPIO_SetPins+0x13a>
 8000968:	e019      	b.n	800099e <MCAL_SPI_GPIO_SetPins+0x156>
					PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 800096a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096e:	81bb      	strh	r3, [r7, #12]
					PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 8000970:	2301      	movs	r3, #1
 8000972:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	483b      	ldr	r0, [pc, #236]	; (8000a68 <MCAL_SPI_GPIO_SetPins+0x220>)
 800097c:	f7ff fdc0 	bl	8000500 <MCAL_GPIO_Init>
					break;
 8000980:	e00d      	b.n	800099e <MCAL_SPI_GPIO_SetPins+0x156>
					PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000986:	81bb      	strh	r3, [r7, #12]
					PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
 8000988:	2306      	movs	r3, #6
 800098a:	73bb      	strb	r3, [r7, #14]
					PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800098c:	2301      	movs	r3, #1
 800098e:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	4834      	ldr	r0, [pc, #208]	; (8000a68 <MCAL_SPI_GPIO_SetPins+0x220>)
 8000998:	f7ff fdb2 	bl	8000500 <MCAL_GPIO_Init>
					break;
 800099c:	bf00      	nop
				PinCfg.GPIO_PinNumber = GPIO_PIN_13 ;
 800099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a2:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
 80009a4:	2306      	movs	r3, #6
 80009a6:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	482d      	ldr	r0, [pc, #180]	; (8000a68 <MCAL_SPI_GPIO_SetPins+0x220>)
 80009b4:	f7ff fda4 	bl	8000500 <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80009b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009bc:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 80009be:	2301      	movs	r3, #1
 80009c0:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	4827      	ldr	r0, [pc, #156]	; (8000a68 <MCAL_SPI_GPIO_SetPins+0x220>)
 80009ca:	f7ff fd99 	bl	8000500 <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_15 ;
 80009ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009d2:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
 80009d4:	2306      	movs	r3, #6
 80009d6:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80009d8:	2301      	movs	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	4821      	ldr	r0, [pc, #132]	; (8000a68 <MCAL_SPI_GPIO_SetPins+0x220>)
 80009e4:	f7ff fd8c 	bl	8000500 <MCAL_GPIO_Init>
}
 80009e8:	e032      	b.n	8000a50 <MCAL_SPI_GPIO_SetPins+0x208>
				if(Global_SPI_Cfg[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MCAL_SPI_GPIO_SetPins+0x214>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	899b      	ldrh	r3, [r3, #12]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10a      	bne.n	8000a0a <MCAL_SPI_GPIO_SetPins+0x1c2>
					PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	81bb      	strh	r3, [r7, #12]
					PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 80009fa:	2301      	movs	r3, #1
 80009fc:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4619      	mov	r1, r3
 8000a04:	4818      	ldr	r0, [pc, #96]	; (8000a68 <MCAL_SPI_GPIO_SetPins+0x220>)
 8000a06:	f7ff fd7b 	bl	8000500 <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0e:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <MCAL_SPI_GPIO_SetPins+0x220>)
 8000a1c:	f7ff fd70 	bl	8000500 <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_14 ;
 8000a20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a24:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
 8000a26:	2306      	movs	r3, #6
 8000a28:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MCAL_SPI_GPIO_SetPins+0x220>)
 8000a36:	f7ff fd63 	bl	8000500 <MCAL_GPIO_Init>
				PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3e:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <MCAL_SPI_GPIO_SetPins+0x220>)
 8000a4c:	f7ff fd58 	bl	8000500 <MCAL_GPIO_Init>
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40013000 	.word	0x40013000
 8000a5c:	2000005c 	.word	0x2000005c
 8000a60:	40010800 	.word	0x40010800
 8000a64:	40003800 	.word	0x40003800
 8000a68:	40010c00 	.word	0x40010c00

08000a6c <MCAL_SPI_TXRX>:
 * @param [in]	-PollingEn: Enable or Disable SPI polling
 * @retval      -None
 * Note         -None
 **================================================================*/
void MCAL_SPI_TXRX(SPI_TypeDef* SPIx,uint16_t* pTxRxBuffer,enum SPI_PollingMechism PollingEn)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	4613      	mov	r3, r2
 8000a78:	71fb      	strb	r3, [r7, #7]
	if (PollingEn == SPI_ENABLE)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d106      	bne.n	8000a8e <MCAL_SPI_TXRX+0x22>
		while(! (SPIx->SR & SPI_TXE_FLAG) );
 8000a80:	bf00      	nop
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f9      	beq.n	8000a82 <MCAL_SPI_TXRX+0x16>
	SPIx->DR = *pTxRxBuffer;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	60da      	str	r2, [r3, #12]

	if (PollingEn == SPI_ENABLE)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d106      	bne.n	8000aac <MCAL_SPI_TXRX+0x40>
		while(! (SPIx->SR & SPI_RXNE_FLAG) );
 8000a9e:	bf00      	nop
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f9      	beq.n	8000aa0 <MCAL_SPI_TXRX+0x34>
	*pTxRxBuffer = SPIx->DR;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	801a      	strh	r2, [r3, #0]

}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <SPI1_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void SPI1_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
	struct sSPI_IRQ_SRC irq_src;

	irq_src.RXNE  = ( ( SPI1->SR & (SPI_RXNE_FLAG) ) >> 0   );
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <SPI1_IRQHandler+0x50>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	793b      	ldrb	r3, [r7, #4]
 8000ad2:	f362 0341 	bfi	r3, r2, #1, #1
 8000ad6:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( SPI1->SR & (SPI_TXE_FLAG) )  >> 1   );
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <SPI1_IRQHandler+0x50>)
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	085b      	lsrs	r3, r3, #1
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	793b      	ldrb	r3, [r7, #4]
 8000ae6:	f362 0300 	bfi	r3, r2, #0, #1
 8000aea:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = ( ( SPI1->SR & (SPI_ERRI_FLAG) )  >> 4   );
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <SPI1_IRQHandler+0x50>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	091b      	lsrs	r3, r3, #4
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	793b      	ldrb	r3, [r7, #4]
 8000afa:	f362 0382 	bfi	r3, r2, #2, #1
 8000afe:	713b      	strb	r3, [r7, #4]

	P_SPI_IRQ_Callback_g[0](irq_src);
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <SPI1_IRQHandler+0x54>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	7938      	ldrb	r0, [r7, #4]
 8000b06:	4798      	blx	r3
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40013000 	.word	0x40013000
 8000b14:	20000094 	.word	0x20000094

08000b18 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	struct sSPI_IRQ_SRC irq_src;

	irq_src.RXNE  = ( ( SPI2->SR & (SPI_RXNE_FLAG) ) >> 0   );
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <SPI2_IRQHandler+0x50>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	793b      	ldrb	r3, [r7, #4]
 8000b2a:	f362 0341 	bfi	r3, r2, #1, #1
 8000b2e:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( SPI2->SR & (SPI_TXE_FLAG) )  >> 1   );
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <SPI2_IRQHandler+0x50>)
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	793b      	ldrb	r3, [r7, #4]
 8000b3e:	f362 0300 	bfi	r3, r2, #0, #1
 8000b42:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = ( ( SPI2->SR & (SPI_ERRI_FLAG) )  >> 4   );
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <SPI2_IRQHandler+0x50>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	793b      	ldrb	r3, [r7, #4]
 8000b52:	f362 0382 	bfi	r3, r2, #2, #1
 8000b56:	713b      	strb	r3, [r7, #4]

	P_SPI_IRQ_Callback_g[1](irq_src);
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SPI2_IRQHandler+0x54>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	7938      	ldrb	r0, [r7, #4]
 8000b5e:	4798      	blx	r3
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40003800 	.word	0x40003800
 8000b6c:	20000094 	.word	0x20000094

08000b70 <MCAL_UART_Init>:
 * @param [in]  -UART_Cfg :All the UART configuration
 * @retval      -None
 * Note         -support for now ASynch mode and clock 8 HZ
 **================================================================*/
void MCAL_UART_Init(USART_TypeDef* USARTx,UART_Config_t* UART_Cfg)
{
 8000b70:	b5b0      	push	{r4, r5, r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	uint32_t pclk,BRR;

	//Enable the Clock for given USART Peripheral
	if( USARTx == USART1 )
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a5c      	ldr	r2, [pc, #368]	; (8000cf0 <MCAL_UART_Init+0x180>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d111      	bne.n	8000ba6 <MCAL_UART_Init+0x36>
	{
		Global_UART_Cfg1 = *UART_Cfg;
 8000b82:	4a5c      	ldr	r2, [pc, #368]	; (8000cf4 <MCAL_UART_Init+0x184>)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	4614      	mov	r4, r2
 8000b88:	461d      	mov	r5, r3
 8000b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8e:	682b      	ldr	r3, [r5, #0]
 8000b90:	6023      	str	r3, [r4, #0]
		Global_UART_Cfg[UART1_Index] = &Global_UART_Cfg1;
 8000b92:	4b59      	ldr	r3, [pc, #356]	; (8000cf8 <MCAL_UART_Init+0x188>)
 8000b94:	4a57      	ldr	r2, [pc, #348]	; (8000cf4 <MCAL_UART_Init+0x184>)
 8000b96:	601a      	str	r2, [r3, #0]

		RCC_USART1_CLK_ENABLE();
 8000b98:	4b58      	ldr	r3, [pc, #352]	; (8000cfc <MCAL_UART_Init+0x18c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a57      	ldr	r2, [pc, #348]	; (8000cfc <MCAL_UART_Init+0x18c>)
 8000b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	e02a      	b.n	8000bfc <MCAL_UART_Init+0x8c>
	}

	else if ( USARTx == USART2 )
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a55      	ldr	r2, [pc, #340]	; (8000d00 <MCAL_UART_Init+0x190>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d111      	bne.n	8000bd2 <MCAL_UART_Init+0x62>
	{
		Global_UART_Cfg2 = *UART_Cfg;
 8000bae:	4a55      	ldr	r2, [pc, #340]	; (8000d04 <MCAL_UART_Init+0x194>)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	4614      	mov	r4, r2
 8000bb4:	461d      	mov	r5, r3
 8000bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bba:	682b      	ldr	r3, [r5, #0]
 8000bbc:	6023      	str	r3, [r4, #0]
		Global_UART_Cfg[UART2_Index] = &Global_UART_Cfg2;
 8000bbe:	4b4e      	ldr	r3, [pc, #312]	; (8000cf8 <MCAL_UART_Init+0x188>)
 8000bc0:	4a50      	ldr	r2, [pc, #320]	; (8000d04 <MCAL_UART_Init+0x194>)
 8000bc2:	605a      	str	r2, [r3, #4]

		RCC_USART2_CLK_ENABLE();
 8000bc4:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <MCAL_UART_Init+0x18c>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	4a4c      	ldr	r2, [pc, #304]	; (8000cfc <MCAL_UART_Init+0x18c>)
 8000bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bce:	61d3      	str	r3, [r2, #28]
 8000bd0:	e014      	b.n	8000bfc <MCAL_UART_Init+0x8c>
	}


	else if ( USARTx == USART3 )
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a4c      	ldr	r2, [pc, #304]	; (8000d08 <MCAL_UART_Init+0x198>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d110      	bne.n	8000bfc <MCAL_UART_Init+0x8c>
	{
		Global_UART_Cfg3 = *UART_Cfg;
 8000bda:	4a4c      	ldr	r2, [pc, #304]	; (8000d0c <MCAL_UART_Init+0x19c>)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	4614      	mov	r4, r2
 8000be0:	461d      	mov	r5, r3
 8000be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be6:	682b      	ldr	r3, [r5, #0]
 8000be8:	6023      	str	r3, [r4, #0]
		Global_UART_Cfg[UART3_Index] = &Global_UART_Cfg3;
 8000bea:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <MCAL_UART_Init+0x188>)
 8000bec:	4a47      	ldr	r2, [pc, #284]	; (8000d0c <MCAL_UART_Init+0x19c>)
 8000bee:	609a      	str	r2, [r3, #8]

		RCC_USART3_CLK_ENABLE();
 8000bf0:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <MCAL_UART_Init+0x18c>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	4a41      	ldr	r2, [pc, #260]	; (8000cfc <MCAL_UART_Init+0x18c>)
 8000bf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bfa:	61d3      	str	r3, [r2, #28]
	}


	//Enable USART Module
	//Bit 13 UE: USART enable
	USARTx->CR1 |= (1<<13) ;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	60da      	str	r2, [r3, #12]

	//Mode TX-RX
	USARTx->CR1 |= UART_Cfg->USART_Mode ;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	7812      	ldrb	r2, [r2, #0]
 8000c10:	431a      	orrs	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60da      	str	r2, [r3, #12]

	// PayLoad width
	//Bit 12 M:Word length
	USARTx->CR1 |= UART_Cfg->PayLoad_Length ;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	7a12      	ldrb	r2, [r2, #8]
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	60da      	str	r2, [r3, #12]

	//Parity Bits
	USARTx->CR1 |= UART_Cfg->Parity ;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	7a52      	ldrb	r2, [r2, #9]
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60da      	str	r2, [r3, #12]

	//Stop Bits
	USARTx->CR2 |= UART_Cfg->StopBits;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	7a92      	ldrb	r2, [r2, #10]
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	611a      	str	r2, [r3, #16]

	//Hardware Flow Control
	USARTx->CR3 |= UART_Cfg->HwFlowCTRL ;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	7ad2      	ldrb	r2, [r2, #11]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	615a      	str	r2, [r3, #20]

	//Configure baud rate
	//PCLK2 For USART1
	//PCLK1 for USART2 ,3
	if(USARTx == USART1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a27      	ldr	r2, [pc, #156]	; (8000cf0 <MCAL_UART_Init+0x180>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d103      	bne.n	8000c5e <MCAL_UART_Init+0xee>
		pclk = MCAL_RCC_GetPClk2Freq();
 8000c56:	f7ff fd2b 	bl	80006b0 <MCAL_RCC_GetPClk2Freq>
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	e002      	b.n	8000c64 <MCAL_UART_Init+0xf4>
	else
		pclk = MCAL_RCC_GetPClk1Freq();
 8000c5e:	f7ff fd13 	bl	8000688 <MCAL_RCC_GetPClk1Freq>
 8000c62:	60f8      	str	r0, [r7, #12]

	BRR = UART_BRR_Register(pclk ,UART_Cfg->USART_BAUDRATE ) ;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	60bb      	str	r3, [r7, #8]

	USARTx->BRR =BRR ;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	609a      	str	r2, [r3, #8]

	//Enable/Disable Interrupt
	if(UART_Cfg->IRQ_Enable != UART_IRQ_ENABLE_NONE)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	7b1b      	ldrb	r3, [r3, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d032      	beq.n	8000ce8 <MCAL_UART_Init+0x178>
	{
		USARTx->CR1 |= UART_Cfg->IRQ_Enable ;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	7b12      	ldrb	r2, [r2, #12]
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	60da      	str	r2, [r3, #12]

		//enable NVIC for USART IRQ
		if(USARTx == USART1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <MCAL_UART_Init+0x180>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d10a      	bne.n	8000cae <MCAL_UART_Init+0x13e>
		{
			NVIC_IRQ37_USART1_ENABLE();
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MCAL_UART_Init+0x1a0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <MCAL_UART_Init+0x1a0>)
 8000c9e:	f043 0320 	orr.w	r3, r3, #32
 8000ca2:	6013      	str	r3, [r2, #0]
			P_UART_IRQ_Callback_g[0] = UART_Cfg->P_IRQ_CallBack;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <MCAL_UART_Init+0x1a4>)
 8000caa:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_ENABLE();
			P_UART_IRQ_Callback_g[2] = UART_Cfg->P_IRQ_CallBack;
		}

	}
}
 8000cac:	e01c      	b.n	8000ce8 <MCAL_UART_Init+0x178>
		else if (USARTx == USART2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <MCAL_UART_Init+0x190>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10a      	bne.n	8000ccc <MCAL_UART_Init+0x15c>
			NVIC_IRQ38_USART2_ENABLE();
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MCAL_UART_Init+0x1a0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <MCAL_UART_Init+0x1a0>)
 8000cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc0:	6013      	str	r3, [r2, #0]
			P_UART_IRQ_Callback_g[1] = UART_Cfg->P_IRQ_CallBack;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <MCAL_UART_Init+0x1a4>)
 8000cc8:	6053      	str	r3, [r2, #4]
}
 8000cca:	e00d      	b.n	8000ce8 <MCAL_UART_Init+0x178>
		else if (USARTx == USART3)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <MCAL_UART_Init+0x198>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d109      	bne.n	8000ce8 <MCAL_UART_Init+0x178>
			NVIC_IRQ39_USART3_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MCAL_UART_Init+0x1a0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <MCAL_UART_Init+0x1a0>)
 8000cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cde:	6013      	str	r3, [r2, #0]
			P_UART_IRQ_Callback_g[2] = UART_Cfg->P_IRQ_CallBack;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <MCAL_UART_Init+0x1a4>)
 8000ce6:	6093      	str	r3, [r2, #8]
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf0:	40013800 	.word	0x40013800
 8000cf4:	200000a8 	.word	0x200000a8
 8000cf8:	2000009c 	.word	0x2000009c
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40004400 	.word	0x40004400
 8000d04:	200000bc 	.word	0x200000bc
 8000d08:	40004800 	.word	0x40004800
 8000d0c:	200000d0 	.word	0x200000d0
 8000d10:	e000e104 	.word	0xe000e104
 8000d14:	200000e4 	.word	0x200000e4

08000d18 <MCAL_UART_GPIO_SetPins>:
 * @param [in]	- USARTx :Where x can be (1...3 depending on device used)
 * @retval 		- None
 * Note			- Should Enable the corresponding GPIO/AFIO In RCC
 **================================================================*/
void MCAL_UART_GPIO_SetPins(USART_TypeDef * USARTx)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;
	if(USARTx == USART1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <MCAL_UART_GPIO_SetPins+0xb4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d117      	bne.n	8000d58 <MCAL_UART_GPIO_SetPins+0x40>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9 ;
 8000d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d2c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
 8000d2e:	2306      	movs	r3, #6
 8000d30:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg) ;
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4824      	ldr	r0, [pc, #144]	; (8000dd0 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000d3e:	f7ff fbdf 	bl	8000500 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10 ;
 8000d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d46:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg) ;
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4619      	mov	r1, r3
 8000d52:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000d54:	f7ff fbd4 	bl	8000500 <MCAL_GPIO_Init>
			PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
			PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg) ;
		}
	}
	if(USARTx == USART2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d115      	bne.n	8000d8c <MCAL_UART_GPIO_SetPins+0x74>
		//PA3 RX
		//PA0 CTS
		//PA1 RTS

		//PA2 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_2 ;
 8000d60:	2304      	movs	r3, #4
 8000d62:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
 8000d64:	2306      	movs	r3, #6
 8000d66:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg) ;
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4619      	mov	r1, r3
 8000d72:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000d74:	f7ff fbc4 	bl	8000500 <MCAL_GPIO_Init>

		//PA3 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_3 ;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg) ;
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000d88:	f7ff fbba 	bl	8000500 <MCAL_GPIO_Init>
			PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
			PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg) ;
		}
	}
	if(USARTx == USART3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <MCAL_UART_GPIO_SetPins+0xc0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d117      	bne.n	8000dc4 <MCAL_UART_GPIO_SetPins+0xac>
		//PB11 RX
		//PB13 CTS
		//PA14 RTS

		//PB10 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10 ;
 8000d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d98:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg) ;
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000daa:	f7ff fba9 	bl	8000500 <MCAL_GPIO_Init>

		//PB11 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_11 ;
 8000dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db2:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg) ;
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000dc0:	f7ff fb9e 	bl	8000500 <MCAL_GPIO_Init>
			PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_PP;
			PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg) ;
		}
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40013800 	.word	0x40013800
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	40004800 	.word	0x40004800

08000ddc <MCAL_UART_SendData>:
 * @param [in]	- PollingEn: Enable or Disable UART polling
 * @retval 		- None
 * Note			- Should Initialize UART first
 **================================================================*/
void MCAL_UART_SendData(USART_TypeDef * USARTx , uint16_t * pTXBuffer , enum UART_Polling_mechism PollingEn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	4613      	mov	r3, r2
 8000de8:	71fb      	strb	r3, [r7, #7]
    uint8_t index;

	if( USARTx == USART1 )
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <MCAL_UART_SendData+0x60>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d102      	bne.n	8000df8 <MCAL_UART_SendData+0x1c>
		index = UART1_Index;
 8000df2:	2300      	movs	r3, #0
 8000df4:	75fb      	strb	r3, [r7, #23]
 8000df6:	e00c      	b.n	8000e12 <MCAL_UART_SendData+0x36>
	else if ( USARTx == USART2 )
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <MCAL_UART_SendData+0x64>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d102      	bne.n	8000e06 <MCAL_UART_SendData+0x2a>
		index = UART2_Index;
 8000e00:	2301      	movs	r3, #1
 8000e02:	75fb      	strb	r3, [r7, #23]
 8000e04:	e005      	b.n	8000e12 <MCAL_UART_SendData+0x36>
	else if ( USARTx == USART3 )
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <MCAL_UART_SendData+0x68>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <MCAL_UART_SendData+0x36>
		index = UART3_Index;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	75fb      	strb	r3, [r7, #23]

	//Wait Until TXE is set in SR
	if ( PollingEn == UART_ENABLE )
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d106      	bne.n	8000e26 <MCAL_UART_SendData+0x4a>
		while(! ( USARTx->SR & ( UART_TXE_FLAG ) ) );
 8000e18:	bf00      	nop
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f9      	beq.n	8000e1a <MCAL_UART_SendData+0x3e>
	{
		USARTx->DR = ( *pTXBuffer & (uint16_t)0x01FF );
	}
	else
	{
		USARTx->DR = ( *pTXBuffer & (uint16_t)0xFF );
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	605a      	str	r2, [r3, #4]
	}

}
 8000e30:	bf00      	nop
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40013800 	.word	0x40013800
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40004800 	.word	0x40004800

08000e48 <MCAL_UART_ReceiveData>:
 * @param [in]	- PollingEn: Enable or Disable UART polling
 * @retval 		- None
 * Note			- Should Initialize UART first
 **================================================================*/
void MCAL_UART_ReceiveData(USART_TypeDef * USARTx,uint16_t * pRXBuffer , enum UART_Polling_mechism PollingEn)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	4613      	mov	r3, r2
 8000e54:	71fb      	strb	r3, [r7, #7]

    uint8_t index;

	if( USARTx == USART1 )
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <MCAL_UART_ReceiveData+0x84>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d102      	bne.n	8000e64 <MCAL_UART_ReceiveData+0x1c>
		index = UART1_Index;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	75fb      	strb	r3, [r7, #23]
 8000e62:	e00c      	b.n	8000e7e <MCAL_UART_ReceiveData+0x36>
	else if ( USARTx == USART2 )
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4a1a      	ldr	r2, [pc, #104]	; (8000ed0 <MCAL_UART_ReceiveData+0x88>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d102      	bne.n	8000e72 <MCAL_UART_ReceiveData+0x2a>
		index = UART2_Index;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	75fb      	strb	r3, [r7, #23]
 8000e70:	e005      	b.n	8000e7e <MCAL_UART_ReceiveData+0x36>
	else if ( USARTx == USART3 )
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <MCAL_UART_ReceiveData+0x8c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <MCAL_UART_ReceiveData+0x36>
		index = UART3_Index;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	75fb      	strb	r3, [r7, #23]


	//Wait Until RXNE is set in SR
	if ( PollingEn == UART_ENABLE )
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d106      	bne.n	8000e92 <MCAL_UART_ReceiveData+0x4a>
		while(! ( USARTx->SR & ( UART_RXNE_FLAG ) ) );
 8000e84:	bf00      	nop
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f9      	beq.n	8000e86 <MCAL_UART_ReceiveData+0x3e>
		}
	}

	else //8 bit data
	{
		if(Global_UART_Cfg[index]->Parity == UART_Parity_NONE)
 8000e92:	7dfb      	ldrb	r3, [r7, #23]
 8000e94:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <MCAL_UART_ReceiveData+0x90>)
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	7a5b      	ldrb	r3, [r3, #9]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d107      	bne.n	8000eb0 <MCAL_UART_ReceiveData+0x68>
		{
			//no parity so all 8bits are data
			*( (uint16_t*)pRXBuffer ) = (USARTx->DR   & (uint8_t)0xFF );
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	801a      	strh	r2, [r3, #0]
		{
			//Parity is used, 7bit is data and the last one is parity
			*( (uint16_t*)pRXBuffer ) =( USARTx->DR & (uint8_t)0x7F );
		}
	}
}
 8000eae:	e007      	b.n	8000ec0 <MCAL_UART_ReceiveData+0x78>
			*( (uint16_t*)pRXBuffer ) =( USARTx->DR & (uint8_t)0x7F );
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	801a      	strh	r2, [r3, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	40004400 	.word	0x40004400
 8000ed4:	40004800 	.word	0x40004800
 8000ed8:	2000009c 	.word	0x2000009c

08000edc <USART1_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void USART1_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART1->SR & (UART_PE_FLAG) )   >> 1   );
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <USART1_IRQHandler+0x68>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	793b      	ldrb	r3, [r7, #4]
 8000ef0:	f362 03c3 	bfi	r3, r2, #3, #1
 8000ef4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART1->SR & (UART_RXNE_FLAG) ) >> 5   );
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <USART1_IRQHandler+0x68>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	793b      	ldrb	r3, [r7, #4]
 8000f04:	f362 0341 	bfi	r3, r2, #1, #1
 8000f08:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART1->SR & (UART_TC_FLAG) )   >> 6   );
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <USART1_IRQHandler+0x68>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	099b      	lsrs	r3, r3, #6
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	793b      	ldrb	r3, [r7, #4]
 8000f18:	f362 0382 	bfi	r3, r2, #2, #1
 8000f1c:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART1->SR & (UART_TXE_FLAG) )  >> 7   );
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <USART1_IRQHandler+0x68>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	09db      	lsrs	r3, r3, #7
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	793b      	ldrb	r3, [r7, #4]
 8000f2c:	f362 0300 	bfi	r3, r2, #0, #1
 8000f30:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[0](irq_src);
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <USART1_IRQHandler+0x6c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	7938      	ldrb	r0, [r7, #4]
 8000f38:	4798      	blx	r3
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40013800 	.word	0x40013800
 8000f48:	200000e4 	.word	0x200000e4

08000f4c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART2->SR & (UART_PE_FLAG) )   >> 1   );
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <USART2_IRQHandler+0x68>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	085b      	lsrs	r3, r3, #1
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	793b      	ldrb	r3, [r7, #4]
 8000f60:	f362 03c3 	bfi	r3, r2, #3, #1
 8000f64:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART2->SR & (UART_RXNE_FLAG) ) >> 5   );
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <USART2_IRQHandler+0x68>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	793b      	ldrb	r3, [r7, #4]
 8000f74:	f362 0341 	bfi	r3, r2, #1, #1
 8000f78:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART2->SR & (UART_TC_FLAG) )   >> 6   );
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <USART2_IRQHandler+0x68>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	099b      	lsrs	r3, r3, #6
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	793b      	ldrb	r3, [r7, #4]
 8000f88:	f362 0382 	bfi	r3, r2, #2, #1
 8000f8c:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART2->SR & (UART_TXE_FLAG) )  >> 7   );
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <USART2_IRQHandler+0x68>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	09db      	lsrs	r3, r3, #7
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	793b      	ldrb	r3, [r7, #4]
 8000f9c:	f362 0300 	bfi	r3, r2, #0, #1
 8000fa0:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[1](irq_src);
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <USART2_IRQHandler+0x6c>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	7938      	ldrb	r0, [r7, #4]
 8000fa8:	4798      	blx	r3
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	200000e4 	.word	0x200000e4

08000fbc <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART3->SR & (UART_PE_FLAG) )   >> 1   );
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <USART3_IRQHandler+0x68>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	085b      	lsrs	r3, r3, #1
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	793b      	ldrb	r3, [r7, #4]
 8000fd0:	f362 03c3 	bfi	r3, r2, #3, #1
 8000fd4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART3->SR & (UART_RXNE_FLAG) ) >> 5   );
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <USART3_IRQHandler+0x68>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	793b      	ldrb	r3, [r7, #4]
 8000fe4:	f362 0341 	bfi	r3, r2, #1, #1
 8000fe8:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART3->SR & (UART_TC_FLAG) )   >> 6   );
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <USART3_IRQHandler+0x68>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	099b      	lsrs	r3, r3, #6
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	793b      	ldrb	r3, [r7, #4]
 8000ff8:	f362 0382 	bfi	r3, r2, #2, #1
 8000ffc:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART3->SR & (UART_TXE_FLAG) )  >> 7   );
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <USART3_IRQHandler+0x68>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	09db      	lsrs	r3, r3, #7
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	793b      	ldrb	r3, [r7, #4]
 800100c:	f362 0300 	bfi	r3, r2, #0, #1
 8001010:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[2](irq_src);
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <USART3_IRQHandler+0x6c>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	7938      	ldrb	r0, [r7, #4]
 8001018:	4798      	blx	r3
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40004800 	.word	0x40004800
 8001028:	200000e4 	.word	0x200000e4

0800102c <main>:
void UART_Init();
void UART1_App_Callback();
void SPI1_App_Callback(struct sSPI_IRQ_SRC irq_src);

int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
	Clock_Init();
 8001032:	f000 f823 	bl	800107c <Clock_Init>
	UART_Init();
 8001036:	f000 f835 	bl	80010a4 <UART_Init>

	SPI_Config_t SPI_Cfg;

	SPI_Cfg.Communication_Mode = SPI_Direction_2Lines;
 800103a:	2300      	movs	r3, #0
 800103c:	807b      	strh	r3, [r7, #2]
	SPI_Cfg.BaudRate_Prescaler = SPI_BaudRate_Prescaler_8;
 800103e:	2310      	movs	r3, #16
 8001040:	81fb      	strh	r3, [r7, #14]
	SPI_Cfg.Frame_Format = SPI_Frame_Format_MSB_First;
 8001042:	2300      	movs	r3, #0
 8001044:	80bb      	strh	r3, [r7, #4]
	SPI_Cfg.CLK_Phase = SPI_CPHA_2Edge_First_Data_Capture_Edge;
 8001046:	2301      	movs	r3, #1
 8001048:	817b      	strh	r3, [r7, #10]
	SPI_Cfg.CLK_Polarity = SPI_CPOL_High;
 800104a:	2302      	movs	r3, #2
 800104c:	813b      	strh	r3, [r7, #8]
	SPI_Cfg.Date_Size = SPI_Data_Size_8Bit_Mode;
 800104e:	2300      	movs	r3, #0
 8001050:	80fb      	strh	r3, [r7, #6]
           // Force SS to high(idle)
		   MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_STATE_SET);

    #endif
	#ifdef SPI_SLAVE
	       SPI_Cfg.Device_Mode = SPI_Device_Mode_Slave;
 8001052:	2300      	movs	r3, #0
 8001054:	803b      	strh	r3, [r7, #0]
	       SPI_Cfg.NSS = SPI_NSS_Hard_Slave;
 8001056:	2300      	movs	r3, #0
 8001058:	81bb      	strh	r3, [r7, #12]
	       SPI_Cfg.IRQ_Enable = SPI_IRQ_ENABLE_RXNEIE;
 800105a:	2340      	movs	r3, #64	; 0x40
 800105c:	823b      	strh	r3, [r7, #16]
	       SPI_Cfg.P_IRQ_CallBack = SPI1_App_Callback;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <main+0x48>)
 8001060:	617b      	str	r3, [r7, #20]
	#endif

    MCAL_SPI_Init(SPI1,&SPI_Cfg);
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4804      	ldr	r0, [pc, #16]	; (8001078 <main+0x4c>)
 8001068:	f7ff fb36 	bl	80006d8 <MCAL_SPI_Init>
    MCAL_SPI_GPIO_SetPins(SPI1);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <main+0x4c>)
 800106e:	f7ff fbeb 	bl	8000848 <MCAL_SPI_GPIO_SetPins>

	while(1)
 8001072:	e7fe      	b.n	8001072 <main+0x46>
 8001074:	08001111 	.word	0x08001111
 8001078:	40013000 	.word	0x40013000

0800107c <Clock_Init>:

	}
}

void Clock_Init()
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	// enable PORTA ,PORTB clock
	GPIOA_CLOCK_ENABLE();
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <Clock_Init+0x24>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <Clock_Init+0x24>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6193      	str	r3, [r2, #24]
	GPIOB_CLOCK_ENABLE();
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <Clock_Init+0x24>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <Clock_Init+0x24>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000

080010a4 <UART_Init>:

void UART_Init()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
	UART_Config_t UART_Cfg;

	UART_Cfg.USART_BAUDRATE = UART_BAUDRATE_9600;
 80010aa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80010ae:	60bb      	str	r3, [r7, #8]
	UART_Cfg.HwFlowCTRL = UART_HwFlowCTL_NONE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
	UART_Cfg.USART_Mode = UART_MODE_RXTX;
 80010b4:	230c      	movs	r3, #12
 80010b6:	713b      	strb	r3, [r7, #4]
	UART_Cfg.PayLoad_Length = UART_PayLoad_Length_8bit;
 80010b8:	2300      	movs	r3, #0
 80010ba:	733b      	strb	r3, [r7, #12]
	UART_Cfg.Parity = UART_Parity_NONE;
 80010bc:	2300      	movs	r3, #0
 80010be:	737b      	strb	r3, [r7, #13]
	UART_Cfg.StopBits = UART_StopBits_1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73bb      	strb	r3, [r7, #14]
    #ifdef UART_Interrupt
			UART_Cfg.IRQ_Enable = UART_IRQ_ENABLE_RXNEIE;
 80010c4:	2320      	movs	r3, #32
 80010c6:	743b      	strb	r3, [r7, #16]
			UART_Cfg.P_IRQ_CallBack = UART1_App_Callback;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <UART_Init+0x40>)
 80010ca:	617b      	str	r3, [r7, #20]
    #ifndef	UART_Interrupt
			UART_Cfg.P_IRQ_CallBack = NULL;
			UART_Cfg.IRQ_Enable = UART_IRQ_ENABLE_NONE;
   #endif

	MCAL_UART_Init(USART1,&UART_Cfg);
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <UART_Init+0x44>)
 80010d2:	f7ff fd4d 	bl	8000b70 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART1);
 80010d6:	4804      	ldr	r0, [pc, #16]	; (80010e8 <UART_Init+0x44>)
 80010d8:	f7ff fe1e 	bl	8000d18 <MCAL_UART_GPIO_SetPins>
}
 80010dc:	bf00      	nop
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	080010ed 	.word	0x080010ed
 80010e8:	40013800 	.word	0x40013800

080010ec <UART1_App_Callback>:

void UART1_App_Callback()
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, (uint16_t*)&rxtx, UART_DISABLE);
 80010f0:	2201      	movs	r2, #1
 80010f2:	4905      	ldr	r1, [pc, #20]	; (8001108 <UART1_App_Callback+0x1c>)
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <UART1_App_Callback+0x20>)
 80010f6:	f7ff fea7 	bl	8000e48 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, (uint16_t*)&rxtx, UART_DISABLE);
 80010fa:	2201      	movs	r2, #1
 80010fc:	4902      	ldr	r1, [pc, #8]	; (8001108 <UART1_App_Callback+0x1c>)
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <UART1_App_Callback+0x20>)
 8001100:	f7ff fe6c 	bl	8000ddc <MCAL_UART_SendData>
	#ifdef SPI_MASTER
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_STATE_RESET);
	MCAL_SPI_TXRX(SPI1,(uint16_t*)&rxtx ,SPI_ENABLE);
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_STATE_SET);
    #endif
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200000f0 	.word	0x200000f0
 800110c:	40013800 	.word	0x40013800

08001110 <SPI1_App_Callback>:

void SPI1_App_Callback(struct sSPI_IRQ_SRC irq_src)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	7138      	strb	r0, [r7, #4]
	#ifdef SPI_SLAVE
	if( irq_src.RXNE )
 8001118:	793b      	ldrb	r3, [r7, #4]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d009      	beq.n	8001138 <SPI1_App_Callback+0x28>
	{
		MCAL_SPI_TXRX(SPI1,(uint16_t*)&rxtx ,SPI_DISABLE);
 8001124:	2201      	movs	r2, #1
 8001126:	4906      	ldr	r1, [pc, #24]	; (8001140 <SPI1_App_Callback+0x30>)
 8001128:	4806      	ldr	r0, [pc, #24]	; (8001144 <SPI1_App_Callback+0x34>)
 800112a:	f7ff fc9f 	bl	8000a6c <MCAL_SPI_TXRX>
		MCAL_UART_SendData(USART1, (uint16_t*)&rxtx, UART_ENABLE);
 800112e:	2200      	movs	r2, #0
 8001130:	4903      	ldr	r1, [pc, #12]	; (8001140 <SPI1_App_Callback+0x30>)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <SPI1_App_Callback+0x38>)
 8001134:	f7ff fe52 	bl	8000ddc <MCAL_UART_SendData>
	}
	#endif
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200000f0 	.word	0x200000f0
 8001144:	40013000 	.word	0x40013000
 8001148:	40013800 	.word	0x40013800

0800114c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001150:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <LoopForever+0x6>)
  ldr r1, =_edata
 8001156:	490d      	ldr	r1, [pc, #52]	; (800118c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <LoopForever+0xe>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800116c:	4c0a      	ldr	r4, [pc, #40]	; (8001198 <LoopForever+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800117a:	f000 f811 	bl	80011a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117e:	f7ff ff55 	bl	800102c <main>

08001182 <LoopForever>:

LoopForever:
    b LoopForever
 8001182:	e7fe      	b.n	8001182 <LoopForever>
  ldr   r0, =_estack
 8001184:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001190:	08001220 	.word	0x08001220
  ldr r2, =_sbss
 8001194:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001198:	200000f4 	.word	0x200000f4

0800119c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_2_IRQHandler>
	...

080011a0 <__libc_init_array>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	2600      	movs	r6, #0
 80011a4:	4d0c      	ldr	r5, [pc, #48]	; (80011d8 <__libc_init_array+0x38>)
 80011a6:	4c0d      	ldr	r4, [pc, #52]	; (80011dc <__libc_init_array+0x3c>)
 80011a8:	1b64      	subs	r4, r4, r5
 80011aa:	10a4      	asrs	r4, r4, #2
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d109      	bne.n	80011c4 <__libc_init_array+0x24>
 80011b0:	f000 f81a 	bl	80011e8 <_init>
 80011b4:	2600      	movs	r6, #0
 80011b6:	4d0a      	ldr	r5, [pc, #40]	; (80011e0 <__libc_init_array+0x40>)
 80011b8:	4c0a      	ldr	r4, [pc, #40]	; (80011e4 <__libc_init_array+0x44>)
 80011ba:	1b64      	subs	r4, r4, r5
 80011bc:	10a4      	asrs	r4, r4, #2
 80011be:	42a6      	cmp	r6, r4
 80011c0:	d105      	bne.n	80011ce <__libc_init_array+0x2e>
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
 80011c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c8:	4798      	blx	r3
 80011ca:	3601      	adds	r6, #1
 80011cc:	e7ee      	b.n	80011ac <__libc_init_array+0xc>
 80011ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80011d2:	4798      	blx	r3
 80011d4:	3601      	adds	r6, #1
 80011d6:	e7f2      	b.n	80011be <__libc_init_array+0x1e>
 80011d8:	08001218 	.word	0x08001218
 80011dc:	08001218 	.word	0x08001218
 80011e0:	08001218 	.word	0x08001218
 80011e4:	0800121c 	.word	0x0800121c

080011e8 <_init>:
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ea:	bf00      	nop
 80011ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ee:	bc08      	pop	{r3}
 80011f0:	469e      	mov	lr, r3
 80011f2:	4770      	bx	lr

080011f4 <_fini>:
 80011f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f6:	bf00      	nop
 80011f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011fa:	bc08      	pop	{r3}
 80011fc:	469e      	mov	lr, r3
 80011fe:	4770      	bx	lr

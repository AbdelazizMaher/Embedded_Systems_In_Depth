/*
 * Stm32f103c6_I2C_Driver.c
 *
 *  Created on: Nov 22, 2023
 *      Author: Abdelaziz Maher
 */

#include"Stm32f103c6_I2C_Driver.h"

/*
 * ======================================================================
 *                                          Generic variables
 *======================================================================
 */

I2C_Config_t Global_I2C_Config[2] = { {0},{0} };

/*
 *=======================================================================
 *						Generic MACROS
 *=======================================================================
 *
*/


#define I2C1_INDEX			0
#define I2C2_INDEX			1


/*
 * ======================================================================
 *                                          Generic Functions
 *======================================================================
 */



/*
 *-----------------------------------------------------------
 * 				APIs Functions Definitions
 *-----------------------------------------------------------
 */

/**================================================================
 * @Fn			- MCAL_I2C_Init
 * @brief       -Initialize I2C
 * @param [in]  -I2Cx :Where x can be (1...2 depending on device used)
 * @param [in]  -I2C_Config :All the I2C configuration
 * @retval      -None
 * Note         -Supports Master in Polling Mechanism & Slave in Interrupt Mechanism
 **================================================================*/
void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_Config_t *I2C_Cfg)
{
	uint16_t tempreg = 0, freqrange = 0 , SM_Speed = 0;
	uint32_t pclk1 = 8000000;

	// Enable RCC clock
	if( I2Cx == I2C1 )
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_Cfg;
		RCC_I2C1_CLK_ENABLE();
	}
	else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_Cfg;
		RCC_I2C2_CLK_ENABLE();
	}

	// Mode
	if( I2C_Cfg->I2C_Mode == I2C_MODE_I2C )
	{
		/******************   Init Time   ******************/
		// I2C_CR2.FREQ[5:0] : Peripheral clock frequency from APB1
		// Get the I2Cx CR2 Value
		tempreg = I2Cx->CR2;
		// Clear Frequency FREQ[5:0] bits
		tempreg &= ~(I2C_CR2_FREQ_Msk);
		// Get pclk1 Frequency Value
		pclk1 = MCAL_RCC_GetPClk1Freq();
		// Set the Frequency Bits Depending on pclk1 value
		freqrange = (uint16_t)(pclk1 / 1000000);

		tempreg |= freqrange;
		// Write to I2Cx CR2 register
		I2Cx->CR2 = tempreg;

		//Configure the clock control register I2C_CCR
		// Disable The Selected I2C Peripheral To Configure Time
		I2Cx->CR1 &= ~(I2C_CR1_PE);

		tempreg = 0;
		// Configure Speed In Standard Mode
		if( I2C_Cfg->Clock_Speed == I2C_SCLK_SM_50K || I2C_Cfg->Clock_Speed == I2C_SCLK_SM_100K )
		{
			// Standard Mode Speed Calculations
			//					 Tclk / 2 = CCR * Tpclk1
			// 					 CCR = Tclk / (2 * Tpclk1)
			//					 CCR = Fpclk1 / (2 * I2C_ClockFrequency)

			SM_Speed = (uint16_t)( pclk1 / ( I2C_Cfg->Clock_Speed << 1 ) );
			tempreg |= SM_Speed;
			// Write to CCR
			I2Cx->CCR = tempreg;

			/******************   TRISE_Configuration   ******************/
			//	If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//	therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
		}
		else
		{
			// Fast Mode Is Not Implemented
		}

		/******************  I2Cx CR1_Configuration   ******************/
		tempreg = 0;
		// Get The I2Cx CR1 value
		tempreg = I2Cx->CR1;

		tempreg |= (uint16_t)( I2C_Cfg->ACK_Control | I2C_Cfg->General_Call_Address_Detection | I2C_Cfg->I2C_Mode | I2C_Cfg->Stretch_Mode );
		// Write to I2Cx CR1 register
		I2Cx->CR1 = tempreg;

		/******************  I2Cx OAR1 & OAR2 Configuration   ******************/
		tempreg = 0;
		if(I2C_Cfg->I2C_Slave_Address.Enable_Dual_Address == 1)
		{
			tempreg = I2C_OAR2_ENDUAL;
			tempreg |= I2C_Cfg->I2C_Slave_Address.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos;
			I2Cx->OAR2 = tempreg;
		}

		tempreg = 0;

		tempreg |= I2C_Cfg->I2C_Slave_Address.Primary_Slave_Address << I2C_OAR1_ADD_Pos;
		tempreg |= I2C_Cfg->I2C_Slave_Address.I2C_Addressing_Mode;
		// Write to I2Cx OAR1 register
		I2Cx->OAR1 = tempreg;
	}
	else
	{
		// SMBUS Not Implemented
	}

	// Interrupt mode (Slave mode) // Check CallBack Pointer != NULL
	if( I2C_Cfg->P_SlaveEvent_IRQ_CallBack != NULL )
	{
		// Enable IRQs
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);

		if( I2Cx == I2C1 )
		{
			NVIC_IRQ31_I2C1_EV_ENABLE();
			NVIC_IRQ32_I2C1_ER_ENABLE();

		}
		else if( I2Cx == I2C2 )
		{
			NVIC_IRQ33_I2C2_EV_ENABLE();
			NVIC_IRQ34_I2C2_ER_ENABLE();
		}
		I2Cx->SR1 = 0;
		I2Cx->SR2 = 0;
	}
	// Enable The Selected I2C Peripheral
	I2Cx->CR1 = I2C_CR1_PE;
}

/**================================================================
 * @Fn			- MCAL_I2C_DeInit
* @brief        -DeInitialize I2C
 * @param [in]  -I2Cx :Where x can be (1...2 depending on device used)
 * @param [in]  -I2C_Config :All the I2C configuration
 * @retval      -None
 * Note         -Supports Master in Polling Mechanism & Slave in Interrupt Mechanism
 **================================================================*/
void MCAL_I2C_DeInit(I2C_TypeDef* I2Cx, I2C_Config_t *I2C_Cfg)
{
	if( I2Cx == I2C1 )
	{
		NVIC_IRQ31_I2C1_EV_DISABLE();
		NVIC_IRQ32_I2C1_ER_DISABLE();
		RCC_I2C1_RESET();

	}
	else if( I2Cx == I2C2 )
	{
		NVIC_IRQ33_I2C2_EV_DISABLE();
		NVIC_IRQ34_I2C2_ER_DISABLE();
		RCC_I2C2_RESET();
	}
}

/**================================================================
 * @Fn			- MCAL_I2C_GPIO_SetPins
 * @brief 		- Initialize GPIO pins for I2C
 * @param [in]	- I2Cx :Where x can be (1...3 depending on device used)
 * @retval 		- None
 * Note			- Should Enable the Corresponding GPIO/AFIO In RCC
 **================================================================*/
void MCAL_I2C_GPIO_SetPins(I2C_TypeDef* I2Cx)
{
	GPIO_PinConfig_t PinCfg;

	if( I2Cx == I2C1 )
	{
		//			 PB6: I2C1_SCL
		// 			 PB7: I2C1_SDA

		PinCfg.GPIO_Mode = GPIO_PIN_MODE_ALTFN_OUTPUT_OD;
		PinCfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;

		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
		MCAL_GPIO_Init(GPIOB, &PinCfg);
	}
	else if( I2Cx == I2C2 )
	{
		// 				PB10: I2C2_SCL
		//			    PB11: I2C2_SDA

		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
		MCAL_GPIO_Init(GPIOB, &PinCfg);
	}
}


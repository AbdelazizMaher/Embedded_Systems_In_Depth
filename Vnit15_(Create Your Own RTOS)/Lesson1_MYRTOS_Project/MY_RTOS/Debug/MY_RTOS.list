
MY_RTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aa0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000bd0  08000bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bf4  08000bf4  00010bfc  2**0
                  CONTENTS
  4 .ARM          00000000  08000bf4  08000bf4  00010bfc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bf4  08000bfc  00010bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bf4  08000bf4  00010bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bf8  08000bf8  00010bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000000  08000bfc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08000bfc  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010bfc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c6a  00000000  00000000  00010c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d0a  00000000  00000000  0001388f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000146c  00000000  00000000  00014599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000320  00000000  00000000  00015a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000298  00000000  00000000  00015d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021e8  00000000  00000000  00015fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004552  00000000  00000000  000181a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00012397  00000000  00000000  0001c6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002ea91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a48  00000000  00000000  0002eae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bb8 	.word	0x08000bb8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000bb8 	.word	0x08000bb8

08000170 <EXTI0_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void EXTI0_IRQHandler()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	EXTI->PR |= ( 1 << 0 );
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	P_IRQ_Callback_g[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5 ; P_IRQ_Callback_g[5](); };
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6 ; P_IRQ_Callback_g[6](); };
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7 ; P_IRQ_Callback_g[7](); };
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8 ; P_IRQ_Callback_g[8](); };
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9 ; P_IRQ_Callback_g[9](); };
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10 ; P_IRQ_Callback_g[10](); };
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11 ; P_IRQ_Callback_g[11](); };
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12 ; P_IRQ_Callback_g[12](); };
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13 ; P_IRQ_Callback_g[13](); };
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14 ; P_IRQ_Callback_g[14](); };
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if( EXTI->PR & 1<<15 ) { EXTI->PR |= 1<<15 ; P_IRQ_Callback_g[15](); };
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <I2C_ClearADDRFlag>:
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}

void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	dummy_read = pI2Cx->SR1;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	60fb      	str	r3, [r7, #12]
	dummy_read = pI2Cx->SR2;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	60fb      	str	r3, [r7, #12]
	(void)dummy_read;
}
 80003a4:	bf00      	nop
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
	...

080003b0 <I2C1_EV_IRQHandler>:

	return BitStatus;
}

void I2C1_EV_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
	I2C_TypeDef *I2Cx = I2C1;
 80003b6:	4b35      	ldr	r3, [pc, #212]	; (800048c <I2C1_EV_IRQHandler+0xdc>)
 80003b8:	60fb      	str	r3, [r7, #12]
	// Interrupt Handling for both master and slave
	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003c2:	60bb      	str	r3, [r7, #8]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003cc:	607b      	str	r3, [r7, #4]
	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f003 0310 	and.w	r3, r3, #16
 80003d6:	603b      	str	r3, [r7, #0]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d00a      	beq.n	80003f4 <I2C1_EV_IRQHandler+0x44>
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d007      	beq.n	80003f4 <I2C1_EV_IRQHandler+0x44>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 80003ec:	2100      	movs	r1, #0
 80003ee:	68f8      	ldr	r0, [r7, #12]
 80003f0:	f000 f860 	bl	80004b4 <Slave_States>
	}
	//----------------------------------------------------------
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f003 0302 	and.w	r3, r3, #2
 80003fc:	603b      	str	r3, [r7, #0]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode  : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d00f      	beq.n	8000424 <I2C1_EV_IRQHandler+0x74>
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d00c      	beq.n	8000424 <I2C1_EV_IRQHandler+0x74>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	2b00      	cmp	r3, #0
 8000414:	d106      	bne.n	8000424 <I2C1_EV_IRQHandler+0x74>
		}
		else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			I2C_ClearADDRFlag(I2Cx);
 8000416:	68f8      	ldr	r0, [r7, #12]
 8000418:	f7ff ffba 	bl	8000390 <I2C_ClearADDRFlag>
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 800041c:	2102      	movs	r1, #2
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f000 f848 	bl	80004b4 <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3 = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800042c:	603b      	str	r3, [r7, #0]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d00f      	beq.n	8000454 <I2C1_EV_IRQHandler+0xa4>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d00c      	beq.n	8000454 <I2C1_EV_IRQHandler+0xa4>
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d009      	beq.n	8000454 <I2C1_EV_IRQHandler+0xa4>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	2b00      	cmp	r3, #0
 800044a:	d103      	bne.n	8000454 <I2C1_EV_IRQHandler+0xa4>

		}
		else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 800044c:	2103      	movs	r1, #3
 800044e:	68f8      	ldr	r0, [r7, #12]
 8000450:	f000 f830 	bl	80004b4 <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3 = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800045c:	603b      	str	r3, [r7, #0]
	// Handle For interrupt generated by SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00f      	beq.n	8000484 <I2C1_EV_IRQHandler+0xd4>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d00c      	beq.n	8000484 <I2C1_EV_IRQHandler+0xd4>
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d009      	beq.n	8000484 <I2C1_EV_IRQHandler+0xd4>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	2b00      	cmp	r3, #0
 800047a:	d103      	bne.n	8000484 <I2C1_EV_IRQHandler+0xd4>
			//The device is master
		}
		else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 800047c:	2104      	movs	r1, #4
 800047e:	68f8      	ldr	r0, [r7, #12]
 8000480:	f000 f818 	bl	80004b4 <Slave_States>
		}
	}

}
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40005400 	.word	0x40005400

08000490 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <Slave_States>:



void Slave_States(I2C_TypeDef* I2Cx  ,eI2C_Slave_State State)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a32      	ldr	r2, [pc, #200]	; (800058c <Slave_States+0xd8>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	bf14      	ite	ne
 80004c8:	2301      	movne	r3, #1
 80004ca:	2300      	moveq	r3, #0
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	73fb      	strb	r3, [r7, #15]

	switch ( State )
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d856      	bhi.n	8000584 <Slave_States+0xd0>
 80004d6:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <Slave_States+0x28>)
 80004d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004dc:	080004f7 	.word	0x080004f7
 80004e0:	080004f1 	.word	0x080004f1
 80004e4:	0800051b 	.word	0x0800051b
 80004e8:	08000533 	.word	0x08000533
 80004ec:	08000557 	.word	0x08000557
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else
		}

		break ;
 80004f4:	e046      	b.n	8000584 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d03b      	beq.n	800057a <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_STOP) ;
 8000502:	7bfa      	ldrb	r2, [r7, #15]
 8000504:	4922      	ldr	r1, [pc, #136]	; (8000590 <Slave_States+0xdc>)
 8000506:	4613      	mov	r3, r2
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	4413      	add	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	440b      	add	r3, r1
 8000510:	3320      	adds	r3, #32
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2000      	movs	r0, #0
 8000516:	4798      	blx	r3
		}

		break ;
 8000518:	e02f      	b.n	800057a <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_ADDR_Matched) ;
 800051a:	7bfa      	ldrb	r2, [r7, #15]
 800051c:	491c      	ldr	r1, [pc, #112]	; (8000590 <Slave_States+0xdc>)
 800051e:	4613      	mov	r3, r2
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	4413      	add	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	440b      	add	r3, r1
 8000528:	3320      	adds	r3, #32
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2002      	movs	r0, #2
 800052e:	4798      	blx	r3

		break ;
 8000530:	e028      	b.n	8000584 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	2b00      	cmp	r3, #0
 800053c:	d01f      	beq.n	800057e <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_DATA_REQ) ;
 800053e:	7bfa      	ldrb	r2, [r7, #15]
 8000540:	4913      	ldr	r1, [pc, #76]	; (8000590 <Slave_States+0xdc>)
 8000542:	4613      	mov	r3, r2
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	4413      	add	r3, r2
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	440b      	add	r3, r1
 800054c:	3320      	adds	r3, #32
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2003      	movs	r0, #3
 8000552:	4798      	blx	r3
		}

		break ;
 8000554:	e013      	b.n	800057e <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	2b00      	cmp	r3, #0
 8000560:	d10f      	bne.n	8000582 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_DATA_RCV) ;
 8000562:	7bfa      	ldrb	r2, [r7, #15]
 8000564:	490a      	ldr	r1, [pc, #40]	; (8000590 <Slave_States+0xdc>)
 8000566:	4613      	mov	r3, r2
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	4413      	add	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	440b      	add	r3, r1
 8000570:	3320      	adds	r3, #32
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2004      	movs	r0, #4
 8000576:	4798      	blx	r3
		}

		break ;
 8000578:	e003      	b.n	8000582 <Slave_States+0xce>
		break ;
 800057a:	bf00      	nop
 800057c:	e002      	b.n	8000584 <Slave_States+0xd0>
		break ;
 800057e:	bf00      	nop
 8000580:	e000      	b.n	8000584 <Slave_States+0xd0>
		break ;
 8000582:	bf00      	nop
	}
	}

}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40005400 	.word	0x40005400
 8000590:	2000005c 	.word	0x2000005c

08000594 <SPI1_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void SPI1_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	struct sSPI_IRQ_SRC irq_src;

	irq_src.RXNE  = ( ( SPI1->SR & (SPI_RXNE_FLAG) ) >> 0   );
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <SPI1_IRQHandler+0x50>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	793b      	ldrb	r3, [r7, #4]
 80005a6:	f362 0341 	bfi	r3, r2, #1, #1
 80005aa:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( SPI1->SR & (SPI_TXE_FLAG) )  >> 1   );
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <SPI1_IRQHandler+0x50>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	085b      	lsrs	r3, r3, #1
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	793b      	ldrb	r3, [r7, #4]
 80005ba:	f362 0300 	bfi	r3, r2, #0, #1
 80005be:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = ( ( SPI1->SR & (SPI_ERRI_FLAG) )  >> 4   );
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <SPI1_IRQHandler+0x50>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	091b      	lsrs	r3, r3, #4
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	793b      	ldrb	r3, [r7, #4]
 80005ce:	f362 0382 	bfi	r3, r2, #2, #1
 80005d2:	713b      	strb	r3, [r7, #4]

	P_SPI_IRQ_Callback_g[0](irq_src);
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <SPI1_IRQHandler+0x54>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	7938      	ldrb	r0, [r7, #4]
 80005da:	4798      	blx	r3
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40013000 	.word	0x40013000
 80005e8:	200000a4 	.word	0x200000a4

080005ec <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	struct sSPI_IRQ_SRC irq_src;

	irq_src.RXNE  = ( ( SPI2->SR & (SPI_RXNE_FLAG) ) >> 0   );
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <SPI2_IRQHandler+0x50>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	793b      	ldrb	r3, [r7, #4]
 80005fe:	f362 0341 	bfi	r3, r2, #1, #1
 8000602:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( SPI2->SR & (SPI_TXE_FLAG) )  >> 1   );
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <SPI2_IRQHandler+0x50>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	085b      	lsrs	r3, r3, #1
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	b2da      	uxtb	r2, r3
 8000610:	793b      	ldrb	r3, [r7, #4]
 8000612:	f362 0300 	bfi	r3, r2, #0, #1
 8000616:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = ( ( SPI2->SR & (SPI_ERRI_FLAG) )  >> 4   );
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <SPI2_IRQHandler+0x50>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	f362 0382 	bfi	r3, r2, #2, #1
 800062a:	713b      	strb	r3, [r7, #4]

	P_SPI_IRQ_Callback_g[1](irq_src);
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SPI2_IRQHandler+0x54>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	7938      	ldrb	r0, [r7, #4]
 8000632:	4798      	blx	r3
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40003800 	.word	0x40003800
 8000640:	200000a4 	.word	0x200000a4

08000644 <USART1_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void USART1_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART1->SR & (UART_PE_FLAG) )   >> 1   );
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <USART1_IRQHandler+0x68>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	085b      	lsrs	r3, r3, #1
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	b2da      	uxtb	r2, r3
 8000656:	793b      	ldrb	r3, [r7, #4]
 8000658:	f362 03c3 	bfi	r3, r2, #3, #1
 800065c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART1->SR & (UART_RXNE_FLAG) ) >> 5   );
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <USART1_IRQHandler+0x68>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	095b      	lsrs	r3, r3, #5
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	b2da      	uxtb	r2, r3
 800066a:	793b      	ldrb	r3, [r7, #4]
 800066c:	f362 0341 	bfi	r3, r2, #1, #1
 8000670:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART1->SR & (UART_TC_FLAG) )   >> 6   );
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <USART1_IRQHandler+0x68>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	099b      	lsrs	r3, r3, #6
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	b2da      	uxtb	r2, r3
 800067e:	793b      	ldrb	r3, [r7, #4]
 8000680:	f362 0382 	bfi	r3, r2, #2, #1
 8000684:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART1->SR & (UART_TXE_FLAG) )  >> 7   );
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <USART1_IRQHandler+0x68>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	09db      	lsrs	r3, r3, #7
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	f362 0300 	bfi	r3, r2, #0, #1
 8000698:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[0](irq_src);
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <USART1_IRQHandler+0x6c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	7938      	ldrb	r0, [r7, #4]
 80006a0:	4798      	blx	r3
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40013800 	.word	0x40013800
 80006b0:	200000ac 	.word	0x200000ac

080006b4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART2->SR & (UART_PE_FLAG) )   >> 1   );
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <USART2_IRQHandler+0x68>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	085b      	lsrs	r3, r3, #1
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	793b      	ldrb	r3, [r7, #4]
 80006c8:	f362 03c3 	bfi	r3, r2, #3, #1
 80006cc:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART2->SR & (UART_RXNE_FLAG) ) >> 5   );
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <USART2_IRQHandler+0x68>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	095b      	lsrs	r3, r3, #5
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	793b      	ldrb	r3, [r7, #4]
 80006dc:	f362 0341 	bfi	r3, r2, #1, #1
 80006e0:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART2->SR & (UART_TC_FLAG) )   >> 6   );
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <USART2_IRQHandler+0x68>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	099b      	lsrs	r3, r3, #6
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	793b      	ldrb	r3, [r7, #4]
 80006f0:	f362 0382 	bfi	r3, r2, #2, #1
 80006f4:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART2->SR & (UART_TXE_FLAG) )  >> 7   );
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <USART2_IRQHandler+0x68>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	09db      	lsrs	r3, r3, #7
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	793b      	ldrb	r3, [r7, #4]
 8000704:	f362 0300 	bfi	r3, r2, #0, #1
 8000708:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[1](irq_src);
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <USART2_IRQHandler+0x6c>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	7938      	ldrb	r0, [r7, #4]
 8000710:	4798      	blx	r3
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40004400 	.word	0x40004400
 8000720:	200000ac 	.word	0x200000ac

08000724 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART3->SR & (UART_PE_FLAG) )   >> 1   );
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <USART3_IRQHandler+0x68>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	085b      	lsrs	r3, r3, #1
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	793b      	ldrb	r3, [r7, #4]
 8000738:	f362 03c3 	bfi	r3, r2, #3, #1
 800073c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART3->SR & (UART_RXNE_FLAG) ) >> 5   );
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <USART3_IRQHandler+0x68>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	793b      	ldrb	r3, [r7, #4]
 800074c:	f362 0341 	bfi	r3, r2, #1, #1
 8000750:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART3->SR & (UART_TC_FLAG) )   >> 6   );
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <USART3_IRQHandler+0x68>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	099b      	lsrs	r3, r3, #6
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	793b      	ldrb	r3, [r7, #4]
 8000760:	f362 0382 	bfi	r3, r2, #2, #1
 8000764:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART3->SR & (UART_TXE_FLAG) )  >> 7   );
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <USART3_IRQHandler+0x68>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	09db      	lsrs	r3, r3, #7
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	f362 0300 	bfi	r3, r2, #0, #1
 8000778:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[2](irq_src);
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <USART3_IRQHandler+0x6c>)
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	7938      	ldrb	r0, [r7, #4]
 8000780:	4798      	blx	r3
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40004800 	.word	0x40004800
 8000790:	200000ac 	.word	0x200000ac

08000794 <NMI_Handler>:

#include "CortexMx_OS_Porting.h"


void NMI_Handler()
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
	while(1);
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:
}

void HardFault_Handler()
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
	while(1);
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:
}

void MemManage_Handler()
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	while(1);
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:
}

void BusFault_Handler()
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
	while(1);
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:
}

void UsageFault_Handler()
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	while(1);
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>
	...

080007b4 <PendSV_Handler>:
}

void PendSV_Handler()
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	 // Clear PendSV
	 SCB->ICSR = SCB_ICSR_PENDSVCLR_Msk;
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <PendSV_Handler+0x14>)
 80007ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007be:	605a      	str	r2, [r3, #4]

}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <OS_SVC_Services>:

 void OS_SVC_Services(int* StackFramePointer )
 {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 	// OS_SVC_Set Stack -> ro -> StackFramePointer
 	// OS_SVC_Set Stack : r0,r1,r2,23,r12,LR,PC,XPSR

 	unsigned char SVC_Number;

 	SVC_Number =  *( (unsigned char*)( (unsigned char*)(StackFramePointer[6]) -2) );
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3318      	adds	r3, #24
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3b02      	subs	r3, #2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	73fb      	strb	r3, [r7, #15]

 	OS_SVC(SVC_Number);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f906 	bl	80009f4 <OS_SVC>

 }
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SVC_Handler>:
 	}
 }

  __attribute(( naked )) void SVC_Handler()
 {
 	__asm("TST lr,0x4   \n\t"
 80007f0:	f01e 0f04 	tst.w	lr, #4
 80007f4:	bf0c      	ite	eq
 80007f6:	f3ef 8008 	mrseq	r0, MSP
 80007fa:	f3ef 8009 	mrsne	r0, PSP
 80007fe:	f7ff bfe5 	b.w	80007cc <OS_SVC_Services>
 		  "ITE EQ       \n\t"
 		  "MRSEQ r0,MSP \n\t"
 		  "MRSNE r0,PSP \n\t"
 		  "b OS_SVC_Services");

 }
 8000802:	bf00      	nop

08000804 <FIFO_Init>:

#include "OS_Queue.h"


FIFO_state FIFO_Init(FIFO_t* new ,element_type* pBuffer, uint32_t Length)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
	if( !pBuffer )
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <FIFO_Init+0x16>
		return FIFO_NULL;
 8000816:	2301      	movs	r3, #1
 8000818:	e00f      	b.n	800083a <FIFO_Init+0x36>

	new->base = pBuffer;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	601a      	str	r2, [r3, #0]
	new->head = pBuffer;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	605a      	str	r2, [r3, #4]
	new->tail = pBuffer;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	609a      	str	r2, [r3, #8]
	new->length = Length;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	611a      	str	r2, [r3, #16]
	new->count = 0;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	2200      	movs	r2, #0
 8000836:	731a      	strb	r2, [r3, #12]

	return FIFO_NO_ERROR;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <MYRTOS_Init>:
}sOS_ControlBlock;



eOS_ErrorState MYRTOS_Init()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
	eOS_ErrorState err = NOERROR;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]

	// Update OS Mode ( OS_SUSPEND )
	sOS_ControlBlock.eOS_Modes = OS_SUSPEND;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MYRTOS_Init+0x5c>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	// Specify OS Main Stack
	MYRTOS_Create_MainStack();
 8000856:	f000 f831 	bl	80008bc <MYRTOS_Create_MainStack>
	// Create OS Ready Queue
	if( FIFO_Init(&ReadyQueue ,ReadyQueue_FIFO, 100) != FIFO_NO_ERROR )
 800085a:	2264      	movs	r2, #100	; 0x64
 800085c:	4911      	ldr	r1, [pc, #68]	; (80008a4 <MYRTOS_Init+0x60>)
 800085e:	4812      	ldr	r0, [pc, #72]	; (80008a8 <MYRTOS_Init+0x64>)
 8000860:	f7ff ffd0 	bl	8000804 <FIFO_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <MYRTOS_Init+0x2c>
	{
		err += OS_QUEUE_INIT_ERROR;
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	3301      	adds	r3, #1
 800086e:	71fb      	strb	r3, [r7, #7]
	}
	//Configure IDLE Task
	strcpy( TCB_IDLE_Task.TaskName , "Idle_Task" );
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MYRTOS_Init+0x68>)
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <MYRTOS_Init+0x6c>)
 8000874:	ca07      	ldmia	r2, {r0, r1, r2}
 8000876:	c303      	stmia	r3!, {r0, r1}
 8000878:	801a      	strh	r2, [r3, #0]
	TCB_IDLE_Task.Priority = 255;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MYRTOS_Init+0x70>)
 800087c:	22ff      	movs	r2, #255	; 0xff
 800087e:	711a      	strb	r2, [r3, #4]
	TCB_IDLE_Task.pTaskEntry = MYRTOS_IDLE_Task;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MYRTOS_Init+0x70>)
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <MYRTOS_Init+0x74>)
 8000884:	609a      	str	r2, [r3, #8]
	TCB_IDLE_Task.Stack_Size = 300;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MYRTOS_Init+0x70>)
 8000888:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800088c:	601a      	str	r2, [r3, #0]

	MYRTOS_CreateTask(&TCB_IDLE_Task);
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MYRTOS_Init+0x70>)
 8000890:	f000 f836 	bl	8000900 <MYRTOS_CreateTask>

	return err;
 8000894:	79fb      	ldrb	r3, [r7, #7]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000029c 	.word	0x2000029c
 80008a4:	200000cc 	.word	0x200000cc
 80008a8:	200000b8 	.word	0x200000b8
 80008ac:	20000274 	.word	0x20000274
 80008b0:	08000bd0 	.word	0x08000bd0
 80008b4:	2000025c 	.word	0x2000025c
 80008b8:	080008f9 	.word	0x080008f9

080008bc <MYRTOS_Create_MainStack>:

void MYRTOS_Create_MainStack()
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
	sOS_ControlBlock._S_MSP_Task = (unsigned int)&_estack;
 80008c0:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <MYRTOS_Create_MainStack+0x34>)
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MYRTOS_Create_MainStack+0x38>)
 80008c4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	sOS_ControlBlock._E_MSP_Task = ( sOS_ControlBlock._S_MSP_Task - MainStackSize ) ;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MYRTOS_Create_MainStack+0x38>)
 80008ca:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80008ce:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <MYRTOS_Create_MainStack+0x38>)
 80008d4:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	// Align 8 bytes as space between Main stack and Tasks stack
	sOS_ControlBlock.PSP_TaskLocator = ( sOS_ControlBlock._E_MSP_Task - 8 );
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MYRTOS_Create_MainStack+0x38>)
 80008da:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80008de:	3b08      	subs	r3, #8
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <MYRTOS_Create_MainStack+0x38>)
 80008e2:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20002800 	.word	0x20002800
 80008f4:	2000029c 	.word	0x2000029c

080008f8 <MYRTOS_IDLE_Task>:

void MYRTOS_IDLE_Task()
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("NOP");
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <MYRTOS_IDLE_Task+0x4>

08000900 <MYRTOS_CreateTask>:
	}
}

eOS_ErrorState MYRTOS_CreateTask(sOS_Task_ControlBlock* Task_TCB)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	eOS_ErrorState err = NOERROR;
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]

	// Create Task Stack
	Task_TCB->_S_PSP_Task = sOS_ControlBlock.PSP_TaskLocator;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MYRTOS_CreateTask+0x6c>)
 800090e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60da      	str	r2, [r3, #12]
	Task_TCB->_E_PSP_Task = ( Task_TCB->_S_PSP_Task - Task_TCB->Stack_Size );
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	1ad2      	subs	r2, r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	611a      	str	r2, [r3, #16]

	// Check if Task Stack size exceeded the stack limit
	if( Task_TCB->_E_PSP_Task < (unsigned int)&_eheap )
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	691b      	ldr	r3, [r3, #16]
 8000928:	4a11      	ldr	r2, [pc, #68]	; (8000970 <MYRTOS_CreateTask+0x70>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d201      	bcs.n	8000932 <MYRTOS_CreateTask+0x32>
	{
		return TASK_EXCEED_STACKSIZE;
 800092e:	2302      	movs	r3, #2
 8000930:	e018      	b.n	8000964 <MYRTOS_CreateTask+0x64>
	}

	// Align 8 bytes as space between Task stack and Next Task stack
	sOS_ControlBlock.PSP_TaskLocator = ( Task_TCB->_E_PSP_Task - 8 );
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	691b      	ldr	r3, [r3, #16]
 8000936:	3b08      	subs	r3, #8
 8000938:	4a0c      	ldr	r2, [pc, #48]	; (800096c <MYRTOS_CreateTask+0x6c>)
 800093a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	// Initialize PSP Task Stack
	MYRTOS_Create_TaskStack(Task_TCB);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f818 	bl	8000974 <MYRTOS_Create_TaskStack>

	// Add Task to Task list
	sOS_ControlBlock.OS_Tasks[sOS_ControlBlock.NoOfActiveTasks++] = Task_TCB;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MYRTOS_CreateTask+0x6c>)
 8000946:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <MYRTOS_CreateTask+0x6c>)
 800094e:	f8c1 219c 	str.w	r2, [r1, #412]	; 0x19c
 8000952:	4906      	ldr	r1, [pc, #24]	; (800096c <MYRTOS_CreateTask+0x6c>)
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// Update Task State
	Task_TCB->eOS_TaskState = TASK_SUSPEND;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

 	return err;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000029c 	.word	0x2000029c
 8000970:	20000b08 	.word	0x20000b08

08000974 <MYRTOS_Create_TaskStack>:

void MYRTOS_Create_TaskStack(sOS_Task_ControlBlock* Task_TCB)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	 * r1
	 * r0
	 * =====
	 * r4,r5,r6,r7,r8,r9,r10,r11 -> ( Saved/Restored Manually)
	 */
	Task_TCB->Current_PSP_Location = (unsigned int*)Task_TCB->_S_PSP_Task;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	461a      	mov	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	615a      	str	r2, [r3, #20]

	Task_TCB->Current_PSP_Location--;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	1f1a      	subs	r2, r3, #4
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	615a      	str	r2, [r3, #20]
	// Dummy XPSR where XPSR.T=1 -> to avoid Bus Fault
	*(Task_TCB->Current_PSP_Location) = 0x01000000;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000998:	601a      	str	r2, [r3, #0]

	Task_TCB->Current_PSP_Location--;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	1f1a      	subs	r2, r3, #4
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	615a      	str	r2, [r3, #20]
	// PC -> Execution starts from the Task Entry
	*(Task_TCB->Current_PSP_Location) = (unsigned int)Task_TCB->pTaskEntry;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	601a      	str	r2, [r3, #0]

	Task_TCB->Current_PSP_Location--;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	1f1a      	subs	r2, r3, #4
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	615a      	str	r2, [r3, #20]
	// Dummy LR -> Processor reset value
	*(Task_TCB->Current_PSP_Location) = 0xFFFFFFFF;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	601a      	str	r2, [r3, #0]

	for( int i = 0 ; i < 13 ; i++ )
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e00b      	b.n	80009e0 <MYRTOS_Create_TaskStack+0x6c>
	{
		Task_TCB->Current_PSP_Location--;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	1f1a      	subs	r2, r3, #4
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	615a      	str	r2, [r3, #20]
		// r(0....12)
		*(Task_TCB->Current_PSP_Location) = 0;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
	for( int i = 0 ; i < 13 ; i++ )
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3301      	adds	r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b0c      	cmp	r3, #12
 80009e4:	ddf0      	ble.n	80009c8 <MYRTOS_Create_TaskStack+0x54>
	}

}
 80009e6:	bf00      	nop
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
	...

080009f4 <OS_SVC>:

void OS_SVC(unsigned char SVC_Number)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
 	switch( SVC_Number )
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d80c      	bhi.n	8000a1e <OS_SVC+0x2a>
 8000a04:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <OS_SVC+0x18>)
 8000a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0a:	bf00      	nop
 8000a0c:	08000a1d 	.word	0x08000a1d
 8000a10:	08000a1d 	.word	0x08000a1d
 8000a14:	08000a1d 	.word	0x08000a1d
 8000a18:	08000a1d 	.word	0x08000a1d
 	{
 	case 0:
 		//Activate
 		break;
 8000a1c:	bf00      	nop
 		break;
 	case 3:
 	   //PENDSV
 		break;
 	}
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <Task1>:
#include "OS_Scheduler.h"

sOS_Task_ControlBlock TCB_Task1 , TCB_Task2 , TCB_Task3;

void Task1()
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	while(1)
 8000a2c:	e7fe      	b.n	8000a2c <Task1+0x4>

08000a2e <Task2>:
		//Task1 Code
	}
}

void Task2()
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
	while(1)
 8000a32:	e7fe      	b.n	8000a32 <Task2+0x4>

08000a34 <Task3>:
		//Task2 Code
	}
}

void Task3()
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	while(1)
 8000a38:	e7fe      	b.n	8000a38 <Task3+0x4>
	...

08000a3c <main>:
		//Task3 Code
	}
}

int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
	eOS_ErrorState err = NOERROR;
 8000a42:	2300      	movs	r3, #0
 8000a44:	71fb      	strb	r3, [r7, #7]

	// HW_Init (Initialize clock tree , Reset controller)

	// Init OS
	if( MYRTOS_Init() != NOERROR )
 8000a46:	f7ff fefd 	bl	8000844 <MYRTOS_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d000      	beq.n	8000a52 <main+0x16>
		while(1);
 8000a50:	e7fe      	b.n	8000a50 <main+0x14>

	//Configure Task1
	strcpy( TCB_Task1.TaskName , "Task1" );
 8000a52:	4b26      	ldr	r3, [pc, #152]	; (8000aec <main+0xb0>)
 8000a54:	4a26      	ldr	r2, [pc, #152]	; (8000af0 <main+0xb4>)
 8000a56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a5a:	6018      	str	r0, [r3, #0]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	8019      	strh	r1, [r3, #0]
	TCB_Task1.Priority = 3;
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <main+0xb8>)
 8000a62:	2203      	movs	r2, #3
 8000a64:	711a      	strb	r2, [r3, #4]
	TCB_Task1.pTaskEntry = Task1;
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <main+0xb8>)
 8000a68:	4a23      	ldr	r2, [pc, #140]	; (8000af8 <main+0xbc>)
 8000a6a:	609a      	str	r2, [r3, #8]
	TCB_Task1.Stack_Size = 1024;
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <main+0xb8>)
 8000a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a72:	601a      	str	r2, [r3, #0]

	//Configure Task2
	strcpy( TCB_Task2.TaskName , "Task2" );
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <main+0xc0>)
 8000a76:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <main+0xc4>)
 8000a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a7c:	6018      	str	r0, [r3, #0]
 8000a7e:	3304      	adds	r3, #4
 8000a80:	8019      	strh	r1, [r3, #0]
	TCB_Task2.Priority = 3;
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <main+0xc8>)
 8000a84:	2203      	movs	r2, #3
 8000a86:	711a      	strb	r2, [r3, #4]
	TCB_Task2.pTaskEntry = Task2;
 8000a88:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <main+0xc8>)
 8000a8a:	4a1f      	ldr	r2, [pc, #124]	; (8000b08 <main+0xcc>)
 8000a8c:	609a      	str	r2, [r3, #8]
	TCB_Task2.Stack_Size = 1024;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <main+0xc8>)
 8000a90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a94:	601a      	str	r2, [r3, #0]

	//Configure Task3
	strcpy( TCB_Task3.TaskName , "Task3" );
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <main+0xd0>)
 8000a98:	4a1d      	ldr	r2, [pc, #116]	; (8000b10 <main+0xd4>)
 8000a9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a9e:	6018      	str	r0, [r3, #0]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	8019      	strh	r1, [r3, #0]
	TCB_Task3.Priority = 3;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <main+0xd8>)
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	711a      	strb	r2, [r3, #4]
	TCB_Task3.pTaskEntry = Task3;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <main+0xd8>)
 8000aac:	4a1a      	ldr	r2, [pc, #104]	; (8000b18 <main+0xdc>)
 8000aae:	609a      	str	r2, [r3, #8]
	TCB_Task3.Stack_Size = 1024;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <main+0xd8>)
 8000ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab6:	601a      	str	r2, [r3, #0]

	err += MYRTOS_CreateTask(&TCB_Task1);
 8000ab8:	480e      	ldr	r0, [pc, #56]	; (8000af4 <main+0xb8>)
 8000aba:	f7ff ff21 	bl	8000900 <MYRTOS_CreateTask>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	71fb      	strb	r3, [r7, #7]
	err += MYRTOS_CreateTask(&TCB_Task2);
 8000ac8:	480e      	ldr	r0, [pc, #56]	; (8000b04 <main+0xc8>)
 8000aca:	f7ff ff19 	bl	8000900 <MYRTOS_CreateTask>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	71fb      	strb	r3, [r7, #7]
	err += MYRTOS_CreateTask(&TCB_Task3);
 8000ad8:	480e      	ldr	r0, [pc, #56]	; (8000b14 <main+0xd8>)
 8000ada:	f7ff ff11 	bl	8000900 <MYRTOS_CreateTask>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	71fb      	strb	r3, [r7, #7]


	while(1)
 8000ae8:	e7fe      	b.n	8000ae8 <main+0xac>
 8000aea:	bf00      	nop
 8000aec:	20000460 	.word	0x20000460
 8000af0:	08000bdc 	.word	0x08000bdc
 8000af4:	20000448 	.word	0x20000448
 8000af8:	08000a29 	.word	0x08000a29
 8000afc:	200004a0 	.word	0x200004a0
 8000b00:	08000be4 	.word	0x08000be4
 8000b04:	20000488 	.word	0x20000488
 8000b08:	08000a2f 	.word	0x08000a2f
 8000b0c:	200004e0 	.word	0x200004e0
 8000b10:	08000bec 	.word	0x08000bec
 8000b14:	200004c8 	.word	0x200004c8
 8000b18:	08000a35 	.word	0x08000a35

08000b1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	; (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	; (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b4a:	f000 f811 	bl	8000b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4e:	f7ff ff75 	bl	8000a3c <main>

08000b52 <LoopForever>:

LoopForever:
    b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
  ldr   r0, =_estack
 8000b54:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b60:	08000bfc 	.word	0x08000bfc
  ldr r2, =_sbss
 8000b64:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b68:	20000508 	.word	0x20000508

08000b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_2_IRQHandler>
	...

08000b70 <__libc_init_array>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	2600      	movs	r6, #0
 8000b74:	4d0c      	ldr	r5, [pc, #48]	; (8000ba8 <__libc_init_array+0x38>)
 8000b76:	4c0d      	ldr	r4, [pc, #52]	; (8000bac <__libc_init_array+0x3c>)
 8000b78:	1b64      	subs	r4, r4, r5
 8000b7a:	10a4      	asrs	r4, r4, #2
 8000b7c:	42a6      	cmp	r6, r4
 8000b7e:	d109      	bne.n	8000b94 <__libc_init_array+0x24>
 8000b80:	f000 f81a 	bl	8000bb8 <_init>
 8000b84:	2600      	movs	r6, #0
 8000b86:	4d0a      	ldr	r5, [pc, #40]	; (8000bb0 <__libc_init_array+0x40>)
 8000b88:	4c0a      	ldr	r4, [pc, #40]	; (8000bb4 <__libc_init_array+0x44>)
 8000b8a:	1b64      	subs	r4, r4, r5
 8000b8c:	10a4      	asrs	r4, r4, #2
 8000b8e:	42a6      	cmp	r6, r4
 8000b90:	d105      	bne.n	8000b9e <__libc_init_array+0x2e>
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
 8000b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b98:	4798      	blx	r3
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	e7ee      	b.n	8000b7c <__libc_init_array+0xc>
 8000b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba2:	4798      	blx	r3
 8000ba4:	3601      	adds	r6, #1
 8000ba6:	e7f2      	b.n	8000b8e <__libc_init_array+0x1e>
 8000ba8:	08000bf4 	.word	0x08000bf4
 8000bac:	08000bf4 	.word	0x08000bf4
 8000bb0:	08000bf4 	.word	0x08000bf4
 8000bb4:	08000bf8 	.word	0x08000bf8

08000bb8 <_init>:
 8000bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bba:	bf00      	nop
 8000bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bbe:	bc08      	pop	{r3}
 8000bc0:	469e      	mov	lr, r3
 8000bc2:	4770      	bx	lr

08000bc4 <_fini>:
 8000bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc6:	bf00      	nop
 8000bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bca:	bc08      	pop	{r3}
 8000bcc:	469e      	mov	lr, r3
 8000bce:	4770      	bx	lr

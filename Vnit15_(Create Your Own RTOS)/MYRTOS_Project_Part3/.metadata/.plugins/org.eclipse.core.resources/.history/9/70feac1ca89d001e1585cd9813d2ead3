/*
 * OS_Queue.c
 *
 *  Created on: Dec 13, 2023
 *      Author: Abdelaziz Maher
 */


#include "OS_Queue.h"

//
//FIFO_state FIFO_Init(FIFO_t* new ,element_type* pBuffer, uint32_t Length)
//{
//	if( !pBuffer )
//		return FIFO_NULL;
//
//	new->base = pBuffer;
//	new->head = pBuffer;
//	new->tail = pBuffer;
//	new->length = Length;
//	new->count = 0;
//
//	return FIFO_NO_ERROR;
//}
//
//FIFO_state FIFO_Enqueue(FIFO_t* add , element_type item )
//{
//    if( FIFO_IsFull(add) == FIFO_FULL )
//        return FIFO_FULL;
//    else if( FIFO_IsFull(add) == FIFO_NULL )
//    	return FIFO_NULL;
//
//    *(add->head) = item;
//    add->count++;
//
//    if( add->head == ( add->base + ( add->length*sizeof(element_type) ) ) )
//    	add->head = add->base;
//    else
//    	{add->head++;}
//
//	return FIFO_NO_ERROR;
//}
//
//FIFO_state FIFO_Dequeue(FIFO_t* remove, element_type* item)
//{
//    if( !(remove->base) || !(remove->head) || !(remove->tail) )
//        return FIFO_NULL;
//
//    if(remove->count == 0)
//        return FIFO_EMPTY;
//
//    *item = *(remove->tail);
//    remove->count--;
//
//    if( remove->tail == ( remove->base + ( remove->length*sizeof(element_type) ) ) )
//    	remove->tail = remove->base;
//    else
//    	remove->tail++;
//
//    return FIFO_NO_ERROR;
//}
//
//FIFO_state FIFO_IsFull(FIFO_t* check)
//{
//    if( !(check->base) || !(check->head) || !(check->tail) )
//        return FIFO_NULL;
//
//    if( check->count == check->length )
//    	return FIFO_FULL;
//
//    return FIFO_NO_ERROR;
//}
/* *********************************** */
Buffer_status FIFO_Init (FIFO_t* fifo,element_type* buff , unsigned int length){

	if(!buff )
		return FIFO_NULL;

	fifo->base = buff ;
	fifo->head = fifo->base ;
	fifo->tail = fifo->base ;
	fifo->length = length;
	fifo->counter=0;

	return FIFO_NO_ERROR;

}

/* *********************************** */

Buffer_status FIFO_Enqueue (FIFO_t* fifo,element_type item){

	/* fifo null*/

	if (!fifo->base || !fifo->length)
		return FIFO_NULL;
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
		return FIFO_FULL;

	*(fifo->tail)=item;
	fifo->counter++;

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
		fifo->tail = fifo->base;
	else
		fifo->tail++;

	return FIFO_NO_ERROR;


}

/* *********************************** */

Buffer_status FIFO_Dequeue (FIFO_t* fifo, element_type* item){
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
		return FIFO_NULL;

	/* fifo empty */
	if (fifo->head == fifo->tail)
		return FIFO_EMPTY;



	*item = *(fifo->head);
	fifo->counter--;

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
		fifo->head = fifo->base;
	else
		fifo->head++;

	return FIFO_NO_ERROR;
}




/* *********************************** */

Buffer_status FIFO_is_full (FIFO_t* fifo){

	if(!fifo->head || !fifo->base || !fifo->tail)
		return FIFO_NULL;
	if(fifo->counter == fifo->length)
		return FIFO_FULL;

	return FIFO_NO_ERROR;
}

/* *********************************** */

void FIFO_print (FIFO_t* fifo){

	//element_type* temp;
	//int i;
	//if(fifo->counter == 0)
	//	printf("fifo is empty");
	//else
	//	{
	//		temp=fifo->tail;
	//		printf("\n ==== fifo print ====\n");
	//			for(i=0 ; i<fifo->length ; i++){
	//				printf("\t %x  \n",*temp);
	//					temp ++;
	//			}
	//
	//
	//	}
}

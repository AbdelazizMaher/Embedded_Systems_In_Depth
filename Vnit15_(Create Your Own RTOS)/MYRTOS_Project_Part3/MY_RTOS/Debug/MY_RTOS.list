
MY_RTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000135c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800148c  0800148c  0001148c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014b8  080014b8  000114c0  2**0
                  CONTENTS
  4 .ARM          00000000  080014b8  080014b8  000114c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014b8  080014c0  000114c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014b8  080014b8  000114b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014bc  080014bc  000114bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000114c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000000  080014c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  080014c0  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000114c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000032fe  00000000  00000000  000114e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e83  00000000  00000000  000147e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000017b0  00000000  00000000  0001566a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000390  00000000  00000000  00016e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000308  00000000  00000000  000171b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000250e  00000000  00000000  000174b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004c19  00000000  00000000  000199c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00013685  00000000  00000000  0001e5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00031c64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c2c  00000000  00000000  00031cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001474 	.word	0x08001474

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001474 	.word	0x08001474

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <EXTI0_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void EXTI0_IRQHandler()
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	EXTI->PR |= ( 1 << 0 );
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018a:	695b      	ldr	r3, [r3, #20]
 800018c:	4a04      	ldr	r2, [pc, #16]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018e:	f043 0301 	orr.w	r3, r3, #1
 8000192:	6153      	str	r3, [r2, #20]

	P_IRQ_Callback_g[0]();
 8000194:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <EXTI0_IRQHandler+0x20>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4798      	blx	r3
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010400 	.word	0x40010400
 80001a4:	2000001c 	.word	0x2000001c

080001a8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001ae:	695b      	ldr	r3, [r3, #20]
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001b2:	f043 0302 	orr.w	r3, r3, #2
 80001b6:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[1]();
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <EXTI1_IRQHandler+0x20>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	4798      	blx	r3
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010400 	.word	0x40010400
 80001c8:	2000001c 	.word	0x2000001c

080001cc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d2:	695b      	ldr	r3, [r3, #20]
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[2]();
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <EXTI2_IRQHandler+0x20>)
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	4798      	blx	r3
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010400 	.word	0x40010400
 80001ec:	2000001c 	.word	0x2000001c

080001f0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[3]();
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <EXTI3_IRQHandler+0x20>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010400 	.word	0x40010400
 8000210:	2000001c 	.word	0x2000001c

08000214 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[4]();
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <EXTI4_IRQHandler+0x20>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	4798      	blx	r3
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010400 	.word	0x40010400
 8000234:	2000001c 	.word	0x2000001c

08000238 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5 ; P_IRQ_Callback_g[5](); };
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	f003 0320 	and.w	r3, r3, #32
 8000244:	2b00      	cmp	r3, #0
 8000246:	d008      	beq.n	800025a <EXTI9_5_IRQHandler+0x22>
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a22      	ldr	r2, [pc, #136]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6153      	str	r3, [r2, #20]
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6 ; P_IRQ_Callback_g[6](); };
 800025a:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000262:	2b00      	cmp	r3, #0
 8000264:	d008      	beq.n	8000278 <EXTI9_5_IRQHandler+0x40>
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a1b      	ldr	r2, [pc, #108]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7 ; P_IRQ_Callback_g[7](); };
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000280:	2b00      	cmp	r3, #0
 8000282:	d008      	beq.n	8000296 <EXTI9_5_IRQHandler+0x5e>
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800028a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800028e:	6153      	str	r3, [r2, #20]
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000292:	69db      	ldr	r3, [r3, #28]
 8000294:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8 ; P_IRQ_Callback_g[8](); };
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d008      	beq.n	80002b4 <EXTI9_5_IRQHandler+0x7c>
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ac:	6153      	str	r3, [r2, #20]
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002b0:	6a1b      	ldr	r3, [r3, #32]
 80002b2:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9 ; P_IRQ_Callback_g[9](); };
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d008      	beq.n	80002d2 <EXTI9_5_IRQHandler+0x9a>
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ca:	6153      	str	r3, [r2, #20]
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d0:	4798      	blx	r3
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010400 	.word	0x40010400
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10 ; P_IRQ_Callback_g[10](); };
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d008      	beq.n	8000302 <EXTI15_10_IRQHandler+0x22>
 80002f0:	4b2a      	ldr	r3, [pc, #168]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a29      	ldr	r2, [pc, #164]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6153      	str	r3, [r2, #20]
 80002fc:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 80002fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000300:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11 ; P_IRQ_Callback_g[11](); };
 8000302:	4b26      	ldr	r3, [pc, #152]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800030a:	2b00      	cmp	r3, #0
 800030c:	d008      	beq.n	8000320 <EXTI15_10_IRQHandler+0x40>
 800030e:	4b23      	ldr	r3, [pc, #140]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a22      	ldr	r2, [pc, #136]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 800031c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031e:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12 ; P_IRQ_Callback_g[12](); };
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000328:	2b00      	cmp	r3, #0
 800032a:	d008      	beq.n	800033e <EXTI15_10_IRQHandler+0x5e>
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	4a1a      	ldr	r2, [pc, #104]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000336:	6153      	str	r3, [r2, #20]
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13 ; P_IRQ_Callback_g[13](); };
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000346:	2b00      	cmp	r3, #0
 8000348:	d008      	beq.n	800035c <EXTI15_10_IRQHandler+0x7c>
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000354:	6153      	str	r3, [r2, #20]
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035a:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14 ; P_IRQ_Callback_g[14](); };
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000364:	2b00      	cmp	r3, #0
 8000366:	d008      	beq.n	800037a <EXTI15_10_IRQHandler+0x9a>
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800036e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000372:	6153      	str	r3, [r2, #20]
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000378:	4798      	blx	r3
	if( EXTI->PR & 1<<15 ) { EXTI->PR |= 1<<15 ; P_IRQ_Callback_g[15](); };
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000382:	2b00      	cmp	r3, #0
 8000384:	d008      	beq.n	8000398 <EXTI15_10_IRQHandler+0xb8>
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800038c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000396:	4798      	blx	r3
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40010400 	.word	0x40010400
 80003a0:	2000001c 	.word	0x2000001c

080003a4 <I2C_ClearADDRFlag>:
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}

void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	dummy_read = pI2Cx->SR1;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	60fb      	str	r3, [r7, #12]
	dummy_read = pI2Cx->SR2;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	60fb      	str	r3, [r7, #12]
	(void)dummy_read;
}
 80003b8:	bf00      	nop
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
	...

080003c4 <I2C1_EV_IRQHandler>:

	return BitStatus;
}

void I2C1_EV_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
	I2C_TypeDef *I2Cx = I2C1;
 80003ca:	4b35      	ldr	r3, [pc, #212]	; (80004a0 <I2C1_EV_IRQHandler+0xdc>)
 80003cc:	60fb      	str	r3, [r7, #12]
	// Interrupt Handling for both master and slave
	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003d6:	60bb      	str	r3, [r7, #8]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003e0:	607b      	str	r3, [r7, #4]
	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f003 0310 	and.w	r3, r3, #16
 80003ea:	603b      	str	r3, [r7, #0]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d00a      	beq.n	8000408 <I2C1_EV_IRQHandler+0x44>
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d007      	beq.n	8000408 <I2C1_EV_IRQHandler+0x44>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000400:	2100      	movs	r1, #0
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f000 f860 	bl	80004c8 <Slave_States>
	}
	//----------------------------------------------------------
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	f003 0302 	and.w	r3, r3, #2
 8000410:	603b      	str	r3, [r7, #0]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode  : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d00f      	beq.n	8000438 <I2C1_EV_IRQHandler+0x74>
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d00c      	beq.n	8000438 <I2C1_EV_IRQHandler+0x74>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	2b00      	cmp	r3, #0
 8000428:	d106      	bne.n	8000438 <I2C1_EV_IRQHandler+0x74>
		}
		else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			I2C_ClearADDRFlag(I2Cx);
 800042a:	68f8      	ldr	r0, [r7, #12]
 800042c:	f7ff ffba 	bl	80003a4 <I2C_ClearADDRFlag>
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000430:	2102      	movs	r1, #2
 8000432:	68f8      	ldr	r0, [r7, #12]
 8000434:	f000 f848 	bl	80004c8 <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3 = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000440:	603b      	str	r3, [r7, #0]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00f      	beq.n	8000468 <I2C1_EV_IRQHandler+0xa4>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d00c      	beq.n	8000468 <I2C1_EV_IRQHandler+0xa4>
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d009      	beq.n	8000468 <I2C1_EV_IRQHandler+0xa4>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0301 	and.w	r3, r3, #1
 800045c:	2b00      	cmp	r3, #0
 800045e:	d103      	bne.n	8000468 <I2C1_EV_IRQHandler+0xa4>

		}
		else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000460:	2103      	movs	r1, #3
 8000462:	68f8      	ldr	r0, [r7, #12]
 8000464:	f000 f830 	bl	80004c8 <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3 = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000470:	603b      	str	r3, [r7, #0]
	// Handle For interrupt generated by SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d00f      	beq.n	8000498 <I2C1_EV_IRQHandler+0xd4>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d00c      	beq.n	8000498 <I2C1_EV_IRQHandler+0xd4>
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d009      	beq.n	8000498 <I2C1_EV_IRQHandler+0xd4>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	2b00      	cmp	r3, #0
 800048e:	d103      	bne.n	8000498 <I2C1_EV_IRQHandler+0xd4>
			//The device is master
		}
		else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000490:	2104      	movs	r1, #4
 8000492:	68f8      	ldr	r0, [r7, #12]
 8000494:	f000 f818 	bl	80004c8 <Slave_States>
		}
	}

}
 8000498:	bf00      	nop
 800049a:	3710      	adds	r7, #16
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40005400 	.word	0x40005400

080004a4 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <Slave_States>:



void Slave_States(I2C_TypeDef* I2Cx  ,eI2C_Slave_State State)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a32      	ldr	r2, [pc, #200]	; (80005a0 <Slave_States+0xd8>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	bf14      	ite	ne
 80004dc:	2301      	movne	r3, #1
 80004de:	2300      	moveq	r3, #0
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]

	switch ( State )
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	2b04      	cmp	r3, #4
 80004e8:	d856      	bhi.n	8000598 <Slave_States+0xd0>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <Slave_States+0x28>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	0800050b 	.word	0x0800050b
 80004f4:	08000505 	.word	0x08000505
 80004f8:	0800052f 	.word	0x0800052f
 80004fc:	08000547 	.word	0x08000547
 8000500:	0800056b 	.word	0x0800056b
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else
		}

		break ;
 8000508:	e046      	b.n	8000598 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	2b00      	cmp	r3, #0
 8000514:	d03b      	beq.n	800058e <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_STOP) ;
 8000516:	7bfa      	ldrb	r2, [r7, #15]
 8000518:	4922      	ldr	r1, [pc, #136]	; (80005a4 <Slave_States+0xdc>)
 800051a:	4613      	mov	r3, r2
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	4413      	add	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	440b      	add	r3, r1
 8000524:	3320      	adds	r3, #32
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2000      	movs	r0, #0
 800052a:	4798      	blx	r3
		}

		break ;
 800052c:	e02f      	b.n	800058e <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_ADDR_Matched) ;
 800052e:	7bfa      	ldrb	r2, [r7, #15]
 8000530:	491c      	ldr	r1, [pc, #112]	; (80005a4 <Slave_States+0xdc>)
 8000532:	4613      	mov	r3, r2
 8000534:	00db      	lsls	r3, r3, #3
 8000536:	4413      	add	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	440b      	add	r3, r1
 800053c:	3320      	adds	r3, #32
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2002      	movs	r0, #2
 8000542:	4798      	blx	r3

		break ;
 8000544:	e028      	b.n	8000598 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	2b00      	cmp	r3, #0
 8000550:	d01f      	beq.n	8000592 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_DATA_REQ) ;
 8000552:	7bfa      	ldrb	r2, [r7, #15]
 8000554:	4913      	ldr	r1, [pc, #76]	; (80005a4 <Slave_States+0xdc>)
 8000556:	4613      	mov	r3, r2
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	4413      	add	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	440b      	add	r3, r1
 8000560:	3320      	adds	r3, #32
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2003      	movs	r0, #3
 8000566:	4798      	blx	r3
		}

		break ;
 8000568:	e013      	b.n	8000592 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0304 	and.w	r3, r3, #4
 8000572:	2b00      	cmp	r3, #0
 8000574:	d10f      	bne.n	8000596 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_SlaveEvent_IRQ_CallBack (I2C_EV_DATA_RCV) ;
 8000576:	7bfa      	ldrb	r2, [r7, #15]
 8000578:	490a      	ldr	r1, [pc, #40]	; (80005a4 <Slave_States+0xdc>)
 800057a:	4613      	mov	r3, r2
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	4413      	add	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	3320      	adds	r3, #32
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2004      	movs	r0, #4
 800058a:	4798      	blx	r3
		}

		break ;
 800058c:	e003      	b.n	8000596 <Slave_States+0xce>
		break ;
 800058e:	bf00      	nop
 8000590:	e002      	b.n	8000598 <Slave_States+0xd0>
		break ;
 8000592:	bf00      	nop
 8000594:	e000      	b.n	8000598 <Slave_States+0xd0>
		break ;
 8000596:	bf00      	nop
	}
	}

}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40005400 	.word	0x40005400
 80005a4:	2000005c 	.word	0x2000005c

080005a8 <SPI1_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void SPI1_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	struct sSPI_IRQ_SRC irq_src;

	irq_src.RXNE  = ( ( SPI1->SR & (SPI_RXNE_FLAG) ) >> 0   );
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <SPI1_IRQHandler+0x50>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	793b      	ldrb	r3, [r7, #4]
 80005ba:	f362 0341 	bfi	r3, r2, #1, #1
 80005be:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( SPI1->SR & (SPI_TXE_FLAG) )  >> 1   );
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <SPI1_IRQHandler+0x50>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	085b      	lsrs	r3, r3, #1
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	793b      	ldrb	r3, [r7, #4]
 80005ce:	f362 0300 	bfi	r3, r2, #0, #1
 80005d2:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = ( ( SPI1->SR & (SPI_ERRI_FLAG) )  >> 4   );
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <SPI1_IRQHandler+0x50>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	091b      	lsrs	r3, r3, #4
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	793b      	ldrb	r3, [r7, #4]
 80005e2:	f362 0382 	bfi	r3, r2, #2, #1
 80005e6:	713b      	strb	r3, [r7, #4]

	P_SPI_IRQ_Callback_g[0](irq_src);
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <SPI1_IRQHandler+0x54>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	7938      	ldrb	r0, [r7, #4]
 80005ee:	4798      	blx	r3
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40013000 	.word	0x40013000
 80005fc:	200000a4 	.word	0x200000a4

08000600 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	struct sSPI_IRQ_SRC irq_src;

	irq_src.RXNE  = ( ( SPI2->SR & (SPI_RXNE_FLAG) ) >> 0   );
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <SPI2_IRQHandler+0x50>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	b2da      	uxtb	r2, r3
 8000610:	793b      	ldrb	r3, [r7, #4]
 8000612:	f362 0341 	bfi	r3, r2, #1, #1
 8000616:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( SPI2->SR & (SPI_TXE_FLAG) )  >> 1   );
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <SPI2_IRQHandler+0x50>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	085b      	lsrs	r3, r3, #1
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	f362 0300 	bfi	r3, r2, #0, #1
 800062a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = ( ( SPI2->SR & (SPI_ERRI_FLAG) )  >> 4   );
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <SPI2_IRQHandler+0x50>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	091b      	lsrs	r3, r3, #4
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	b2da      	uxtb	r2, r3
 8000638:	793b      	ldrb	r3, [r7, #4]
 800063a:	f362 0382 	bfi	r3, r2, #2, #1
 800063e:	713b      	strb	r3, [r7, #4]

	P_SPI_IRQ_Callback_g[1](irq_src);
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <SPI2_IRQHandler+0x54>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	7938      	ldrb	r0, [r7, #4]
 8000646:	4798      	blx	r3
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40003800 	.word	0x40003800
 8000654:	200000a4 	.word	0x200000a4

08000658 <USART1_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void USART1_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART1->SR & (UART_PE_FLAG) )   >> 1   );
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <USART1_IRQHandler+0x68>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	085b      	lsrs	r3, r3, #1
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	b2da      	uxtb	r2, r3
 800066a:	793b      	ldrb	r3, [r7, #4]
 800066c:	f362 03c3 	bfi	r3, r2, #3, #1
 8000670:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART1->SR & (UART_RXNE_FLAG) ) >> 5   );
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <USART1_IRQHandler+0x68>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	b2da      	uxtb	r2, r3
 800067e:	793b      	ldrb	r3, [r7, #4]
 8000680:	f362 0341 	bfi	r3, r2, #1, #1
 8000684:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART1->SR & (UART_TC_FLAG) )   >> 6   );
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <USART1_IRQHandler+0x68>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	099b      	lsrs	r3, r3, #6
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	f362 0382 	bfi	r3, r2, #2, #1
 8000698:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART1->SR & (UART_TXE_FLAG) )  >> 7   );
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <USART1_IRQHandler+0x68>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	09db      	lsrs	r3, r3, #7
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	793b      	ldrb	r3, [r7, #4]
 80006a8:	f362 0300 	bfi	r3, r2, #0, #1
 80006ac:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[0](irq_src);
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <USART1_IRQHandler+0x6c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	7938      	ldrb	r0, [r7, #4]
 80006b4:	4798      	blx	r3
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40013800 	.word	0x40013800
 80006c4:	200000ac 	.word	0x200000ac

080006c8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART2->SR & (UART_PE_FLAG) )   >> 1   );
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <USART2_IRQHandler+0x68>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	085b      	lsrs	r3, r3, #1
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	793b      	ldrb	r3, [r7, #4]
 80006dc:	f362 03c3 	bfi	r3, r2, #3, #1
 80006e0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART2->SR & (UART_RXNE_FLAG) ) >> 5   );
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <USART2_IRQHandler+0x68>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	793b      	ldrb	r3, [r7, #4]
 80006f0:	f362 0341 	bfi	r3, r2, #1, #1
 80006f4:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART2->SR & (UART_TC_FLAG) )   >> 6   );
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <USART2_IRQHandler+0x68>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	099b      	lsrs	r3, r3, #6
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	793b      	ldrb	r3, [r7, #4]
 8000704:	f362 0382 	bfi	r3, r2, #2, #1
 8000708:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART2->SR & (UART_TXE_FLAG) )  >> 7   );
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <USART2_IRQHandler+0x68>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	09db      	lsrs	r3, r3, #7
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	b2da      	uxtb	r2, r3
 8000716:	793b      	ldrb	r3, [r7, #4]
 8000718:	f362 0300 	bfi	r3, r2, #0, #1
 800071c:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[1](irq_src);
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <USART2_IRQHandler+0x6c>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	7938      	ldrb	r0, [r7, #4]
 8000724:	4798      	blx	r3
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40004400 	.word	0x40004400
 8000734:	200000ac 	.word	0x200000ac

08000738 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART3->SR & (UART_PE_FLAG) )   >> 1   );
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <USART3_IRQHandler+0x68>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	085b      	lsrs	r3, r3, #1
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	793b      	ldrb	r3, [r7, #4]
 800074c:	f362 03c3 	bfi	r3, r2, #3, #1
 8000750:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART3->SR & (UART_RXNE_FLAG) ) >> 5   );
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <USART3_IRQHandler+0x68>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	793b      	ldrb	r3, [r7, #4]
 8000760:	f362 0341 	bfi	r3, r2, #1, #1
 8000764:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART3->SR & (UART_TC_FLAG) )   >> 6   );
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <USART3_IRQHandler+0x68>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	099b      	lsrs	r3, r3, #6
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	f362 0382 	bfi	r3, r2, #2, #1
 8000778:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART3->SR & (UART_TXE_FLAG) )  >> 7   );
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <USART3_IRQHandler+0x68>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	09db      	lsrs	r3, r3, #7
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	b2da      	uxtb	r2, r3
 8000786:	793b      	ldrb	r3, [r7, #4]
 8000788:	f362 0300 	bfi	r3, r2, #0, #1
 800078c:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[2](irq_src);
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <USART3_IRQHandler+0x6c>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	7938      	ldrb	r0, [r7, #4]
 8000794:	4798      	blx	r3
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40004800 	.word	0x40004800
 80007a4:	200000ac 	.word	0x200000ac

080007a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	db0a      	blt.n	80007d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	490c      	ldr	r1, [pc, #48]	; (80007f4 <__NVIC_SetPriority+0x4c>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	0152      	lsls	r2, r2, #5
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	440b      	add	r3, r1
 80007cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d0:	e00a      	b.n	80007e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4908      	ldr	r1, [pc, #32]	; (80007f8 <__NVIC_SetPriority+0x50>)
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	3b04      	subs	r3, #4
 80007e0:	0152      	lsls	r2, r2, #5
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	761a      	strb	r2, [r3, #24]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000e100 	.word	0xe000e100
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800080c:	d301      	bcc.n	8000812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080e:	2301      	movs	r3, #1
 8000810:	e00f      	b.n	8000832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <SysTick_Config+0x40>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081a:	2107      	movs	r1, #7
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f7ff ffc2 	bl	80007a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <SysTick_Config+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <SysTick_Config+0x40>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	e000e010 	.word	0xe000e010

08000840 <NMI_Handler>:

#include "CortexMx_OS_Porting.h"


void NMI_Handler()
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	while(1);
 8000844:	e7fe      	b.n	8000844 <NMI_Handler+0x4>

08000846 <HardFault_Handler>:
}

void HardFault_Handler()
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
	while(1);
 800084a:	e7fe      	b.n	800084a <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:
}

void MemManage_Handler()
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
	while(1);
 8000850:	e7fe      	b.n	8000850 <MemManage_Handler+0x4>

08000852 <BusFault_Handler>:
}

void BusFault_Handler()
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
	while(1);
 8000856:	e7fe      	b.n	8000856 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:
}

void UsageFault_Handler()
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	while(1);
 800085c:	e7fe      	b.n	800085c <UsageFault_Handler+0x4>

0800085e <SVC_Handler>:
}


 __attribute(( naked )) void SVC_Handler()
{
 	__asm("TST lr,0x4   \n\t"
 800085e:	f01e 0f04 	tst.w	lr, #4
 8000862:	bf0c      	ite	eq
 8000864:	f3ef 8008 	mrseq	r0, MSP
 8000868:	f3ef 8009 	mrsne	r0, PSP
 800086c:	f000 ba4c 	b.w	8000d08 <OS_SVC_Services>
 		  "ITE EQ       \n\t"
 		  "MRSEQ r0,MSP \n\t"
 		  "MRSNE r0,PSP \n\t"
 		  "b OS_SVC_Services");
}
 8000870:	bf00      	nop
	...

08000874 <OS_Trigger_PendSV>:

void OS_Trigger_PendSV()
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	 // Set PendSV
	 SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <OS_Trigger_PendSV+0x18>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4a03      	ldr	r2, [pc, #12]	; (800088c <OS_Trigger_PendSV+0x18>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000882:	6053      	str	r3, [r2, #4]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <HW_Init>:

void HW_Init()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

	// Init HW

	// Decrease PendSV interrupt priority to be smaller than or equal SysticTimer
	//SysTICK has a priority of 15
	__NVIC_SetPriority(PendSV_IRQn, 15);
 8000894:	210f      	movs	r1, #15
 8000896:	f06f 0001 	mvn.w	r0, #1
 800089a:	f7ff ff85 	bl	80007a8 <__NVIC_SetPriority>

	__NVIC_SetPriority(SysTick_IRQn, 12);
 800089e:	210c      	movs	r1, #12
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f7ff ff80 	bl	80007a8 <__NVIC_SetPriority>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <Start_Ticker>:


void Start_Ticker()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	//	8 MHZ
	//	1 count -> 0.125 us
	//	X count -> 1 ms
	//	X = 8000 Count

	 SysTick_Config(8000);
 80008b0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80008b4:	f7ff ffa2 	bl	80007fc <SysTick_Config>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <FIFO_Init>:

#include "OS_Queue.h"


FIFO_state FIFO_Init(FIFO_t* new ,element_type* pBuffer, uint32_t Length)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
	if( !pBuffer )
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d101      	bne.n	80008d2 <FIFO_Init+0x16>
		return FIFO_NULL;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00f      	b.n	80008f2 <FIFO_Init+0x36>

	new->base = pBuffer;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	601a      	str	r2, [r3, #0]
	new->head = pBuffer;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	605a      	str	r2, [r3, #4]
	new->tail = pBuffer;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	609a      	str	r2, [r3, #8]
	new->length = Length;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	611a      	str	r2, [r3, #16]
	new->count = 0;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2200      	movs	r2, #0
 80008ee:	731a      	strb	r2, [r3, #12]

	return FIFO_NO_ERROR;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <FIFO_Enqueue>:

FIFO_state FIFO_Enqueue(FIFO_t* add , element_type item )
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
    if( FIFO_IsFull(add) == FIFO_FULL )
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 f86e 	bl	80009e8 <FIFO_IsFull>
 800090c:	4603      	mov	r3, r0
 800090e:	2b03      	cmp	r3, #3
 8000910:	d101      	bne.n	8000916 <FIFO_Enqueue+0x1a>
        return FIFO_FULL;
 8000912:	2303      	movs	r3, #3
 8000914:	e026      	b.n	8000964 <FIFO_Enqueue+0x68>
    else if( FIFO_IsFull(add) == FIFO_NULL )
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 f866 	bl	80009e8 <FIFO_IsFull>
 800091c:	4603      	mov	r3, r0
 800091e:	2b01      	cmp	r3, #1
 8000920:	d101      	bne.n	8000926 <FIFO_Enqueue+0x2a>
    	return FIFO_NULL;
 8000922:	2301      	movs	r3, #1
 8000924:	e01e      	b.n	8000964 <FIFO_Enqueue+0x68>

    *(add->head) = item;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	601a      	str	r2, [r3, #0]
    add->count++;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	7b1b      	ldrb	r3, [r3, #12]
 8000932:	3301      	adds	r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	731a      	strb	r2, [r3, #12]

    if( add->head == ( add->base + ( add->length)  ) )
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6819      	ldr	r1, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	440b      	add	r3, r1
 800094a:	429a      	cmp	r2, r3
 800094c:	d104      	bne.n	8000958 <FIFO_Enqueue+0x5c>
    	add->head = add->base;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	e004      	b.n	8000962 <FIFO_Enqueue+0x66>
    else
    	{add->head++;}
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	1d1a      	adds	r2, r3, #4
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <FIFO_Dequeue>:

FIFO_state FIFO_Dequeue(FIFO_t* remove, element_type* item)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
    if( !(remove->base) || !(remove->head) || !(remove->tail) )
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d007      	beq.n	800098e <FIFO_Dequeue+0x22>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <FIFO_Dequeue+0x22>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d101      	bne.n	8000992 <FIFO_Dequeue+0x26>
        return FIFO_NULL;
 800098e:	2301      	movs	r3, #1
 8000990:	e025      	b.n	80009de <FIFO_Dequeue+0x72>

    if(remove->count == 0)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	7b1b      	ldrb	r3, [r3, #12]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d101      	bne.n	800099e <FIFO_Dequeue+0x32>
        return FIFO_EMPTY;
 800099a:	2302      	movs	r3, #2
 800099c:	e01f      	b.n	80009de <FIFO_Dequeue+0x72>

    *item = *(remove->tail);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	601a      	str	r2, [r3, #0]
    remove->count--;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7b1b      	ldrb	r3, [r3, #12]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	731a      	strb	r2, [r3, #12]

    if( remove->tail == ( remove->base + ( remove->length) ) )
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6819      	ldr	r1, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	440b      	add	r3, r1
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d104      	bne.n	80009d2 <FIFO_Dequeue+0x66>
    	remove->tail = remove->base;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	e004      	b.n	80009dc <FIFO_Dequeue+0x70>
    else
    	remove->tail++;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	1d1a      	adds	r2, r3, #4
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	609a      	str	r2, [r3, #8]

    return FIFO_NO_ERROR;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <FIFO_IsFull>:

FIFO_state FIFO_IsFull(FIFO_t* check)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
    if( !(check->base) || !(check->head) || !(check->tail) )
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d007      	beq.n	8000a08 <FIFO_IsFull+0x20>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <FIFO_IsFull+0x20>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d101      	bne.n	8000a0c <FIFO_IsFull+0x24>
        return FIFO_NULL;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e009      	b.n	8000a20 <FIFO_IsFull+0x38>

    if( check->count == check->length )
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7b1b      	ldrb	r3, [r3, #12]
 8000a10:	461a      	mov	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d101      	bne.n	8000a1e <FIFO_IsFull+0x36>
    	return FIFO_FULL;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e000      	b.n	8000a20 <FIFO_IsFull+0x38>

    return FIFO_NO_ERROR;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
	...

08000a2c <MYRTOS_Init>:
static void BubbleSort();
static void MYRTOS_Dispatcher();
static void MYRTOS_Update_TaskWaiting_Time();

eOS_ErrorState MYRTOS_Init()
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
	eOS_ErrorState err = NOERROR;
 8000a32:	2300      	movs	r3, #0
 8000a34:	71fb      	strb	r3, [r7, #7]

	// Update OS Mode ( OS_SUSPEND )
	sOS_ControlBlock.eOS_Modes = OS_SUSPEND;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MYRTOS_Init+0x5c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
	// Specify OS Main Stack
	MYRTOS_Create_MainStack();
 8000a3e:	f000 f85b 	bl	8000af8 <MYRTOS_Create_MainStack>
	// Create OS Ready Queue
	if( FIFO_Init(&ReadyQueue ,ReadyQueue_FIFO, 100) != FIFO_NO_ERROR )
 8000a42:	2264      	movs	r2, #100	; 0x64
 8000a44:	4911      	ldr	r1, [pc, #68]	; (8000a8c <MYRTOS_Init+0x60>)
 8000a46:	4812      	ldr	r0, [pc, #72]	; (8000a90 <MYRTOS_Init+0x64>)
 8000a48:	f7ff ff38 	bl	80008bc <FIFO_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <MYRTOS_Init+0x2c>
	{
		err += OS_QUEUE_INIT_ERROR;
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	3301      	adds	r3, #1
 8000a56:	71fb      	strb	r3, [r7, #7]
	}
	//Configure IDLE Task
	strcpy( TCB_IDLE_Task.TaskName , "Idle_Task" );
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MYRTOS_Init+0x68>)
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <MYRTOS_Init+0x6c>)
 8000a5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a5e:	c303      	stmia	r3!, {r0, r1}
 8000a60:	801a      	strh	r2, [r3, #0]
	TCB_IDLE_Task.Priority = 255;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MYRTOS_Init+0x70>)
 8000a64:	22ff      	movs	r2, #255	; 0xff
 8000a66:	711a      	strb	r2, [r3, #4]
	TCB_IDLE_Task.pTaskEntry = MYRTOS_IDLE_Task;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MYRTOS_Init+0x70>)
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <MYRTOS_Init+0x74>)
 8000a6c:	609a      	str	r2, [r3, #8]
	TCB_IDLE_Task.Stack_Size = 300;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MYRTOS_Init+0x70>)
 8000a70:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a74:	601a      	str	r2, [r3, #0]

	MYRTOS_CreateTask(&TCB_IDLE_Task);
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <MYRTOS_Init+0x70>)
 8000a78:	f000 f86a 	bl	8000b50 <MYRTOS_CreateTask>

	return err;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000029c 	.word	0x2000029c
 8000a8c:	200000cc 	.word	0x200000cc
 8000a90:	200000b8 	.word	0x200000b8
 8000a94:	20000274 	.word	0x20000274
 8000a98:	0800148c 	.word	0x0800148c
 8000a9c:	2000025c 	.word	0x2000025c
 8000aa0:	08000b35 	.word	0x08000b35

08000aa4 <MYRTOS_StartOS>:

void MYRTOS_StartOS()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	// Update OS Mode ( OS_RUNNING )
	sOS_ControlBlock.eOS_Modes = OS_RUNNING;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MYRTOS_StartOS+0x4c>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac

	// Set Default Task -> Current Task -> Idle_Task
	sOS_ControlBlock.Current_Task = &TCB_IDLE_Task;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MYRTOS_StartOS+0x4c>)
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <MYRTOS_StartOS+0x50>)
 8000ab4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	// Activate Task
	MYRTOS_ActivateTask(&TCB_IDLE_Task);
 8000ab8:	480e      	ldr	r0, [pc, #56]	; (8000af4 <MYRTOS_StartOS+0x50>)
 8000aba:	f000 f883 	bl	8000bc4 <MYRTOS_ActivateTask>

	//Start Ticker -> 1ms
	Start_Ticker();
 8000abe:	f7ff fef5 	bl	80008ac <Start_Ticker>

	// Set PSP -> Idle_Task Current Stack
	OS_SetPSP(sOS_ControlBlock.Current_Task->Current_PSP_Location);
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MYRTOS_StartOS+0x4c>)
 8000ac4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f383 8809 	msr	PSP, r3

	//Switch Thread Mode SP from MSP to PSP
	OS_SwitchSP_ToPSP();
 8000ace:	f3ef 8314 	mrs	r3, CONTROL
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	f383 8814 	msr	CONTROL, r3

	// Switch to Unprivileged to execute User Tasks
	OS_SwitchCPU_AccessLevel_unprivileged();
 8000ada:	f3ef 8314 	mrs	r3, CONTROL
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	f383 8814 	msr	CONTROL, r3

	// Run Idle Task as Default Task
	TCB_IDLE_Task.pTaskEntry();
 8000ae6:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <MYRTOS_StartOS+0x50>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	4798      	blx	r3
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000029c 	.word	0x2000029c
 8000af4:	2000025c 	.word	0x2000025c

08000af8 <MYRTOS_Create_MainStack>:

void MYRTOS_Create_MainStack()
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
	sOS_ControlBlock._S_MSP_Task = (unsigned int)&_estack;
 8000afc:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <MYRTOS_Create_MainStack+0x34>)
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MYRTOS_Create_MainStack+0x38>)
 8000b00:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	sOS_ControlBlock._E_MSP_Task = ( sOS_ControlBlock._S_MSP_Task - MainStackSize ) ;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MYRTOS_Create_MainStack+0x38>)
 8000b06:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000b0a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <MYRTOS_Create_MainStack+0x38>)
 8000b10:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	// Align 8 bytes as space between Main stack and Tasks stack
	sOS_ControlBlock.PSP_TaskLocator = ( sOS_ControlBlock._E_MSP_Task - 8 );
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MYRTOS_Create_MainStack+0x38>)
 8000b16:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000b1a:	3b08      	subs	r3, #8
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <MYRTOS_Create_MainStack+0x38>)
 8000b1e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20002800 	.word	0x20002800
 8000b30:	2000029c 	.word	0x2000029c

08000b34 <MYRTOS_IDLE_Task>:
unsigned char IDLE_Led;
void MYRTOS_IDLE_Task()
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	while(1)
	{
		IDLE_Led ^= 1;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <MYRTOS_IDLE_Task+0x18>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	f083 0301 	eor.w	r3, r3, #1
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <MYRTOS_IDLE_Task+0x18>)
 8000b44:	701a      	strb	r2, [r3, #0]
		__asm("WFE");
 8000b46:	bf20      	wfe
		IDLE_Led ^= 1;
 8000b48:	e7f6      	b.n	8000b38 <MYRTOS_IDLE_Task+0x4>
 8000b4a:	bf00      	nop
 8000b4c:	2000044c 	.word	0x2000044c

08000b50 <MYRTOS_CreateTask>:
	}
}

eOS_ErrorState MYRTOS_CreateTask(sOS_Task_ControlBlock* Task_TCB)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	eOS_ErrorState err = NOERROR;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]

	// Create Task Stack
	Task_TCB->_S_PSP_Task = sOS_ControlBlock.PSP_TaskLocator;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MYRTOS_CreateTask+0x6c>)
 8000b5e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60da      	str	r2, [r3, #12]
	Task_TCB->_E_PSP_Task = ( Task_TCB->_S_PSP_Task - Task_TCB->Stack_Size );
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	1ad2      	subs	r2, r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	611a      	str	r2, [r3, #16]

	// Check if Task Stack size exceeded the stack limit
	if( Task_TCB->_E_PSP_Task < (unsigned int)&_eheap )
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	4a11      	ldr	r2, [pc, #68]	; (8000bc0 <MYRTOS_CreateTask+0x70>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d201      	bcs.n	8000b82 <MYRTOS_CreateTask+0x32>
	{
		return TASK_EXCEED_STACKSIZE;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	e018      	b.n	8000bb4 <MYRTOS_CreateTask+0x64>
	}

	// Align 8 bytes as space between Task stack and Next Task stack
	sOS_ControlBlock.PSP_TaskLocator = ( Task_TCB->_E_PSP_Task - 8 );
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	3b08      	subs	r3, #8
 8000b88:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <MYRTOS_CreateTask+0x6c>)
 8000b8a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	// Initialize PSP Task Stack
	MYRTOS_Create_TaskStack(Task_TCB);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f860 	bl	8000c54 <MYRTOS_Create_TaskStack>

	// Add Task to Task list
	sOS_ControlBlock.OS_Tasks[sOS_ControlBlock.NoOfActiveTasks++] = Task_TCB;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MYRTOS_CreateTask+0x6c>)
 8000b96:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	4907      	ldr	r1, [pc, #28]	; (8000bbc <MYRTOS_CreateTask+0x6c>)
 8000b9e:	f8c1 219c 	str.w	r2, [r1, #412]	; 0x19c
 8000ba2:	4906      	ldr	r1, [pc, #24]	; (8000bbc <MYRTOS_CreateTask+0x6c>)
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// Update Task State
	Task_TCB->eOS_TaskState = TASK_SUSPEND;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

 	return err;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2000029c 	.word	0x2000029c
 8000bc0:	20000b58 	.word	0x20000b58

08000bc4 <MYRTOS_ActivateTask>:


eOS_ErrorState MYRTOS_ActivateTask(sOS_Task_ControlBlock* Task_TCB)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	eOS_ErrorState err = NOERROR;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]

	// Update Task State
	Task_TCB->eOS_TaskState = TASK_WAITING;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	// Trigger SVC To Activate Task
	OS_SVC_Set(ACTIVATE_TASK);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 f87a 	bl	8000cd2 <OS_SVC_Set>

 	return err;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]

}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <MYRTOS_TerminateTask>:

eOS_ErrorState MYRTOS_TerminateTask(sOS_Task_ControlBlock* Task_TCB)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	eOS_ErrorState err = NOERROR;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]

	// Update Task State
	Task_TCB->eOS_TaskState = TASK_SUSPEND;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	// Trigger SVC To Terminate Task
	OS_SVC_Set(TERMINATE_TASK);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 f868 	bl	8000cd2 <OS_SVC_Set>

 	return err;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <MYRTOS_TaskWait>:

eOS_ErrorState MYRTOS_TaskWait(unsigned int WaitTICKs, sOS_Task_ControlBlock* Task_TCB)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	eOS_ErrorState err = NOERROR;
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]

	// Update Number of Tasks in Waiting State
	sOS_ControlBlock.NoOfTasksWaiting++;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MYRTOS_TaskWait+0x44>)
 8000c1c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <MYRTOS_TaskWait+0x44>)
 8000c24:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0

	// Update Task Waiting State
	Task_TCB->sOS_TaskWaiting.eWaitingState = WAITING_ENABLE;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	// Update Task Waiting Ticks
	Task_TCB->sOS_TaskWaiting.Waiting_Ticks = WaitTICKs;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	63da      	str	r2, [r3, #60]	; 0x3c

	// Update Task State
	Task_TCB->eOS_TaskState = TASK_SUSPEND;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	// Trigger SVC To Terminate Task
	OS_SVC_Set(TERMINATE_TASK);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f000 f847 	bl	8000cd2 <OS_SVC_Set>

 	return err;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000029c 	.word	0x2000029c

08000c54 <MYRTOS_Create_TaskStack>:

void MYRTOS_Create_TaskStack(sOS_Task_ControlBlock* Task_TCB)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	 * r1
	 * r0
	 * =====
	 * r4,r5,r6,r7,r8,r9,r10,r11 -> ( Saved/Restored Manually)
	 */
	Task_TCB->Current_PSP_Location = (unsigned int*)Task_TCB->_S_PSP_Task;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	615a      	str	r2, [r3, #20]

	Task_TCB->Current_PSP_Location--;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	1f1a      	subs	r2, r3, #4
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	615a      	str	r2, [r3, #20]
	// Dummy XPSR where XPSR.T=1 -> to avoid Bus Fault
	*(Task_TCB->Current_PSP_Location) = 0x01000000;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c78:	601a      	str	r2, [r3, #0]

	Task_TCB->Current_PSP_Location--;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	1f1a      	subs	r2, r3, #4
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	615a      	str	r2, [r3, #20]
	// PC -> Execution starts from the Task Entry
	*(Task_TCB->Current_PSP_Location) = (unsigned int)Task_TCB->pTaskEntry;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	601a      	str	r2, [r3, #0]

	Task_TCB->Current_PSP_Location--;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	1f1a      	subs	r2, r3, #4
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	615a      	str	r2, [r3, #20]
	// Dummy LR -> Processor reset value
	*(Task_TCB->Current_PSP_Location) = 0xFFFFFFFF;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	601a      	str	r2, [r3, #0]

	for( int i = 0 ; i < 13 ; i++ )
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	e00b      	b.n	8000cc0 <MYRTOS_Create_TaskStack+0x6c>
	{
		Task_TCB->Current_PSP_Location--;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	1f1a      	subs	r2, r3, #4
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	615a      	str	r2, [r3, #20]
		// r(0....12)
		*(Task_TCB->Current_PSP_Location) = 0;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
	for( int i = 0 ; i < 13 ; i++ )
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b0c      	cmp	r3, #12
 8000cc4:	ddf0      	ble.n	8000ca8 <MYRTOS_Create_TaskStack+0x54>
	}

}
 8000cc6:	bf00      	nop
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <OS_SVC_Set>:

void OS_SVC_Set(eSVC_ID SVC_ID)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
 	switch( SVC_ID )
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d00a      	beq.n	8000cf8 <OS_SVC_Set+0x26>
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	dc0a      	bgt.n	8000cfc <OS_SVC_Set+0x2a>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <OS_SVC_Set+0x1e>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d002      	beq.n	8000cf4 <OS_SVC_Set+0x22>
 		break;
 	case TASKWAITING:
 		__asm(" SVC #0x2");   // Wait For Task
 		break;
 	}
}
 8000cee:	e005      	b.n	8000cfc <OS_SVC_Set+0x2a>
 		__asm(" SVC #0x0");   //Activate Task
 8000cf0:	df00      	svc	0
 		break;
 8000cf2:	e003      	b.n	8000cfc <OS_SVC_Set+0x2a>
 		__asm(" SVC #0x1");   //Terminate Task
 8000cf4:	df01      	svc	1
 		break;
 8000cf6:	e001      	b.n	8000cfc <OS_SVC_Set+0x2a>
 		__asm(" SVC #0x2");   // Wait For Task
 8000cf8:	df02      	svc	2
 		break;
 8000cfa:	bf00      	nop
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
	...

08000d08 <OS_SVC_Services>:

void OS_SVC_Services(int* StackFramePointer )
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	// OS_SVC_Set Stack -> ro -> StackFramePointer
	// OS_SVC_Set Stack : r0,r1,r2,23,r12,LR,PC,XPSR

	unsigned char SVC_Number;

	SVC_Number =  *( (unsigned char*)( (unsigned char*)(StackFramePointer[6]) -2) );
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3318      	adds	r3, #24
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3b02      	subs	r3, #2
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	73fb      	strb	r3, [r7, #15]

 	switch( SVC_Number )
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	dc02      	bgt.n	8000d28 <OS_SVC_Services+0x20>
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	da03      	bge.n	8000d2e <OS_SVC_Services+0x26>
 		// Update Tasks Table/Ready Queue
 		MYRTOS_TaskScheduler();
 		break;
 	}

}
 8000d26:	e01d      	b.n	8000d64 <OS_SVC_Services+0x5c>
 	switch( SVC_Number )
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d017      	beq.n	8000d5c <OS_SVC_Services+0x54>
}
 8000d2c:	e01a      	b.n	8000d64 <OS_SVC_Services+0x5c>
 		MYRTOS_TaskScheduler();
 8000d2e:	f000 f821 	bl	8000d74 <MYRTOS_TaskScheduler>
 		if( sOS_ControlBlock.eOS_Modes == OS_RUNNING )
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <OS_SVC_Services+0x64>)
 8000d34:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d112      	bne.n	8000d62 <OS_SVC_Services+0x5a>
 			if( strcmp(sOS_ControlBlock.Current_Task->TaskName ,"Idle_Task" ) != 0 )
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <OS_SVC_Services+0x64>)
 8000d3e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000d42:	3318      	adds	r3, #24
 8000d44:	490a      	ldr	r1, [pc, #40]	; (8000d70 <OS_SVC_Services+0x68>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fa12 	bl	8000170 <strcmp>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <OS_SVC_Services+0x5a>
 				MYRTOS_Dispatcher();
 8000d52:	f000 f8e3 	bl	8000f1c <MYRTOS_Dispatcher>
 				OS_Trigger_PendSV();
 8000d56:	f7ff fd8d 	bl	8000874 <OS_Trigger_PendSV>
 		break;
 8000d5a:	e002      	b.n	8000d62 <OS_SVC_Services+0x5a>
 		MYRTOS_TaskScheduler();
 8000d5c:	f000 f80a 	bl	8000d74 <MYRTOS_TaskScheduler>
 		break;
 8000d60:	e000      	b.n	8000d64 <OS_SVC_Services+0x5c>
 		break;
 8000d62:	bf00      	nop
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000029c 	.word	0x2000029c
 8000d70:	0800148c 	.word	0x0800148c

08000d74 <MYRTOS_TaskScheduler>:

void MYRTOS_TaskScheduler()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
	int i = 0, FirstTask_Flag = 0, Priority = 1000;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	607b      	str	r3, [r7, #4]
	sOS_Task_ControlBlock* temp = NULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]

	//1. Update Tasks Table -> Bubble sort task in Tasks Table based on Priority
	BubbleSort();
 8000d8c:	f000 f874 	bl	8000e78 <BubbleSort>
	//2. Free Ready Queue
	while( FIFO_Dequeue(&ReadyQueue, &temp) != FIFO_EMPTY );
 8000d90:	bf00      	nop
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	4836      	ldr	r0, [pc, #216]	; (8000e70 <MYRTOS_TaskScheduler+0xfc>)
 8000d98:	f7ff fde8 	bl	800096c <FIFO_Dequeue>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d1f7      	bne.n	8000d92 <MYRTOS_TaskScheduler+0x1e>
	//3. Update Ready Queue
	while( i < sOS_ControlBlock.NoOfActiveTasks )
 8000da2:	e058      	b.n	8000e56 <MYRTOS_TaskScheduler+0xe2>
	{
		if( sOS_ControlBlock.OS_Tasks[i]->eOS_TaskState != TASK_SUSPEND && sOS_ControlBlock.OS_Tasks[i]->Priority != Priority && FirstTask_Flag == 0)
 8000da4:	4a33      	ldr	r2, [pc, #204]	; (8000e74 <MYRTOS_TaskScheduler+0x100>)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d023      	beq.n	8000dfc <MYRTOS_TaskScheduler+0x88>
 8000db4:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <MYRTOS_TaskScheduler+0x100>)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01a      	beq.n	8000dfc <MYRTOS_TaskScheduler+0x88>
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d117      	bne.n	8000dfc <MYRTOS_TaskScheduler+0x88>
		{
			// Update Task State
			sOS_ControlBlock.OS_Tasks[i]->eOS_TaskState = TASK_READY;
 8000dcc:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <MYRTOS_TaskScheduler+0x100>)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			// Add task to Ready Queue
			FIFO_Enqueue(&ReadyQueue , sOS_ControlBlock.OS_Tasks[i] );
 8000dda:	4a26      	ldr	r2, [pc, #152]	; (8000e74 <MYRTOS_TaskScheduler+0x100>)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	4619      	mov	r1, r3
 8000de4:	4822      	ldr	r0, [pc, #136]	; (8000e70 <MYRTOS_TaskScheduler+0xfc>)
 8000de6:	f7ff fd89 	bl	80008fc <FIFO_Enqueue>

			Priority = sOS_ControlBlock.OS_Tasks[i]->Priority;
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <MYRTOS_TaskScheduler+0x100>)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	791b      	ldrb	r3, [r3, #4]
 8000df4:	607b      	str	r3, [r7, #4]
			FirstTask_Flag =1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	e029      	b.n	8000e50 <MYRTOS_TaskScheduler+0xdc>
		}
		else if( sOS_ControlBlock.OS_Tasks[i]->eOS_TaskState != TASK_SUSPEND && sOS_ControlBlock.OS_Tasks[i]->Priority == Priority )
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <MYRTOS_TaskScheduler+0x100>)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d018      	beq.n	8000e3e <MYRTOS_TaskScheduler+0xca>
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <MYRTOS_TaskScheduler+0x100>)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	791b      	ldrb	r3, [r3, #4]
 8000e16:	461a      	mov	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d10f      	bne.n	8000e3e <MYRTOS_TaskScheduler+0xca>
		{
			// Update Task State
			sOS_ControlBlock.OS_Tasks[i]->eOS_TaskState = TASK_READY;
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MYRTOS_TaskScheduler+0x100>)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	2202      	movs	r2, #2
 8000e28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			// Add task to Ready Queue
			FIFO_Enqueue(&ReadyQueue , sOS_ControlBlock.OS_Tasks[i] );
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <MYRTOS_TaskScheduler+0x100>)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	4619      	mov	r1, r3
 8000e36:	480e      	ldr	r0, [pc, #56]	; (8000e70 <MYRTOS_TaskScheduler+0xfc>)
 8000e38:	f7ff fd60 	bl	80008fc <FIFO_Enqueue>
 8000e3c:	e008      	b.n	8000e50 <MYRTOS_TaskScheduler+0xdc>
		}
		else if( sOS_ControlBlock.OS_Tasks[i]->Priority >= Priority )
 8000e3e:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <MYRTOS_TaskScheduler+0x100>)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	791b      	ldrb	r3, [r3, #4]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	dd09      	ble.n	8000e64 <MYRTOS_TaskScheduler+0xf0>
		{
			break;
		}
		i++;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
	while( i < sOS_ControlBlock.NoOfActiveTasks )
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <MYRTOS_TaskScheduler+0x100>)
 8000e58:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d8a0      	bhi.n	8000da4 <MYRTOS_TaskScheduler+0x30>
	}
}
 8000e62:	e000      	b.n	8000e66 <MYRTOS_TaskScheduler+0xf2>
			break;
 8000e64:	bf00      	nop
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000b8 	.word	0x200000b8
 8000e74:	2000029c 	.word	0x2000029c

08000e78 <BubbleSort>:

void BubbleSort()
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
	int i ,j ,SwapFlag;
	sOS_Task_ControlBlock* temp = NULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]

	for( i = 0 ; i < (sOS_ControlBlock.NoOfActiveTasks - 1) ; i++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	e039      	b.n	8000efc <BubbleSort+0x84>
	{
		SwapFlag = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
		for( j = 0 ; j < (sOS_ControlBlock.NoOfActiveTasks - i - 1) ; j++ )
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	e025      	b.n	8000ede <BubbleSort+0x66>
		{
			if( sOS_ControlBlock.OS_Tasks[j]->Priority > sOS_ControlBlock.OS_Tasks[j+1]->Priority )
 8000e92:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <BubbleSort+0xa0>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	791a      	ldrb	r2, [r3, #4]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	491d      	ldr	r1, [pc, #116]	; (8000f18 <BubbleSort+0xa0>)
 8000ea2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ea6:	791b      	ldrb	r3, [r3, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d915      	bls.n	8000ed8 <BubbleSort+0x60>
			{
				temp = sOS_ControlBlock.OS_Tasks[j];
 8000eac:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <BubbleSort+0xa0>)
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	603b      	str	r3, [r7, #0]
				sOS_ControlBlock.OS_Tasks[j] = sOS_ControlBlock.OS_Tasks[j+1];
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <BubbleSort+0xa0>)
 8000ebc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec0:	4915      	ldr	r1, [pc, #84]	; (8000f18 <BubbleSort+0xa0>)
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				sOS_ControlBlock.OS_Tasks[j+1] = temp;
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4912      	ldr	r1, [pc, #72]	; (8000f18 <BubbleSort+0xa0>)
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				SwapFlag = 1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
		for( j = 0 ; j < (sOS_ControlBlock.NoOfActiveTasks - i - 1) ; j++ )
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3301      	adds	r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <BubbleSort+0xa0>)
 8000ee0:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	1e5a      	subs	r2, r3, #1
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8d0      	bhi.n	8000e92 <BubbleSort+0x1a>
			}
		}
		if(SwapFlag == 0)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00a      	beq.n	8000f0c <BubbleSort+0x94>
	for( i = 0 ; i < (sOS_ControlBlock.NoOfActiveTasks - 1) ; i++)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <BubbleSort+0xa0>)
 8000efe:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000f02:	1e5a      	subs	r2, r3, #1
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d8be      	bhi.n	8000e88 <BubbleSort+0x10>
			break;
	}
}
 8000f0a:	e000      	b.n	8000f0e <BubbleSort+0x96>
			break;
 8000f0c:	bf00      	nop
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	2000029c 	.word	0x2000029c

08000f1c <MYRTOS_Dispatcher>:

void MYRTOS_Dispatcher()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	// Get Next Task to run from ReadyQueue
	FIFO_Dequeue(&ReadyQueue, &(sOS_ControlBlock.Next_Task) );
 8000f20:	4909      	ldr	r1, [pc, #36]	; (8000f48 <MYRTOS_Dispatcher+0x2c>)
 8000f22:	480a      	ldr	r0, [pc, #40]	; (8000f4c <MYRTOS_Dispatcher+0x30>)
 8000f24:	f7ff fd22 	bl	800096c <FIFO_Dequeue>
	// Update Task State
	sOS_ControlBlock.Next_Task->eOS_TaskState = TASK_RUNNING;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MYRTOS_Dispatcher+0x34>)
 8000f2a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8000f2e:	2203      	movs	r2, #3
 8000f30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	// Put Task to run ReadyQueue -> Round-Robin Algorithm
	FIFO_Enqueue(&ReadyQueue , sOS_ControlBlock.Next_Task );
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MYRTOS_Dispatcher+0x34>)
 8000f36:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <MYRTOS_Dispatcher+0x30>)
 8000f3e:	f7ff fcdd 	bl	80008fc <FIFO_Enqueue>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000444 	.word	0x20000444
 8000f4c:	200000b8 	.word	0x200000b8
 8000f50:	2000029c 	.word	0x2000029c

08000f54 <MYRTOS_Update_TaskWaiting_Time>:

void MYRTOS_Update_TaskWaiting_Time()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
	int i;

	for( i = 0 ; i < sOS_ControlBlock.NoOfActiveTasks ; i++ )
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	e031      	b.n	8000fc4 <MYRTOS_Update_TaskWaiting_Time+0x70>
	{
		if( sOS_ControlBlock.OS_Tasks[i]->eOS_TaskState == TASK_SUSPEND )
 8000f60:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <MYRTOS_Update_TaskWaiting_Time+0x88>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f68:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d126      	bne.n	8000fbe <MYRTOS_Update_TaskWaiting_Time+0x6a>
		{
			if( sOS_ControlBlock.OS_Tasks[i]->sOS_TaskWaiting.eWaitingState == WAITING_ENABLE )
 8000f70:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <MYRTOS_Update_TaskWaiting_Time+0x88>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d11e      	bne.n	8000fbe <MYRTOS_Update_TaskWaiting_Time+0x6a>
			{
				sOS_ControlBlock.OS_Tasks[i]->sOS_TaskWaiting.Waiting_Ticks--;
 8000f80:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <MYRTOS_Update_TaskWaiting_Time+0x88>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	63da      	str	r2, [r3, #60]	; 0x3c
				if( sOS_ControlBlock.OS_Tasks[i]->sOS_TaskWaiting.Waiting_Ticks == 0 )
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <MYRTOS_Update_TaskWaiting_Time+0x88>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d110      	bne.n	8000fbe <MYRTOS_Update_TaskWaiting_Time+0x6a>
				{
					sOS_ControlBlock.OS_Tasks[i]->sOS_TaskWaiting.eWaitingState = WAITING_DISABLE;
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <MYRTOS_Update_TaskWaiting_Time+0x88>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					sOS_ControlBlock.OS_Tasks[i]->eOS_TaskState = TASK_WAITING;
 8000faa:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <MYRTOS_Update_TaskWaiting_Time+0x88>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

					OS_SVC_Set(TASKWAITING);
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f7ff fe8a 	bl	8000cd2 <OS_SVC_Set>
	for( i = 0 ; i < sOS_ControlBlock.NoOfActiveTasks ; i++ )
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <MYRTOS_Update_TaskWaiting_Time+0x88>)
 8000fc6:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8c7      	bhi.n	8000f60 <MYRTOS_Update_TaskWaiting_Time+0xc>
				}
			}
		}
	}

}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000029c 	.word	0x2000029c

08000fe0 <PendSV_Handler>:
	// Save The Context of The Current TASK
	//=======================================

	// Get the Current Task Stack "Current PSP"
	//OS_GetPSP( sOS_ControlBlock.Current_Task->Current_PSP_Location );
	__asm volatile(" mrs %[out],PSP " : [out] "=r" (sOS_ControlBlock.Current_Task->Current_PSP_Location) );
 8000fe0:	4b6e      	ldr	r3, [pc, #440]	; (800119c <PendSV_Handler+0x1bc>)
 8000fe2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000fe6:	f3ef 8209 	mrs	r2, PSP
 8000fea:	615a      	str	r2, [r3, #20]

	// Using this Current_PSP_Location (Pointer) to Store (R4 .... R11)
	sOS_ControlBlock.Current_Task->Current_PSP_Location--;
 8000fec:	4b6b      	ldr	r3, [pc, #428]	; (800119c <PendSV_Handler+0x1bc>)
 8000fee:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000ff2:	695a      	ldr	r2, [r3, #20]
 8000ff4:	3a04      	subs	r2, #4
 8000ff6:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r4 " : "=r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <PendSV_Handler+0x1bc>)
 8000ffa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	4622      	mov	r2, r4
 8001002:	601a      	str	r2, [r3, #0]
	sOS_ControlBlock.Current_Task->Current_PSP_Location--;
 8001004:	4b65      	ldr	r3, [pc, #404]	; (800119c <PendSV_Handler+0x1bc>)
 8001006:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	3a04      	subs	r2, #4
 800100e:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r5 " : "=r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 8001010:	4b62      	ldr	r3, [pc, #392]	; (800119c <PendSV_Handler+0x1bc>)
 8001012:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	462a      	mov	r2, r5
 800101a:	601a      	str	r2, [r3, #0]
	sOS_ControlBlock.Current_Task->Current_PSP_Location--;
 800101c:	4b5f      	ldr	r3, [pc, #380]	; (800119c <PendSV_Handler+0x1bc>)
 800101e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	3a04      	subs	r2, #4
 8001026:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r6 " : "=r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 8001028:	4b5c      	ldr	r3, [pc, #368]	; (800119c <PendSV_Handler+0x1bc>)
 800102a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	4632      	mov	r2, r6
 8001032:	601a      	str	r2, [r3, #0]
	sOS_ControlBlock.Current_Task->Current_PSP_Location--;
 8001034:	4b59      	ldr	r3, [pc, #356]	; (800119c <PendSV_Handler+0x1bc>)
 8001036:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800103a:	695a      	ldr	r2, [r3, #20]
 800103c:	3a04      	subs	r2, #4
 800103e:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r7 " : "=r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 8001040:	4b56      	ldr	r3, [pc, #344]	; (800119c <PendSV_Handler+0x1bc>)
 8001042:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	463a      	mov	r2, r7
 800104a:	601a      	str	r2, [r3, #0]
	sOS_ControlBlock.Current_Task->Current_PSP_Location--;
 800104c:	4b53      	ldr	r3, [pc, #332]	; (800119c <PendSV_Handler+0x1bc>)
 800104e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	3a04      	subs	r2, #4
 8001056:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r8 " : "=r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 8001058:	4b50      	ldr	r3, [pc, #320]	; (800119c <PendSV_Handler+0x1bc>)
 800105a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	4642      	mov	r2, r8
 8001062:	601a      	str	r2, [r3, #0]
	sOS_ControlBlock.Current_Task->Current_PSP_Location--;
 8001064:	4b4d      	ldr	r3, [pc, #308]	; (800119c <PendSV_Handler+0x1bc>)
 8001066:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	3a04      	subs	r2, #4
 800106e:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r9 " : "=r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 8001070:	4b4a      	ldr	r3, [pc, #296]	; (800119c <PendSV_Handler+0x1bc>)
 8001072:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	464a      	mov	r2, r9
 800107a:	601a      	str	r2, [r3, #0]
	sOS_ControlBlock.Current_Task->Current_PSP_Location--;
 800107c:	4b47      	ldr	r3, [pc, #284]	; (800119c <PendSV_Handler+0x1bc>)
 800107e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	3a04      	subs	r2, #4
 8001086:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r10 " : "=r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 8001088:	4b44      	ldr	r3, [pc, #272]	; (800119c <PendSV_Handler+0x1bc>)
 800108a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	4652      	mov	r2, sl
 8001092:	601a      	str	r2, [r3, #0]
	sOS_ControlBlock.Current_Task->Current_PSP_Location--;
 8001094:	4b41      	ldr	r3, [pc, #260]	; (800119c <PendSV_Handler+0x1bc>)
 8001096:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800109a:	695a      	ldr	r2, [r3, #20]
 800109c:	3a04      	subs	r2, #4
 800109e:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r11 " : "=r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 80010a0:	4b3e      	ldr	r3, [pc, #248]	; (800119c <PendSV_Handler+0x1bc>)
 80010a2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	465a      	mov	r2, fp
 80010aa:	601a      	str	r2, [r3, #0]

	//=======================================
	// Restore The Context of The Next TASK
	//=======================================

	if ( sOS_ControlBlock.Current_Task != NULL )
 80010ac:	4b3b      	ldr	r3, [pc, #236]	; (800119c <PendSV_Handler+0x1bc>)
 80010ae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d009      	beq.n	80010ca <PendSV_Handler+0xea>
	{
		sOS_ControlBlock.Current_Task = sOS_ControlBlock.Next_Task ;
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <PendSV_Handler+0x1bc>)
 80010b8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80010bc:	4a37      	ldr	r2, [pc, #220]	; (800119c <PendSV_Handler+0x1bc>)
 80010be:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		sOS_ControlBlock.Next_Task = NULL ;
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <PendSV_Handler+0x1bc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	}

	// Using this Current_PSP_Location (Pointer) to Restore (R4 .... R11)
	__asm volatile("mov r11,%0 " : : "r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <PendSV_Handler+0x1bc>)
 80010cc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	469b      	mov	fp, r3
	sOS_ControlBlock.Current_Task->Current_PSP_Location++ ;
 80010d6:	4b31      	ldr	r3, [pc, #196]	; (800119c <PendSV_Handler+0x1bc>)
 80010d8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	3204      	adds	r2, #4
 80010e0:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r10,%0 " : : "r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 80010e2:	4b2e      	ldr	r3, [pc, #184]	; (800119c <PendSV_Handler+0x1bc>)
 80010e4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	469a      	mov	sl, r3
	sOS_ControlBlock.Current_Task->Current_PSP_Location++ ;
 80010ee:	4b2b      	ldr	r3, [pc, #172]	; (800119c <PendSV_Handler+0x1bc>)
 80010f0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	3204      	adds	r2, #4
 80010f8:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r9,%0 " : : "r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <PendSV_Handler+0x1bc>)
 80010fc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4699      	mov	r9, r3
	sOS_ControlBlock.Current_Task->Current_PSP_Location++ ;
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <PendSV_Handler+0x1bc>)
 8001108:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800110c:	695a      	ldr	r2, [r3, #20]
 800110e:	3204      	adds	r2, #4
 8001110:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r8,%0 " : : "r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <PendSV_Handler+0x1bc>)
 8001114:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4698      	mov	r8, r3
	sOS_ControlBlock.Current_Task->Current_PSP_Location++ ;
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <PendSV_Handler+0x1bc>)
 8001120:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	3204      	adds	r2, #4
 8001128:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r7,%0 " : : "r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <PendSV_Handler+0x1bc>)
 800112c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	461f      	mov	r7, r3
	sOS_ControlBlock.Current_Task->Current_PSP_Location++ ;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <PendSV_Handler+0x1bc>)
 8001138:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	3204      	adds	r2, #4
 8001140:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r6,%0 " : : "r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <PendSV_Handler+0x1bc>)
 8001144:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	461e      	mov	r6, r3
	sOS_ControlBlock.Current_Task->Current_PSP_Location++ ;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <PendSV_Handler+0x1bc>)
 8001150:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	3204      	adds	r2, #4
 8001158:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r5,%0 " : : "r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <PendSV_Handler+0x1bc>)
 800115c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	461d      	mov	r5, r3
	sOS_ControlBlock.Current_Task->Current_PSP_Location++ ;
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <PendSV_Handler+0x1bc>)
 8001168:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	3204      	adds	r2, #4
 8001170:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r4,%0 " : : "r" (*(sOS_ControlBlock.Current_Task->Current_PSP_Location))  );
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <PendSV_Handler+0x1bc>)
 8001174:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	461c      	mov	r4, r3
	sOS_ControlBlock.Current_Task->Current_PSP_Location++ ;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <PendSV_Handler+0x1bc>)
 8001180:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	3204      	adds	r2, #4
 8001188:	615a      	str	r2, [r3, #20]

	// Update PSP and Exit
	OS_SetPSP( sOS_ControlBlock.Current_Task->Current_PSP_Location );
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <PendSV_Handler+0x1bc>)
 800118c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f383 8809 	msr	PSP, r3

	__asm volatile("BX LR");
 8001196:	4770      	bx	lr
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	2000029c 	.word	0x2000029c

080011a0 <SysTick_Handler>:

unsigned char SysTick_Led;
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	SysTick_Led ^= 1;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <SysTick_Handler+0x24>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f083 0301 	eor.w	r3, r3, #1
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Handler+0x24>)
 80011b0:	701a      	strb	r2, [r3, #0]

	// Check if any Task_Waiting Time has finished , Update ReadyQueue if any
	MYRTOS_Update_TaskWaiting_Time();
 80011b2:	f7ff fecf 	bl	8000f54 <MYRTOS_Update_TaskWaiting_Time>

	// Determine Next Task From ReadyQueue
	MYRTOS_Dispatcher();
 80011b6:	f7ff feb1 	bl	8000f1c <MYRTOS_Dispatcher>

	// Trigger PENDSV -> ( Switch Context/Restore)
	OS_Trigger_PendSV();
 80011ba:	f7ff fb5b 	bl	8000874 <OS_Trigger_PendSV>

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000044d 	.word	0x2000044d

080011c8 <Task1>:
#include "OS_Scheduler.h"

sOS_Task_ControlBlock TCB_Task1 , TCB_Task2 , TCB_Task3 , TCB_Task4;
unsigned char Task1_Led , Task2_Led , Task3_Led , Task4_Led;
void Task1()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	static int count = 0;
	while(1)
	{
		Task1_Led ^= 1;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <Task1+0x1c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f083 0301 	eor.w	r3, r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <Task1+0x1c>)
 80011d8:	701a      	strb	r2, [r3, #0]
		//Task1 Code
		MYRTOS_TaskWait(100, &TCB_Task1);
 80011da:	4903      	ldr	r1, [pc, #12]	; (80011e8 <Task1+0x20>)
 80011dc:	2064      	movs	r0, #100	; 0x64
 80011de:	f7ff fd15 	bl	8000c0c <MYRTOS_TaskWait>
		Task1_Led ^= 1;
 80011e2:	e7f3      	b.n	80011cc <Task1+0x4>
 80011e4:	20000550 	.word	0x20000550
 80011e8:	20000450 	.word	0x20000450

080011ec <Task2>:
//		}
	}
}

void Task2()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Led ^= 1;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <Task2+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <Task2+0x20>)
 80011fc:	701a      	strb	r2, [r3, #0]
		//Task2 Code
		MYRTOS_TaskWait(300, &TCB_Task2);
 80011fe:	4904      	ldr	r1, [pc, #16]	; (8001210 <Task2+0x24>)
 8001200:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001204:	f7ff fd02 	bl	8000c0c <MYRTOS_TaskWait>
		Task2_Led ^= 1;
 8001208:	e7f2      	b.n	80011f0 <Task2+0x4>
 800120a:	bf00      	nop
 800120c:	20000551 	.word	0x20000551
 8001210:	20000490 	.word	0x20000490

08001214 <Task3>:
	}
}

void Task3()
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	while(1)
	{
		Task3_Led ^= 1;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <Task3+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f083 0301 	eor.w	r3, r3, #1
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <Task3+0x20>)
 8001224:	701a      	strb	r2, [r3, #0]
		//Task3 Code
		MYRTOS_TaskWait(600, &TCB_Task3);
 8001226:	4904      	ldr	r1, [pc, #16]	; (8001238 <Task3+0x24>)
 8001228:	f44f 7016 	mov.w	r0, #600	; 0x258
 800122c:	f7ff fcee 	bl	8000c0c <MYRTOS_TaskWait>
		Task3_Led ^= 1;
 8001230:	e7f2      	b.n	8001218 <Task3+0x4>
 8001232:	bf00      	nop
 8001234:	20000552 	.word	0x20000552
 8001238:	200004d0 	.word	0x200004d0

0800123c <Task4>:
	}
}

void Task4()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	static int count = 0;
	while(1)
	{
		Task4_Led ^= 1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <Task4+0x38>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f083 0301 	eor.w	r3, r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <Task4+0x38>)
 800124c:	701a      	strb	r2, [r3, #0]
		//Task4 Code
		count++;
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <Task4+0x3c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	4a08      	ldr	r2, [pc, #32]	; (8001278 <Task4+0x3c>)
 8001256:	6013      	str	r3, [r2, #0]
		if( count == 0xfff )
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <Task4+0x3c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001260:	4293      	cmp	r3, r2
 8001262:	d1ed      	bne.n	8001240 <Task4+0x4>
		{
			MYRTOS_TerminateTask(&TCB_Task4);
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <Task4+0x40>)
 8001266:	f7ff fcbf 	bl	8000be8 <MYRTOS_TerminateTask>
			count = 0;
 800126a:	4b03      	ldr	r3, [pc, #12]	; (8001278 <Task4+0x3c>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
		Task4_Led ^= 1;
 8001270:	e7e6      	b.n	8001240 <Task4+0x4>
 8001272:	bf00      	nop
 8001274:	20000553 	.word	0x20000553
 8001278:	20000554 	.word	0x20000554
 800127c:	20000510 	.word	0x20000510

08001280 <main>:
		}
	}
}

int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
	eOS_ErrorState err = NOERROR;
 8001286:	2300      	movs	r3, #0
 8001288:	71fb      	strb	r3, [r7, #7]

	// HW_Init (Initialize clock tree , Reset controller)
	HW_Init();
 800128a:	f7ff fb01 	bl	8000890 <HW_Init>

	// Init OS
	if( MYRTOS_Init() != NOERROR )
 800128e:	f7ff fbcd 	bl	8000a2c <MYRTOS_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d000      	beq.n	800129a <main+0x1a>
		while(1);
 8001298:	e7fe      	b.n	8001298 <main+0x18>

	//Configure Task1
	strcpy( TCB_Task1.TaskName , "Task1" );
 800129a:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <main+0x118>)
 800129c:	4a3f      	ldr	r2, [pc, #252]	; (800139c <main+0x11c>)
 800129e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a2:	6018      	str	r0, [r3, #0]
 80012a4:	3304      	adds	r3, #4
 80012a6:	8019      	strh	r1, [r3, #0]
	TCB_Task1.Priority = 3;
 80012a8:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <main+0x120>)
 80012aa:	2203      	movs	r2, #3
 80012ac:	711a      	strb	r2, [r3, #4]
	TCB_Task1.pTaskEntry = Task1;
 80012ae:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <main+0x120>)
 80012b0:	4a3c      	ldr	r2, [pc, #240]	; (80013a4 <main+0x124>)
 80012b2:	609a      	str	r2, [r3, #8]
	TCB_Task1.Stack_Size = 500;
 80012b4:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <main+0x120>)
 80012b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012ba:	601a      	str	r2, [r3, #0]

	//Configure Task2
	strcpy( TCB_Task2.TaskName , "Task2" );
 80012bc:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <main+0x128>)
 80012be:	4a3b      	ldr	r2, [pc, #236]	; (80013ac <main+0x12c>)
 80012c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	8019      	strh	r1, [r3, #0]
	TCB_Task2.Priority = 3;
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <main+0x130>)
 80012cc:	2203      	movs	r2, #3
 80012ce:	711a      	strb	r2, [r3, #4]
	TCB_Task2.pTaskEntry = Task2;
 80012d0:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <main+0x130>)
 80012d2:	4a38      	ldr	r2, [pc, #224]	; (80013b4 <main+0x134>)
 80012d4:	609a      	str	r2, [r3, #8]
	TCB_Task2.Stack_Size = 500;
 80012d6:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <main+0x130>)
 80012d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012dc:	601a      	str	r2, [r3, #0]

	//Configure Task3
	strcpy( TCB_Task3.TaskName , "Task3" );
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <main+0x138>)
 80012e0:	4a36      	ldr	r2, [pc, #216]	; (80013bc <main+0x13c>)
 80012e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012e6:	6018      	str	r0, [r3, #0]
 80012e8:	3304      	adds	r3, #4
 80012ea:	8019      	strh	r1, [r3, #0]
	TCB_Task3.Priority = 3;
 80012ec:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <main+0x140>)
 80012ee:	2203      	movs	r2, #3
 80012f0:	711a      	strb	r2, [r3, #4]
	TCB_Task3.pTaskEntry = Task3;
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <main+0x140>)
 80012f4:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <main+0x144>)
 80012f6:	609a      	str	r2, [r3, #8]
	TCB_Task3.Stack_Size = 500;
 80012f8:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <main+0x140>)
 80012fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012fe:	601a      	str	r2, [r3, #0]

	//Configure Task4
	strcpy( TCB_Task4.TaskName , "Task4" );
 8001300:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <main+0x148>)
 8001302:	4a32      	ldr	r2, [pc, #200]	; (80013cc <main+0x14c>)
 8001304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001308:	6018      	str	r0, [r3, #0]
 800130a:	3304      	adds	r3, #4
 800130c:	8019      	strh	r1, [r3, #0]
	TCB_Task4.Priority = 1;
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <main+0x150>)
 8001310:	2201      	movs	r2, #1
 8001312:	711a      	strb	r2, [r3, #4]
	TCB_Task4.pTaskEntry = Task4;
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <main+0x150>)
 8001316:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <main+0x154>)
 8001318:	609a      	str	r2, [r3, #8]
	TCB_Task4.Stack_Size = 500;
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <main+0x150>)
 800131c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001320:	601a      	str	r2, [r3, #0]

	err += MYRTOS_CreateTask(&TCB_Task1);
 8001322:	481f      	ldr	r0, [pc, #124]	; (80013a0 <main+0x120>)
 8001324:	f7ff fc14 	bl	8000b50 <MYRTOS_CreateTask>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4413      	add	r3, r2
 8001330:	71fb      	strb	r3, [r7, #7]
	err += MYRTOS_CreateTask(&TCB_Task2);
 8001332:	481f      	ldr	r0, [pc, #124]	; (80013b0 <main+0x130>)
 8001334:	f7ff fc0c 	bl	8000b50 <MYRTOS_CreateTask>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4413      	add	r3, r2
 8001340:	71fb      	strb	r3, [r7, #7]
	err += MYRTOS_CreateTask(&TCB_Task3);
 8001342:	481f      	ldr	r0, [pc, #124]	; (80013c0 <main+0x140>)
 8001344:	f7ff fc04 	bl	8000b50 <MYRTOS_CreateTask>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4413      	add	r3, r2
 8001350:	71fb      	strb	r3, [r7, #7]
	err += MYRTOS_CreateTask(&TCB_Task4);
 8001352:	481f      	ldr	r0, [pc, #124]	; (80013d0 <main+0x150>)
 8001354:	f7ff fbfc 	bl	8000b50 <MYRTOS_CreateTask>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4413      	add	r3, r2
 8001360:	71fb      	strb	r3, [r7, #7]

	err += MYRTOS_ActivateTask(&TCB_Task1);
 8001362:	480f      	ldr	r0, [pc, #60]	; (80013a0 <main+0x120>)
 8001364:	f7ff fc2e 	bl	8000bc4 <MYRTOS_ActivateTask>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4413      	add	r3, r2
 8001370:	71fb      	strb	r3, [r7, #7]
	err += MYRTOS_ActivateTask(&TCB_Task2);
 8001372:	480f      	ldr	r0, [pc, #60]	; (80013b0 <main+0x130>)
 8001374:	f7ff fc26 	bl	8000bc4 <MYRTOS_ActivateTask>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4413      	add	r3, r2
 8001380:	71fb      	strb	r3, [r7, #7]
	err += MYRTOS_ActivateTask(&TCB_Task3);
 8001382:	480f      	ldr	r0, [pc, #60]	; (80013c0 <main+0x140>)
 8001384:	f7ff fc1e 	bl	8000bc4 <MYRTOS_ActivateTask>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4413      	add	r3, r2
 8001390:	71fb      	strb	r3, [r7, #7]


	MYRTOS_StartOS();
 8001392:	f7ff fb87 	bl	8000aa4 <MYRTOS_StartOS>

	while(1)
 8001396:	e7fe      	b.n	8001396 <main+0x116>
 8001398:	20000468 	.word	0x20000468
 800139c:	08001498 	.word	0x08001498
 80013a0:	20000450 	.word	0x20000450
 80013a4:	080011c9 	.word	0x080011c9
 80013a8:	200004a8 	.word	0x200004a8
 80013ac:	080014a0 	.word	0x080014a0
 80013b0:	20000490 	.word	0x20000490
 80013b4:	080011ed 	.word	0x080011ed
 80013b8:	200004e8 	.word	0x200004e8
 80013bc:	080014a8 	.word	0x080014a8
 80013c0:	200004d0 	.word	0x200004d0
 80013c4:	08001215 	.word	0x08001215
 80013c8:	20000528 	.word	0x20000528
 80013cc:	080014b0 	.word	0x080014b0
 80013d0:	20000510 	.word	0x20000510
 80013d4:	0800123d 	.word	0x0800123d

080013d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <LoopForever+0x6>)
  ldr r1, =_edata
 80013e2:	490d      	ldr	r1, [pc, #52]	; (8001418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <LoopForever+0xe>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f8:	4c0a      	ldr	r4, [pc, #40]	; (8001424 <LoopForever+0x16>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001406:	f000 f811 	bl	800142c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800140a:	f7ff ff39 	bl	8001280 <main>

0800140e <LoopForever>:

LoopForever:
    b LoopForever
 800140e:	e7fe      	b.n	800140e <LoopForever>
  ldr   r0, =_estack
 8001410:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800141c:	080014c0 	.word	0x080014c0
  ldr r2, =_sbss
 8001420:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001424:	20000558 	.word	0x20000558

08001428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC1_2_IRQHandler>
	...

0800142c <__libc_init_array>:
 800142c:	b570      	push	{r4, r5, r6, lr}
 800142e:	2600      	movs	r6, #0
 8001430:	4d0c      	ldr	r5, [pc, #48]	; (8001464 <__libc_init_array+0x38>)
 8001432:	4c0d      	ldr	r4, [pc, #52]	; (8001468 <__libc_init_array+0x3c>)
 8001434:	1b64      	subs	r4, r4, r5
 8001436:	10a4      	asrs	r4, r4, #2
 8001438:	42a6      	cmp	r6, r4
 800143a:	d109      	bne.n	8001450 <__libc_init_array+0x24>
 800143c:	f000 f81a 	bl	8001474 <_init>
 8001440:	2600      	movs	r6, #0
 8001442:	4d0a      	ldr	r5, [pc, #40]	; (800146c <__libc_init_array+0x40>)
 8001444:	4c0a      	ldr	r4, [pc, #40]	; (8001470 <__libc_init_array+0x44>)
 8001446:	1b64      	subs	r4, r4, r5
 8001448:	10a4      	asrs	r4, r4, #2
 800144a:	42a6      	cmp	r6, r4
 800144c:	d105      	bne.n	800145a <__libc_init_array+0x2e>
 800144e:	bd70      	pop	{r4, r5, r6, pc}
 8001450:	f855 3b04 	ldr.w	r3, [r5], #4
 8001454:	4798      	blx	r3
 8001456:	3601      	adds	r6, #1
 8001458:	e7ee      	b.n	8001438 <__libc_init_array+0xc>
 800145a:	f855 3b04 	ldr.w	r3, [r5], #4
 800145e:	4798      	blx	r3
 8001460:	3601      	adds	r6, #1
 8001462:	e7f2      	b.n	800144a <__libc_init_array+0x1e>
 8001464:	080014b8 	.word	0x080014b8
 8001468:	080014b8 	.word	0x080014b8
 800146c:	080014b8 	.word	0x080014b8
 8001470:	080014bc 	.word	0x080014bc

08001474 <_init>:
 8001474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001476:	bf00      	nop
 8001478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147a:	bc08      	pop	{r3}
 800147c:	469e      	mov	lr, r3
 800147e:	4770      	bx	lr

08001480 <_fini>:
 8001480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001482:	bf00      	nop
 8001484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001486:	bc08      	pop	{r3}
 8001488:	469e      	mov	lr, r3
 800148a:	4770      	bx	lr


STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001304  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001434  08001434  00011434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001460  08001460  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001460  08001460  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001460  08001460  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001460  08001460  00011460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001464  08001464  00011464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000020  08001488  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001488  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025a1  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000be6  00000000  00000000  000225ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000010f9  00000000  00000000  000231d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002b0  00000000  00000000  000242d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000228  00000000  00000000  00024580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000339a  00000000  00000000  000247a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003f8a  00000000  00000000  00027b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000be9d  00000000  00000000  0002bacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00037969  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008b0  00000000  00000000  000379bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	0800141c 	.word	0x0800141c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	0800141c 	.word	0x0800141c

08000170 <Keypad_Init>:

int Keypad_row[] = {KeyPad_R0 , KeyPad_R1 , KeyPad_R2 , KeyPad_R3};
int Keypad_col[] = {KeyPad_C0 , KeyPad_C1 , KeyPad_C2 , KeyPad_C3};
	
void Keypad_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	// Enable clock
	GPIOB_CLOCK_ENABLE();
 8000176:	4b2f      	ldr	r3, [pc, #188]	; (8000234 <Keypad_Init+0xc4>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a2e      	ldr	r2, [pc, #184]	; (8000234 <Keypad_Init+0xc4>)
 800017c:	f043 0308 	orr.w	r3, r3, #8
 8000180:	6193      	str	r3, [r2, #24]

	GPIO_PinConfig_t cfg;

	// columns and rows as outputs
	cfg.GPIO_Mode = GPIO_PIN_MODE_OUTPUT_PP;
 8000182:	2304      	movs	r3, #4
 8000184:	71bb      	strb	r3, [r7, #6]
	cfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000186:	2301      	movs	r3, #1
 8000188:	71fb      	strb	r3, [r7, #7]

	cfg.GPIO_PinNumber = KeyPad_C0 ;
 800018a:	2340      	movs	r3, #64	; 0x40
 800018c:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KeyPad_PORT, &cfg);
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	4619      	mov	r1, r3
 8000192:	4829      	ldr	r0, [pc, #164]	; (8000238 <Keypad_Init+0xc8>)
 8000194:	f000 feba 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = KeyPad_C1 ;
 8000198:	2380      	movs	r3, #128	; 0x80
 800019a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KeyPad_PORT, &cfg);
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	4619      	mov	r1, r3
 80001a0:	4825      	ldr	r0, [pc, #148]	; (8000238 <Keypad_Init+0xc8>)
 80001a2:	f000 feb3 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = KeyPad_C2 ;
 80001a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001aa:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KeyPad_PORT, &cfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4821      	ldr	r0, [pc, #132]	; (8000238 <Keypad_Init+0xc8>)
 80001b2:	f000 feab 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = KeyPad_C3;
 80001b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001ba:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KeyPad_PORT, &cfg);
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	4619      	mov	r1, r3
 80001c0:	481d      	ldr	r0, [pc, #116]	; (8000238 <Keypad_Init+0xc8>)
 80001c2:	f000 fea3 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = KeyPad_R0;
 80001c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80001ca:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KeyPad_PORT, &cfg);
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	4619      	mov	r1, r3
 80001d0:	4819      	ldr	r0, [pc, #100]	; (8000238 <Keypad_Init+0xc8>)
 80001d2:	f000 fe9b 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = KeyPad_R1;
 80001d6:	2308      	movs	r3, #8
 80001d8:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KeyPad_PORT, &cfg);
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	4619      	mov	r1, r3
 80001de:	4816      	ldr	r0, [pc, #88]	; (8000238 <Keypad_Init+0xc8>)
 80001e0:	f000 fe94 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = KeyPad_R2;
 80001e4:	2310      	movs	r3, #16
 80001e6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KeyPad_PORT, &cfg);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4812      	ldr	r0, [pc, #72]	; (8000238 <Keypad_Init+0xc8>)
 80001ee:	f000 fe8d 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = KeyPad_R3;
 80001f2:	2320      	movs	r3, #32
 80001f4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KeyPad_PORT, &cfg);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4619      	mov	r1, r3
 80001fa:	480f      	ldr	r0, [pc, #60]	; (8000238 <Keypad_Init+0xc8>)
 80001fc:	f000 fe86 	bl	8000f0c <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(KeyPad_PORT, KeyPad_R0, GPIO_PIN_STATE_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000206:	480c      	ldr	r0, [pc, #48]	; (8000238 <Keypad_Init+0xc8>)
 8000208:	f000 ff25 	bl	8001056 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KeyPad_PORT, KeyPad_R1, GPIO_PIN_STATE_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	2108      	movs	r1, #8
 8000210:	4809      	ldr	r0, [pc, #36]	; (8000238 <Keypad_Init+0xc8>)
 8000212:	f000 ff20 	bl	8001056 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KeyPad_PORT, KeyPad_R2, GPIO_PIN_STATE_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	2110      	movs	r1, #16
 800021a:	4807      	ldr	r0, [pc, #28]	; (8000238 <Keypad_Init+0xc8>)
 800021c:	f000 ff1b 	bl	8001056 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KeyPad_PORT, KeyPad_R3, GPIO_PIN_STATE_SET);
 8000220:	2201      	movs	r2, #1
 8000222:	2120      	movs	r1, #32
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <Keypad_Init+0xc8>)
 8000226:	f000 ff16 	bl	8001056 <MCAL_GPIO_WritePin>
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000
 8000238:	40010c00 	.word	0x40010c00

0800023c <Keypad_GetKey>:

char Keypad_GetKey(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
	int row , column;
	
	for( column = 0 ; column < 4 ; column++ )
 8000242:	2300      	movs	r3, #0
 8000244:	603b      	str	r3, [r7, #0]
 8000246:	e0b6      	b.n	80003b6 <Keypad_GetKey+0x17a>
	{
		//Columns output are high
		MCAL_GPIO_WritePin(KeyPad_PORT, Keypad_col[0], GPIO_PIN_STATE_SET);
 8000248:	4b5f      	ldr	r3, [pc, #380]	; (80003c8 <Keypad_GetKey+0x18c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	2201      	movs	r2, #1
 8000250:	4619      	mov	r1, r3
 8000252:	485e      	ldr	r0, [pc, #376]	; (80003cc <Keypad_GetKey+0x190>)
 8000254:	f000 feff 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KeyPad_PORT, Keypad_col[1], GPIO_PIN_STATE_SET);
 8000258:	4b5b      	ldr	r3, [pc, #364]	; (80003c8 <Keypad_GetKey+0x18c>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	2201      	movs	r2, #1
 8000260:	4619      	mov	r1, r3
 8000262:	485a      	ldr	r0, [pc, #360]	; (80003cc <Keypad_GetKey+0x190>)
 8000264:	f000 fef7 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KeyPad_PORT, Keypad_col[2], GPIO_PIN_STATE_SET);
 8000268:	4b57      	ldr	r3, [pc, #348]	; (80003c8 <Keypad_GetKey+0x18c>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	b29b      	uxth	r3, r3
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	4856      	ldr	r0, [pc, #344]	; (80003cc <Keypad_GetKey+0x190>)
 8000274:	f000 feef 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KeyPad_PORT, Keypad_col[3], GPIO_PIN_STATE_SET);
 8000278:	4b53      	ldr	r3, [pc, #332]	; (80003c8 <Keypad_GetKey+0x18c>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	4852      	ldr	r0, [pc, #328]	; (80003cc <Keypad_GetKey+0x190>)
 8000284:	f000 fee7 	bl	8001056 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(KeyPad_PORT, Keypad_col[column], GPIO_PIN_STATE_RESET);
 8000288:	4a4f      	ldr	r2, [pc, #316]	; (80003c8 <Keypad_GetKey+0x18c>)
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	b29b      	uxth	r3, r3
 8000292:	2200      	movs	r2, #0
 8000294:	4619      	mov	r1, r3
 8000296:	484d      	ldr	r0, [pc, #308]	; (80003cc <Keypad_GetKey+0x190>)
 8000298:	f000 fedd 	bl	8001056 <MCAL_GPIO_WritePin>

		for( row = 0 ; row < 4 ; row++ )
 800029c:	2300      	movs	r3, #0
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	e082      	b.n	80003a8 <Keypad_GetKey+0x16c>
		{
			if(  MCAL_GPIO_ReadPin(KeyPad_PORT, Keypad_row[row]) == GPIO_PIN_STATE_RESET )
 80002a2:	4a4b      	ldr	r2, [pc, #300]	; (80003d0 <Keypad_GetKey+0x194>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	4619      	mov	r1, r3
 80002ae:	4847      	ldr	r0, [pc, #284]	; (80003cc <Keypad_GetKey+0x190>)
 80002b0:	f000 feba 	bl	8001028 <MCAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d16a      	bne.n	8000390 <Keypad_GetKey+0x154>
			{
				while(  MCAL_GPIO_ReadPin(KeyPad_PORT, Keypad_row[row]) == GPIO_PIN_STATE_RESET );  // wait till it goes high again
 80002ba:	bf00      	nop
 80002bc:	4a44      	ldr	r2, [pc, #272]	; (80003d0 <Keypad_GetKey+0x194>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	4619      	mov	r1, r3
 80002c8:	4840      	ldr	r0, [pc, #256]	; (80003cc <Keypad_GetKey+0x190>)
 80002ca:	f000 fead 	bl	8001028 <MCAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f3      	beq.n	80002bc <Keypad_GetKey+0x80>
				
				switch(column)
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	d863      	bhi.n	80003a2 <Keypad_GetKey+0x166>
 80002da:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <Keypad_GetKey+0xa4>)
 80002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e0:	080002f1 	.word	0x080002f1
 80002e4:	08000319 	.word	0x08000319
 80002e8:	08000341 	.word	0x08000341
 80002ec:	08000369 	.word	0x08000369
				{
				case 0:
					if( row == 0 )return '7';
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d101      	bne.n	80002fa <Keypad_GetKey+0xbe>
 80002f6:	2337      	movs	r3, #55	; 0x37
 80002f8:	e062      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 1 )return '4';
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d101      	bne.n	8000304 <Keypad_GetKey+0xc8>
 8000300:	2334      	movs	r3, #52	; 0x34
 8000302:	e05d      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 2 )return '1';
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b02      	cmp	r3, #2
 8000308:	d101      	bne.n	800030e <Keypad_GetKey+0xd2>
 800030a:	2331      	movs	r3, #49	; 0x31
 800030c:	e058      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 3 )return '!';  // clear the screen
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d13f      	bne.n	8000394 <Keypad_GetKey+0x158>
 8000314:	2321      	movs	r3, #33	; 0x21
 8000316:	e053      	b.n	80003c0 <Keypad_GetKey+0x184>
					break;
				
				case 1:
					if( row == 0 )return '8';
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <Keypad_GetKey+0xe6>
 800031e:	2338      	movs	r3, #56	; 0x38
 8000320:	e04e      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 1 )return '5';
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d101      	bne.n	800032c <Keypad_GetKey+0xf0>
 8000328:	2335      	movs	r3, #53	; 0x35
 800032a:	e049      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 2 )return '2';
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b02      	cmp	r3, #2
 8000330:	d101      	bne.n	8000336 <Keypad_GetKey+0xfa>
 8000332:	2332      	movs	r3, #50	; 0x32
 8000334:	e044      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 3 )return '0';
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d12d      	bne.n	8000398 <Keypad_GetKey+0x15c>
 800033c:	2330      	movs	r3, #48	; 0x30
 800033e:	e03f      	b.n	80003c0 <Keypad_GetKey+0x184>
					break;	
				
				case 2:
					if( row == 0 )return '9';
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d101      	bne.n	800034a <Keypad_GetKey+0x10e>
 8000346:	2339      	movs	r3, #57	; 0x39
 8000348:	e03a      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 1 )return '6';
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d101      	bne.n	8000354 <Keypad_GetKey+0x118>
 8000350:	2336      	movs	r3, #54	; 0x36
 8000352:	e035      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 2 )return '3';
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d101      	bne.n	800035e <Keypad_GetKey+0x122>
 800035a:	2333      	movs	r3, #51	; 0x33
 800035c:	e030      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 3 )return '=';
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d11b      	bne.n	800039c <Keypad_GetKey+0x160>
 8000364:	233d      	movs	r3, #61	; 0x3d
 8000366:	e02b      	b.n	80003c0 <Keypad_GetKey+0x184>
					break;
				
				case 3:
					if( row == 0 )return '/';
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <Keypad_GetKey+0x136>
 800036e:	232f      	movs	r3, #47	; 0x2f
 8000370:	e026      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 1 )return '*';
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d101      	bne.n	800037c <Keypad_GetKey+0x140>
 8000378:	232a      	movs	r3, #42	; 0x2a
 800037a:	e021      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 2 )return '-';
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b02      	cmp	r3, #2
 8000380:	d101      	bne.n	8000386 <Keypad_GetKey+0x14a>
 8000382:	232d      	movs	r3, #45	; 0x2d
 8000384:	e01c      	b.n	80003c0 <Keypad_GetKey+0x184>
					else if( row == 3 )return '+';
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d109      	bne.n	80003a0 <Keypad_GetKey+0x164>
 800038c:	232b      	movs	r3, #43	; 0x2b
 800038e:	e017      	b.n	80003c0 <Keypad_GetKey+0x184>
					break;											
				}		
			}		
 8000390:	bf00      	nop
 8000392:	e006      	b.n	80003a2 <Keypad_GetKey+0x166>
					break;
 8000394:	bf00      	nop
 8000396:	e004      	b.n	80003a2 <Keypad_GetKey+0x166>
					break;	
 8000398:	bf00      	nop
 800039a:	e002      	b.n	80003a2 <Keypad_GetKey+0x166>
					break;
 800039c:	bf00      	nop
 800039e:	e000      	b.n	80003a2 <Keypad_GetKey+0x166>
					break;											
 80003a0:	bf00      	nop
		for( row = 0 ; row < 4 ; row++ )
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3301      	adds	r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b03      	cmp	r3, #3
 80003ac:	f77f af79 	ble.w	80002a2 <Keypad_GetKey+0x66>
	for( column = 0 ; column < 4 ; column++ )
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	3301      	adds	r3, #1
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	f77f af45 	ble.w	8000248 <Keypad_GetKey+0xc>
		}			
	}
	return 'N'; // Return 'N' if no key is pressed	
 80003be:	234e      	movs	r3, #78	; 0x4e
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000010 	.word	0x20000010
 80003cc:	40010c00 	.word	0x40010c00
 80003d0:	20000000 	.word	0x20000000

080003d4 <_delay_ms>:
void LCD_isbusy(void);
void LCD_Kick(void);
void LCD_IsValid_Position(void);

void _delay_ms(unsigned int t)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	unsigned int i , j;
	for( i = 0 ; i < t ; i++ )
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	e00b      	b.n	80003fa <_delay_ms+0x26>
		for( j = 0 ; j < 255 ; j++ );
 80003e2:	2300      	movs	r3, #0
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	e002      	b.n	80003ee <_delay_ms+0x1a>
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	3301      	adds	r3, #1
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	2bfe      	cmp	r3, #254	; 0xfe
 80003f2:	d9f9      	bls.n	80003e8 <_delay_ms+0x14>
	for( i = 0 ; i < t ; i++ )
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	3301      	adds	r3, #1
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	68fa      	ldr	r2, [r7, #12]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d3ef      	bcc.n	80003e2 <_delay_ms+0xe>
}
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
	...

08000410 <LCD_INIT>:


void LCD_INIT(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	//Enable clock
	GPIOA_CLOCK_ENABLE();
 8000414:	4b40      	ldr	r3, [pc, #256]	; (8000518 <LCD_INIT+0x108>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a3f      	ldr	r2, [pc, #252]	; (8000518 <LCD_INIT+0x108>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6193      	str	r3, [r2, #24]

	_delay_ms(20);         // LCD power ON delay
 8000420:	2014      	movs	r0, #20
 8000422:	f7ff ffd7 	bl	80003d4 <_delay_ms>

	cfg.GPIO_Mode = GPIO_PIN_MODE_OUTPUT_PP;
 8000426:	4b3d      	ldr	r3, [pc, #244]	; (800051c <LCD_INIT+0x10c>)
 8000428:	2204      	movs	r2, #4
 800042a:	709a      	strb	r2, [r3, #2]
	cfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800042c:	4b3b      	ldr	r3, [pc, #236]	; (800051c <LCD_INIT+0x10c>)
 800042e:	2201      	movs	r2, #1
 8000430:	70da      	strb	r2, [r3, #3]
    // CTRL PINS as output
	cfg.GPIO_PinNumber = RS_SWITCH ;
 8000432:	4b3a      	ldr	r3, [pc, #232]	; (800051c <LCD_INIT+0x10c>)
 8000434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000438:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_CTRL, &cfg);
 800043a:	4938      	ldr	r1, [pc, #224]	; (800051c <LCD_INIT+0x10c>)
 800043c:	4838      	ldr	r0, [pc, #224]	; (8000520 <LCD_INIT+0x110>)
 800043e:	f000 fd65 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = RW_SWITCH ;
 8000442:	4b36      	ldr	r3, [pc, #216]	; (800051c <LCD_INIT+0x10c>)
 8000444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000448:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_CTRL, &cfg);
 800044a:	4934      	ldr	r1, [pc, #208]	; (800051c <LCD_INIT+0x10c>)
 800044c:	4834      	ldr	r0, [pc, #208]	; (8000520 <LCD_INIT+0x110>)
 800044e:	f000 fd5d 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = EN_SWITCH ;
 8000452:	4b32      	ldr	r3, [pc, #200]	; (800051c <LCD_INIT+0x10c>)
 8000454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000458:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_CTRL, &cfg);
 800045a:	4930      	ldr	r1, [pc, #192]	; (800051c <LCD_INIT+0x10c>)
 800045c:	4830      	ldr	r0, [pc, #192]	; (8000520 <LCD_INIT+0x110>)
 800045e:	f000 fd55 	bl	8000f0c <MCAL_GPIO_Init>
	//Output 0 on ctrl pins
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_STATE_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000468:	482d      	ldr	r0, [pc, #180]	; (8000520 <LCD_INIT+0x110>)
 800046a:	f000 fdf4 	bl	8001056 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_STATE_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000474:	482a      	ldr	r0, [pc, #168]	; (8000520 <LCD_INIT+0x110>)
 8000476:	f000 fdee 	bl	8001056 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_STATE_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000480:	4827      	ldr	r0, [pc, #156]	; (8000520 <LCD_INIT+0x110>)
 8000482:	f000 fde8 	bl	8001056 <MCAL_GPIO_WritePin>

	// Data PINS as output
	cfg.GPIO_PinNumber = DATA_0 ;
 8000486:	4b25      	ldr	r3, [pc, #148]	; (800051c <LCD_INIT+0x10c>)
 8000488:	2201      	movs	r2, #1
 800048a:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT, &cfg);
 800048c:	4923      	ldr	r1, [pc, #140]	; (800051c <LCD_INIT+0x10c>)
 800048e:	4824      	ldr	r0, [pc, #144]	; (8000520 <LCD_INIT+0x110>)
 8000490:	f000 fd3c 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = DATA_1 ;
 8000494:	4b21      	ldr	r3, [pc, #132]	; (800051c <LCD_INIT+0x10c>)
 8000496:	2202      	movs	r2, #2
 8000498:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT, &cfg);
 800049a:	4920      	ldr	r1, [pc, #128]	; (800051c <LCD_INIT+0x10c>)
 800049c:	4820      	ldr	r0, [pc, #128]	; (8000520 <LCD_INIT+0x110>)
 800049e:	f000 fd35 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = DATA_2 ;
 80004a2:	4b1e      	ldr	r3, [pc, #120]	; (800051c <LCD_INIT+0x10c>)
 80004a4:	2204      	movs	r2, #4
 80004a6:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT, &cfg);
 80004a8:	491c      	ldr	r1, [pc, #112]	; (800051c <LCD_INIT+0x10c>)
 80004aa:	481d      	ldr	r0, [pc, #116]	; (8000520 <LCD_INIT+0x110>)
 80004ac:	f000 fd2e 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = DATA_3 ;
 80004b0:	4b1a      	ldr	r3, [pc, #104]	; (800051c <LCD_INIT+0x10c>)
 80004b2:	2208      	movs	r2, #8
 80004b4:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT, &cfg);
 80004b6:	4919      	ldr	r1, [pc, #100]	; (800051c <LCD_INIT+0x10c>)
 80004b8:	4819      	ldr	r0, [pc, #100]	; (8000520 <LCD_INIT+0x110>)
 80004ba:	f000 fd27 	bl	8000f0c <MCAL_GPIO_Init>

	#ifdef EIGHT_BIT_MODE

		   cfg.GPIO_PinNumber = DATA_4 ;
 80004be:	4b17      	ldr	r3, [pc, #92]	; (800051c <LCD_INIT+0x10c>)
 80004c0:	2210      	movs	r2, #16
 80004c2:	801a      	strh	r2, [r3, #0]
		   MCAL_GPIO_Init(LCD_PORT, &cfg);
 80004c4:	4915      	ldr	r1, [pc, #84]	; (800051c <LCD_INIT+0x10c>)
 80004c6:	4816      	ldr	r0, [pc, #88]	; (8000520 <LCD_INIT+0x110>)
 80004c8:	f000 fd20 	bl	8000f0c <MCAL_GPIO_Init>

		   cfg.GPIO_PinNumber = DATA_5 ;
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <LCD_INIT+0x10c>)
 80004ce:	2220      	movs	r2, #32
 80004d0:	801a      	strh	r2, [r3, #0]
		   MCAL_GPIO_Init(LCD_PORT, &cfg);
 80004d2:	4912      	ldr	r1, [pc, #72]	; (800051c <LCD_INIT+0x10c>)
 80004d4:	4812      	ldr	r0, [pc, #72]	; (8000520 <LCD_INIT+0x110>)
 80004d6:	f000 fd19 	bl	8000f0c <MCAL_GPIO_Init>

		   cfg.GPIO_PinNumber = DATA_6 ;
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <LCD_INIT+0x10c>)
 80004dc:	2240      	movs	r2, #64	; 0x40
 80004de:	801a      	strh	r2, [r3, #0]
		   MCAL_GPIO_Init(LCD_PORT, &cfg);
 80004e0:	490e      	ldr	r1, [pc, #56]	; (800051c <LCD_INIT+0x10c>)
 80004e2:	480f      	ldr	r0, [pc, #60]	; (8000520 <LCD_INIT+0x110>)
 80004e4:	f000 fd12 	bl	8000f0c <MCAL_GPIO_Init>

		   cfg.GPIO_PinNumber = DATA_7 ;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <LCD_INIT+0x10c>)
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	801a      	strh	r2, [r3, #0]
		   MCAL_GPIO_Init(LCD_PORT, &cfg);
 80004ee:	490b      	ldr	r1, [pc, #44]	; (800051c <LCD_INIT+0x10c>)
 80004f0:	480b      	ldr	r0, [pc, #44]	; (8000520 <LCD_INIT+0x110>)
 80004f2:	f000 fd0b 	bl	8000f0c <MCAL_GPIO_Init>


	       LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80004f6:	2038      	movs	r0, #56	; 0x38
 80004f8:	f000 f814 	bl	8000524 <LCD_WRITE_COMMAND>
	#ifdef FOUR_BIT_MODE
	       LCD_WRITE_COMMAND(0x02);
		   LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	
	LCD_Clear_Screen();
 80004fc:	f000 f8b8 	bl	8000670 <LCD_Clear_Screen>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000500:	2006      	movs	r0, #6
 8000502:	f000 f80f 	bl	8000524 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000506:	2080      	movs	r0, #128	; 0x80
 8000508:	f000 f80c 	bl	8000524 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800050c:	200f      	movs	r0, #15
 800050e:	f000 f809 	bl	8000524 <LCD_WRITE_COMMAND>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	20000040 	.word	0x20000040
 8000520:	40010800 	.word	0x40010800

08000524 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
	LCD_isbusy();
 800052e:	f000 f855 	bl	80005dc <LCD_isbusy>
	
	#ifdef EIGHT_BIT_MODE
		   MCAL_GPIO_WritePort(LCD_PORT,(uint16_t) command);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	b29b      	uxth	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	480a      	ldr	r0, [pc, #40]	; (8000564 <LCD_WRITE_COMMAND+0x40>)
 800053a:	f000 fda3 	bl	8001084 <MCAL_GPIO_WritePort>
		   MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_STATE_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <LCD_WRITE_COMMAND+0x40>)
 8000546:	f000 fd86 	bl	8001056 <MCAL_GPIO_WritePin>
		   MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_STATE_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <LCD_WRITE_COMMAND+0x40>)
 8000552:	f000 fd80 	bl	8001056 <MCAL_GPIO_WritePin>

		   LCD_Kick();		
 8000556:	f000 f875 	bl	8000644 <LCD_Kick>
	      // LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);   // Lower Nibble
	       MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_STATE_RESET);
	       MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_STATE_SET);
	       LCD_Kick();		   	       
	#endif	
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40010800 	.word	0x40010800

08000568 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	LCD_isbusy();
 8000572:	f000 f833 	bl	80005dc <LCD_isbusy>

	#ifdef EIGHT_BIT_MODE
		   MCAL_GPIO_WritePort(LCD_PORT,(uint16_t) character);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	b29b      	uxth	r3, r3
 800057a:	4619      	mov	r1, r3
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <LCD_WRITE_CHAR+0x44>)
 800057e:	f000 fd81 	bl	8001084 <MCAL_GPIO_WritePort>
	       MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_STATE_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <LCD_WRITE_CHAR+0x44>)
 800058a:	f000 fd64 	bl	8001056 <MCAL_GPIO_WritePin>
	       MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_STATE_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <LCD_WRITE_CHAR+0x44>)
 8000596:	f000 fd5e 	bl	8001056 <MCAL_GPIO_WritePin>

		   LCD_Kick();
 800059a:	f000 f853 	bl	8000644 <LCD_Kick>
	       MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_STATE_RESET);
	       MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_STATE_SET);
	       LCD_Kick();	
	#endif

	LCD_IsValid_Position();
 800059e:	f000 f8a1 	bl	80006e4 <LCD_IsValid_Position>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40010800 	.word	0x40010800

080005b0 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	while (*string > 0)
 80005b8:	e006      	b.n	80005c8 <LCD_WRITE_STRING+0x18>
		LCD_WRITE_CHAR(*string++);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	1c5a      	adds	r2, r3, #1
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ffd0 	bl	8000568 <LCD_WRITE_CHAR>
	while (*string > 0)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1f4      	bne.n	80005ba <LCD_WRITE_STRING+0xa>
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <LCD_isbusy>:

void LCD_isbusy(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	// Make 7th bit of LCD data port as input
	cfg.GPIO_Mode = GPIO_PIN_MODE_INPUT_FLOA;
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <LCD_isbusy+0x60>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	709a      	strb	r2, [r3, #2]
	cfg.GPIO_PinNumber = GPIO_PIN_7 ;
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <LCD_isbusy+0x60>)
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(LCD_PORT, &cfg);
 80005ec:	4913      	ldr	r1, [pc, #76]	; (800063c <LCD_isbusy+0x60>)
 80005ee:	4814      	ldr	r0, [pc, #80]	; (8000640 <LCD_isbusy+0x64>)
 80005f0:	f000 fc8c 	bl	8000f0c <MCAL_GPIO_Init>

    MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_STATE_SET);       // Read Mode
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <LCD_isbusy+0x64>)
 80005fc:	f000 fd2b 	bl	8001056 <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_STATE_RESET);	   // Select command register
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <LCD_isbusy+0x64>)
 8000608:	f000 fd25 	bl	8001056 <MCAL_GPIO_WritePin>

	LCD_Kick();
 800060c:	f000 f81a 	bl	8000644 <LCD_Kick>

	// Make 7th bit of LCD data port as output
	cfg.GPIO_Mode = GPIO_PIN_MODE_OUTPUT_PP;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <LCD_isbusy+0x60>)
 8000612:	2204      	movs	r2, #4
 8000614:	709a      	strb	r2, [r3, #2]
	cfg.GPIO_PinNumber = GPIO_PIN_7 ;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <LCD_isbusy+0x60>)
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	801a      	strh	r2, [r3, #0]
	cfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <LCD_isbusy+0x60>)
 800061e:	2201      	movs	r2, #1
 8000620:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &cfg);
 8000622:	4906      	ldr	r1, [pc, #24]	; (800063c <LCD_isbusy+0x60>)
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <LCD_isbusy+0x64>)
 8000626:	f000 fc71 	bl	8000f0c <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_STATE_RESET);      // Write Mode
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <LCD_isbusy+0x64>)
 8000632:	f000 fd10 	bl	8001056 <MCAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000040 	.word	0x20000040
 8000640:	40010800 	.word	0x40010800

08000644 <LCD_Kick>:

void LCD_Kick(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_STATE_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064e:	4807      	ldr	r0, [pc, #28]	; (800066c <LCD_Kick+0x28>)
 8000650:	f000 fd01 	bl	8001056 <MCAL_GPIO_WritePin>
	_delay_ms(30);
 8000654:	201e      	movs	r0, #30
 8000656:	f7ff febd 	bl	80003d4 <_delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_STATE_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <LCD_Kick+0x28>)
 8000662:	f000 fcf8 	bl	8001056 <MCAL_GPIO_WritePin>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40010800 	.word	0x40010800

08000670 <LCD_Clear_Screen>:

void LCD_Clear_Screen(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	Position = 0;
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <LCD_Clear_Screen+0x14>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 800067a:	2001      	movs	r0, #1
 800067c:	f7ff ff52 	bl	8000524 <LCD_WRITE_COMMAND>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000003c 	.word	0x2000003c

08000688 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char Newline, unsigned char NewPosition)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
	if ( Newline == 0 )
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10c      	bne.n	80006b8 <LCD_GOTO_XY+0x30>
	{
		Position = NewPosition;
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <LCD_GOTO_XY+0x58>)
 80006a2:	6013      	str	r3, [r2, #0]

		if ( NewPosition < 16 && NewPosition >= 0 )
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	2b0f      	cmp	r3, #15
 80006a8:	d816      	bhi.n	80006d8 <LCD_GOTO_XY+0x50>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + NewPosition);
 80006aa:	79bb      	ldrb	r3, [r7, #6]
 80006ac:	3b80      	subs	r3, #128	; 0x80
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff37 	bl	8000524 <LCD_WRITE_COMMAND>
		if ( NewPosition < 16 && NewPosition >= 0 )
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + NewPosition);
		}
	}
}
 80006b6:	e00f      	b.n	80006d8 <LCD_GOTO_XY+0x50>
	else if ( Newline == 1 )
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d10c      	bne.n	80006d8 <LCD_GOTO_XY+0x50>
		Position = NewPosition + 16;
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	3310      	adds	r3, #16
 80006c2:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <LCD_GOTO_XY+0x58>)
 80006c4:	6013      	str	r3, [r2, #0]
		if ( NewPosition < 16 && NewPosition >= 0 )
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	2b0f      	cmp	r3, #15
 80006ca:	d805      	bhi.n	80006d8 <LCD_GOTO_XY+0x50>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + NewPosition);
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	3b40      	subs	r3, #64	; 0x40
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff26 	bl	8000524 <LCD_WRITE_COMMAND>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000003c 	.word	0x2000003c

080006e4 <LCD_IsValid_Position>:

void LCD_IsValid_Position(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	Position++;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <LCD_IsValid_Position+0x40>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LCD_IsValid_Position+0x40>)
 80006f0:	6013      	str	r3, [r2, #0]

	if (Position == 16)
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <LCD_IsValid_Position+0x40>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b10      	cmp	r3, #16
 80006f8:	d104      	bne.n	8000704 <LCD_IsValid_Position+0x20>
	{
		LCD_GOTO_XY(1,0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff ffc3 	bl	8000688 <LCD_GOTO_XY>
	{
		LCD_Clear_Screen();
		LCD_GOTO_XY(0,0);
		Position = 0;
	}
}
 8000702:	e00c      	b.n	800071e <LCD_IsValid_Position+0x3a>
	else if (Position == 32 )
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <LCD_IsValid_Position+0x40>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b20      	cmp	r3, #32
 800070a:	d108      	bne.n	800071e <LCD_IsValid_Position+0x3a>
		LCD_Clear_Screen();
 800070c:	f7ff ffb0 	bl	8000670 <LCD_Clear_Screen>
		LCD_GOTO_XY(0,0);
 8000710:	2100      	movs	r1, #0
 8000712:	2000      	movs	r0, #0
 8000714:	f7ff ffb8 	bl	8000688 <LCD_GOTO_XY>
		Position = 0;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <LCD_IsValid_Position+0x40>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000003c 	.word	0x2000003c

08000728 <SevSegment_Init>:

#include "sevensegment.h"


void SevSegment_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
	//Enable clock
	GPIOB_CLOCK_ENABLE();
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <SevSegment_Init+0x90>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SevSegment_Init+0x90>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6193      	str	r3, [r2, #24]

	GPIO_PinConfig_t cfg;

	cfg.GPIO_Mode = GPIO_PIN_MODE_OUTPUT_PP;
 800073a:	2304      	movs	r3, #4
 800073c:	71bb      	strb	r3, [r7, #6]
	cfg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800073e:	2301      	movs	r3, #1
 8000740:	71fb      	strb	r3, [r7, #7]

	cfg.GPIO_PinNumber = A ;
 8000742:	2301      	movs	r3, #1
 8000744:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SevSeg_Port, &cfg);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	481c      	ldr	r0, [pc, #112]	; (80007bc <SevSegment_Init+0x94>)
 800074c:	f000 fbde 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = B ;
 8000750:	2302      	movs	r3, #2
 8000752:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SevSeg_Port, &cfg);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4818      	ldr	r0, [pc, #96]	; (80007bc <SevSegment_Init+0x94>)
 800075a:	f000 fbd7 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = C ;
 800075e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000762:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SevSeg_Port, &cfg);
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4814      	ldr	r0, [pc, #80]	; (80007bc <SevSegment_Init+0x94>)
 800076a:	f000 fbcf 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = D ;
 800076e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000772:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SevSeg_Port, &cfg);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4810      	ldr	r0, [pc, #64]	; (80007bc <SevSegment_Init+0x94>)
 800077a:	f000 fbc7 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = E ;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SevSeg_Port, &cfg);
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <SevSegment_Init+0x94>)
 800078a:	f000 fbbf 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = F ;
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SevSeg_Port, &cfg);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <SevSegment_Init+0x94>)
 800079a:	f000 fbb7 	bl	8000f0c <MCAL_GPIO_Init>

	cfg.GPIO_PinNumber = G ;
 800079e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007a2:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SevSeg_Port, &cfg);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <SevSegment_Init+0x94>)
 80007aa:	f000 fbaf 	bl	8000f0c <MCAL_GPIO_Init>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <SevSegment_Write_Num>:


void SevSegment_Write_Num(int num)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	//Common Anode
	switch(num)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b09      	cmp	r3, #9
 80007cc:	f200 81b2 	bhi.w	8000b34 <SevSegment_Write_Num+0x374>
 80007d0:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <SevSegment_Write_Num+0x18>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	08000801 	.word	0x08000801
 80007dc:	08000853 	.word	0x08000853
 80007e0:	080008a5 	.word	0x080008a5
 80007e4:	080008f7 	.word	0x080008f7
 80007e8:	08000949 	.word	0x08000949
 80007ec:	0800099b 	.word	0x0800099b
 80007f0:	080009ed 	.word	0x080009ed
 80007f4:	08000a3f 	.word	0x08000a3f
 80007f8:	08000a91 	.word	0x08000a91
 80007fc:	08000ae3 	.word	0x08000ae3
	{
	case 0:
		MCAL_GPIO_WritePin(SevSeg_Port, A, GPIO_PIN_STATE_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2101      	movs	r1, #1
 8000804:	48ce      	ldr	r0, [pc, #824]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000806:	f000 fc26 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, B, GPIO_PIN_STATE_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2102      	movs	r1, #2
 800080e:	48cc      	ldr	r0, [pc, #816]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000810:	f000 fc21 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, C, GPIO_PIN_STATE_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	48c9      	ldr	r0, [pc, #804]	; (8000b40 <SevSegment_Write_Num+0x380>)
 800081c:	f000 fc1b 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, D, GPIO_PIN_STATE_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000826:	48c6      	ldr	r0, [pc, #792]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000828:	f000 fc15 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, E, GPIO_PIN_STATE_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	48c3      	ldr	r0, [pc, #780]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000834:	f000 fc0f 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, F, GPIO_PIN_STATE_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083e:	48c0      	ldr	r0, [pc, #768]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000840:	f000 fc09 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, G, GPIO_PIN_STATE_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084a:	48bd      	ldr	r0, [pc, #756]	; (8000b40 <SevSegment_Write_Num+0x380>)
 800084c:	f000 fc03 	bl	8001056 <MCAL_GPIO_WritePin>
		break;
 8000850:	e171      	b.n	8000b36 <SevSegment_Write_Num+0x376>
	case 1:
		MCAL_GPIO_WritePin(SevSeg_Port, A, GPIO_PIN_STATE_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2101      	movs	r1, #1
 8000856:	48ba      	ldr	r0, [pc, #744]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000858:	f000 fbfd 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, B, GPIO_PIN_STATE_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2102      	movs	r1, #2
 8000860:	48b7      	ldr	r0, [pc, #732]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000862:	f000 fbf8 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, C, GPIO_PIN_STATE_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086c:	48b4      	ldr	r0, [pc, #720]	; (8000b40 <SevSegment_Write_Num+0x380>)
 800086e:	f000 fbf2 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, D, GPIO_PIN_STATE_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000878:	48b1      	ldr	r0, [pc, #708]	; (8000b40 <SevSegment_Write_Num+0x380>)
 800087a:	f000 fbec 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, E, GPIO_PIN_STATE_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000884:	48ae      	ldr	r0, [pc, #696]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000886:	f000 fbe6 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, F, GPIO_PIN_STATE_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000890:	48ab      	ldr	r0, [pc, #684]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000892:	f000 fbe0 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, G, GPIO_PIN_STATE_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089c:	48a8      	ldr	r0, [pc, #672]	; (8000b40 <SevSegment_Write_Num+0x380>)
 800089e:	f000 fbda 	bl	8001056 <MCAL_GPIO_WritePin>
		break;
 80008a2:	e148      	b.n	8000b36 <SevSegment_Write_Num+0x376>
	case 2:
		MCAL_GPIO_WritePin(SevSeg_Port, A, GPIO_PIN_STATE_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2101      	movs	r1, #1
 80008a8:	48a5      	ldr	r0, [pc, #660]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80008aa:	f000 fbd4 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, B, GPIO_PIN_STATE_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2102      	movs	r1, #2
 80008b2:	48a3      	ldr	r0, [pc, #652]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80008b4:	f000 fbcf 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, C, GPIO_PIN_STATE_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008be:	48a0      	ldr	r0, [pc, #640]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80008c0:	f000 fbc9 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, D, GPIO_PIN_STATE_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ca:	489d      	ldr	r0, [pc, #628]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80008cc:	f000 fbc3 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, E, GPIO_PIN_STATE_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d6:	489a      	ldr	r0, [pc, #616]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80008d8:	f000 fbbd 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, F, GPIO_PIN_STATE_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	4897      	ldr	r0, [pc, #604]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80008e4:	f000 fbb7 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, G, GPIO_PIN_STATE_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ee:	4894      	ldr	r0, [pc, #592]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80008f0:	f000 fbb1 	bl	8001056 <MCAL_GPIO_WritePin>
		break;
 80008f4:	e11f      	b.n	8000b36 <SevSegment_Write_Num+0x376>
	case 3:
		MCAL_GPIO_WritePin(SevSeg_Port, A, GPIO_PIN_STATE_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2101      	movs	r1, #1
 80008fa:	4891      	ldr	r0, [pc, #580]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80008fc:	f000 fbab 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, B, GPIO_PIN_STATE_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2102      	movs	r1, #2
 8000904:	488e      	ldr	r0, [pc, #568]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000906:	f000 fba6 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, C, GPIO_PIN_STATE_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000910:	488b      	ldr	r0, [pc, #556]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000912:	f000 fba0 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, D, GPIO_PIN_STATE_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091c:	4888      	ldr	r0, [pc, #544]	; (8000b40 <SevSegment_Write_Num+0x380>)
 800091e:	f000 fb9a 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, E, GPIO_PIN_STATE_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000928:	4885      	ldr	r0, [pc, #532]	; (8000b40 <SevSegment_Write_Num+0x380>)
 800092a:	f000 fb94 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, F, GPIO_PIN_STATE_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	4882      	ldr	r0, [pc, #520]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000936:	f000 fb8e 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, G, GPIO_PIN_STATE_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000940:	487f      	ldr	r0, [pc, #508]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000942:	f000 fb88 	bl	8001056 <MCAL_GPIO_WritePin>
		break;
 8000946:	e0f6      	b.n	8000b36 <SevSegment_Write_Num+0x376>
	case 4:
		MCAL_GPIO_WritePin(SevSeg_Port, A, GPIO_PIN_STATE_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	487c      	ldr	r0, [pc, #496]	; (8000b40 <SevSegment_Write_Num+0x380>)
 800094e:	f000 fb82 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, B, GPIO_PIN_STATE_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2102      	movs	r1, #2
 8000956:	487a      	ldr	r0, [pc, #488]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000958:	f000 fb7d 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, C, GPIO_PIN_STATE_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	4877      	ldr	r0, [pc, #476]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000964:	f000 fb77 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, D, GPIO_PIN_STATE_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800096e:	4874      	ldr	r0, [pc, #464]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000970:	f000 fb71 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, E, GPIO_PIN_STATE_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097a:	4871      	ldr	r0, [pc, #452]	; (8000b40 <SevSegment_Write_Num+0x380>)
 800097c:	f000 fb6b 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, F, GPIO_PIN_STATE_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000986:	486e      	ldr	r0, [pc, #440]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000988:	f000 fb65 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, G, GPIO_PIN_STATE_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000992:	486b      	ldr	r0, [pc, #428]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000994:	f000 fb5f 	bl	8001056 <MCAL_GPIO_WritePin>
		break;
 8000998:	e0cd      	b.n	8000b36 <SevSegment_Write_Num+0x376>
	case 5:
		MCAL_GPIO_WritePin(SevSeg_Port, A, GPIO_PIN_STATE_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2101      	movs	r1, #1
 800099e:	4868      	ldr	r0, [pc, #416]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80009a0:	f000 fb59 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, B, GPIO_PIN_STATE_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2102      	movs	r1, #2
 80009a8:	4865      	ldr	r0, [pc, #404]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80009aa:	f000 fb54 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, C, GPIO_PIN_STATE_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b4:	4862      	ldr	r0, [pc, #392]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80009b6:	f000 fb4e 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, D, GPIO_PIN_STATE_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c0:	485f      	ldr	r0, [pc, #380]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80009c2:	f000 fb48 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, E, GPIO_PIN_STATE_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009cc:	485c      	ldr	r0, [pc, #368]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80009ce:	f000 fb42 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, F, GPIO_PIN_STATE_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d8:	4859      	ldr	r0, [pc, #356]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80009da:	f000 fb3c 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, G, GPIO_PIN_STATE_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e4:	4856      	ldr	r0, [pc, #344]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80009e6:	f000 fb36 	bl	8001056 <MCAL_GPIO_WritePin>
		break;
 80009ea:	e0a4      	b.n	8000b36 <SevSegment_Write_Num+0x376>
	case 6:
		MCAL_GPIO_WritePin(SevSeg_Port, A, GPIO_PIN_STATE_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2101      	movs	r1, #1
 80009f0:	4853      	ldr	r0, [pc, #332]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80009f2:	f000 fb30 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, B, GPIO_PIN_STATE_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2102      	movs	r1, #2
 80009fa:	4851      	ldr	r0, [pc, #324]	; (8000b40 <SevSegment_Write_Num+0x380>)
 80009fc:	f000 fb2b 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, C, GPIO_PIN_STATE_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a06:	484e      	ldr	r0, [pc, #312]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a08:	f000 fb25 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, D, GPIO_PIN_STATE_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a12:	484b      	ldr	r0, [pc, #300]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a14:	f000 fb1f 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, E, GPIO_PIN_STATE_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a1e:	4848      	ldr	r0, [pc, #288]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a20:	f000 fb19 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, F, GPIO_PIN_STATE_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	4845      	ldr	r0, [pc, #276]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a2c:	f000 fb13 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, G, GPIO_PIN_STATE_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a36:	4842      	ldr	r0, [pc, #264]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a38:	f000 fb0d 	bl	8001056 <MCAL_GPIO_WritePin>
		break;
 8000a3c:	e07b      	b.n	8000b36 <SevSegment_Write_Num+0x376>
	case 7:
		MCAL_GPIO_WritePin(SevSeg_Port, A, GPIO_PIN_STATE_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2101      	movs	r1, #1
 8000a42:	483f      	ldr	r0, [pc, #252]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a44:	f000 fb07 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, B, GPIO_PIN_STATE_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	483c      	ldr	r0, [pc, #240]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a4e:	f000 fb02 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, C, GPIO_PIN_STATE_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a58:	4839      	ldr	r0, [pc, #228]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a5a:	f000 fafc 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, D, GPIO_PIN_STATE_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a64:	4836      	ldr	r0, [pc, #216]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a66:	f000 faf6 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, E, GPIO_PIN_STATE_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4833      	ldr	r0, [pc, #204]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a72:	f000 faf0 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, F, GPIO_PIN_STATE_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4830      	ldr	r0, [pc, #192]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a7e:	f000 faea 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, G, GPIO_PIN_STATE_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a88:	482d      	ldr	r0, [pc, #180]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a8a:	f000 fae4 	bl	8001056 <MCAL_GPIO_WritePin>
		break;
 8000a8e:	e052      	b.n	8000b36 <SevSegment_Write_Num+0x376>
	case 8:
		MCAL_GPIO_WritePin(SevSeg_Port, A, GPIO_PIN_STATE_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2101      	movs	r1, #1
 8000a94:	482a      	ldr	r0, [pc, #168]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000a96:	f000 fade 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, B, GPIO_PIN_STATE_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4828      	ldr	r0, [pc, #160]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000aa0:	f000 fad9 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, C, GPIO_PIN_STATE_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aaa:	4825      	ldr	r0, [pc, #148]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000aac:	f000 fad3 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, D, GPIO_PIN_STATE_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab6:	4822      	ldr	r0, [pc, #136]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000ab8:	f000 facd 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, E, GPIO_PIN_STATE_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac2:	481f      	ldr	r0, [pc, #124]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000ac4:	f000 fac7 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, F, GPIO_PIN_STATE_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ace:	481c      	ldr	r0, [pc, #112]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000ad0:	f000 fac1 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, G, GPIO_PIN_STATE_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ada:	4819      	ldr	r0, [pc, #100]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000adc:	f000 fabb 	bl	8001056 <MCAL_GPIO_WritePin>
		break;
 8000ae0:	e029      	b.n	8000b36 <SevSegment_Write_Num+0x376>
	case 9:
		MCAL_GPIO_WritePin(SevSeg_Port, A, GPIO_PIN_STATE_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4816      	ldr	r0, [pc, #88]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000ae8:	f000 fab5 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, B, GPIO_PIN_STATE_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2102      	movs	r1, #2
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000af2:	f000 fab0 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, C, GPIO_PIN_STATE_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afc:	4810      	ldr	r0, [pc, #64]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000afe:	f000 faaa 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, D, GPIO_PIN_STATE_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000b0a:	f000 faa4 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, E, GPIO_PIN_STATE_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b14:	480a      	ldr	r0, [pc, #40]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000b16:	f000 fa9e 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, F, GPIO_PIN_STATE_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000b22:	f000 fa98 	bl	8001056 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(SevSeg_Port, G, GPIO_PIN_STATE_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <SevSegment_Write_Num+0x380>)
 8000b2e:	f000 fa92 	bl	8001056 <MCAL_GPIO_WritePin>
		break;
 8000b32:	e000      	b.n	8000b36 <SevSegment_Write_Num+0x376>
	default:
		break;
 8000b34:	bf00      	nop
	}

}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40010c00 	.word	0x40010c00

08000b44 <EXTI0_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void EXTI0_IRQHandler()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	EXTI->PR |= ( 1 << 0 );
 8000b48:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6153      	str	r3, [r2, #20]

	P_IRQ_Callback_g[0]();
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <EXTI0_IRQHandler+0x20>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4798      	blx	r3
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000044 	.word	0x20000044

08000b68 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000b6c:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[1]();
 8000b7c:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <EXTI1_IRQHandler+0x20>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4798      	blx	r3
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000044 	.word	0x20000044

08000b8c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000b90:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[2]();
 8000ba0:	4b02      	ldr	r3, [pc, #8]	; (8000bac <EXTI2_IRQHandler+0x20>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	4798      	blx	r3
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000044 	.word	0x20000044

08000bb0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000bb4:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[3]();
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <EXTI3_IRQHandler+0x20>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	4798      	blx	r3
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000044 	.word	0x20000044

08000bd4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000bd8:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6153      	str	r3, [r2, #20]
	P_IRQ_Callback_g[4]();
 8000be8:	4b02      	ldr	r3, [pc, #8]	; (8000bf4 <EXTI4_IRQHandler+0x20>)
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	4798      	blx	r3
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000044 	.word	0x20000044

08000bf8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5 ; P_IRQ_Callback_g[5](); };
 8000bfc:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f003 0320 	and.w	r3, r3, #32
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00a      	beq.n	8000c20 <EXTI9_5_IRQHandler+0x28>
 8000c0a:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <EXTI9_5_IRQHandler+0xbc>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6 ; P_IRQ_Callback_g[6](); };
 8000c20:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00a      	beq.n	8000c44 <EXTI9_5_IRQHandler+0x4c>
 8000c2e:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <EXTI9_5_IRQHandler+0xbc>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7 ; P_IRQ_Callback_g[7](); };
 8000c44:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00a      	beq.n	8000c68 <EXTI9_5_IRQHandler+0x70>
 8000c52:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c60:	6153      	str	r3, [r2, #20]
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <EXTI9_5_IRQHandler+0xbc>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8 ; P_IRQ_Callback_g[8](); };
 8000c68:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00a      	beq.n	8000c8c <EXTI9_5_IRQHandler+0x94>
 8000c76:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <EXTI9_5_IRQHandler+0xbc>)
 8000c88:	6a1b      	ldr	r3, [r3, #32]
 8000c8a:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9 ; P_IRQ_Callback_g[9](); };
 8000c8c:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00a      	beq.n	8000cb0 <EXTI9_5_IRQHandler+0xb8>
 8000c9a:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000ca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <EXTI9_5_IRQHandler+0xbc>)
 8000cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cae:	4798      	blx	r3
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000044 	.word	0x20000044

08000cb8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10 ; P_IRQ_Callback_g[10](); };
 8000cbc:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00a      	beq.n	8000ce0 <EXTI15_10_IRQHandler+0x28>
 8000cca:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000cd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b2f      	ldr	r3, [pc, #188]	; (8000d98 <EXTI15_10_IRQHandler+0xe0>)
 8000cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cde:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11 ; P_IRQ_Callback_g[11](); };
 8000ce0:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00a      	beq.n	8000d04 <EXTI15_10_IRQHandler+0x4c>
 8000cee:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000cf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cfc:	6153      	str	r3, [r2, #20]
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <EXTI15_10_IRQHandler+0xe0>)
 8000d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d02:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12 ; P_IRQ_Callback_g[12](); };
 8000d04:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00a      	beq.n	8000d28 <EXTI15_10_IRQHandler+0x70>
 8000d12:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d20:	6153      	str	r3, [r2, #20]
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <EXTI15_10_IRQHandler+0xe0>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13 ; P_IRQ_Callback_g[13](); };
 8000d28:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00a      	beq.n	8000d4c <EXTI15_10_IRQHandler+0x94>
 8000d36:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <EXTI15_10_IRQHandler+0xe0>)
 8000d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4a:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14 ; P_IRQ_Callback_g[14](); };
 8000d4c:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00a      	beq.n	8000d70 <EXTI15_10_IRQHandler+0xb8>
 8000d5a:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6153      	str	r3, [r2, #20]
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <EXTI15_10_IRQHandler+0xe0>)
 8000d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6e:	4798      	blx	r3
	if( EXTI->PR & 1<<15 ) { EXTI->PR |= 1<<15 ; P_IRQ_Callback_g[15](); };
 8000d70:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00a      	beq.n	8000d94 <EXTI15_10_IRQHandler+0xdc>
 8000d7e:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 8000d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8c:	6153      	str	r3, [r2, #20]
 8000d8e:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <EXTI15_10_IRQHandler+0xe0>)
 8000d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d92:	4798      	blx	r3
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000044 	.word	0x20000044

08000d9c <Get_CRLH_Position>:
 * ----------------------------------------------------------
 * 				  Generic Functions
 *-----------------------------------------------------------
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
	switch( PinNumber )
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dac:	f000 80a5 	beq.w	8000efa <Get_CRLH_Position+0x15e>
 8000db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000db4:	f300 80a3 	bgt.w	8000efe <Get_CRLH_Position+0x162>
 8000db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dbc:	f000 809b 	beq.w	8000ef6 <Get_CRLH_Position+0x15a>
 8000dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dc4:	f300 809b 	bgt.w	8000efe <Get_CRLH_Position+0x162>
 8000dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dcc:	f000 8091 	beq.w	8000ef2 <Get_CRLH_Position+0x156>
 8000dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dd4:	f300 8093 	bgt.w	8000efe <Get_CRLH_Position+0x162>
 8000dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ddc:	f000 8087 	beq.w	8000eee <Get_CRLH_Position+0x152>
 8000de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000de4:	f300 808b 	bgt.w	8000efe <Get_CRLH_Position+0x162>
 8000de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dec:	d07d      	beq.n	8000eea <Get_CRLH_Position+0x14e>
 8000dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000df2:	f300 8084 	bgt.w	8000efe <Get_CRLH_Position+0x162>
 8000df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfa:	d074      	beq.n	8000ee6 <Get_CRLH_Position+0x14a>
 8000dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e00:	dc7d      	bgt.n	8000efe <Get_CRLH_Position+0x162>
 8000e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e06:	d06c      	beq.n	8000ee2 <Get_CRLH_Position+0x146>
 8000e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e0c:	dc77      	bgt.n	8000efe <Get_CRLH_Position+0x162>
 8000e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e12:	d064      	beq.n	8000ede <Get_CRLH_Position+0x142>
 8000e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e18:	dc71      	bgt.n	8000efe <Get_CRLH_Position+0x162>
 8000e1a:	2b80      	cmp	r3, #128	; 0x80
 8000e1c:	d05d      	beq.n	8000eda <Get_CRLH_Position+0x13e>
 8000e1e:	2b80      	cmp	r3, #128	; 0x80
 8000e20:	dc6d      	bgt.n	8000efe <Get_CRLH_Position+0x162>
 8000e22:	2b20      	cmp	r3, #32
 8000e24:	dc48      	bgt.n	8000eb8 <Get_CRLH_Position+0x11c>
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	dd69      	ble.n	8000efe <Get_CRLH_Position+0x162>
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	2b1f      	cmp	r3, #31
 8000e2e:	d866      	bhi.n	8000efe <Get_CRLH_Position+0x162>
 8000e30:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <Get_CRLH_Position+0x9c>)
 8000e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e36:	bf00      	nop
 8000e38:	08000ebf 	.word	0x08000ebf
 8000e3c:	08000ec3 	.word	0x08000ec3
 8000e40:	08000eff 	.word	0x08000eff
 8000e44:	08000ec7 	.word	0x08000ec7
 8000e48:	08000eff 	.word	0x08000eff
 8000e4c:	08000eff 	.word	0x08000eff
 8000e50:	08000eff 	.word	0x08000eff
 8000e54:	08000ecb 	.word	0x08000ecb
 8000e58:	08000eff 	.word	0x08000eff
 8000e5c:	08000eff 	.word	0x08000eff
 8000e60:	08000eff 	.word	0x08000eff
 8000e64:	08000eff 	.word	0x08000eff
 8000e68:	08000eff 	.word	0x08000eff
 8000e6c:	08000eff 	.word	0x08000eff
 8000e70:	08000eff 	.word	0x08000eff
 8000e74:	08000ecf 	.word	0x08000ecf
 8000e78:	08000eff 	.word	0x08000eff
 8000e7c:	08000eff 	.word	0x08000eff
 8000e80:	08000eff 	.word	0x08000eff
 8000e84:	08000eff 	.word	0x08000eff
 8000e88:	08000eff 	.word	0x08000eff
 8000e8c:	08000eff 	.word	0x08000eff
 8000e90:	08000eff 	.word	0x08000eff
 8000e94:	08000eff 	.word	0x08000eff
 8000e98:	08000eff 	.word	0x08000eff
 8000e9c:	08000eff 	.word	0x08000eff
 8000ea0:	08000eff 	.word	0x08000eff
 8000ea4:	08000eff 	.word	0x08000eff
 8000ea8:	08000eff 	.word	0x08000eff
 8000eac:	08000eff 	.word	0x08000eff
 8000eb0:	08000eff 	.word	0x08000eff
 8000eb4:	08000ed3 	.word	0x08000ed3
 8000eb8:	2b40      	cmp	r3, #64	; 0x40
 8000eba:	d00c      	beq.n	8000ed6 <Get_CRLH_Position+0x13a>
 8000ebc:	e01f      	b.n	8000efe <Get_CRLH_Position+0x162>
	{
	//CRL
	case GPIO_PIN_0:
		return 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e01e      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_1:
		return 4;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e01c      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_2:
		return 8;
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	e01a      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_3:
		return 12;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	e018      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_4:
		return 16;
 8000ece:	2310      	movs	r3, #16
 8000ed0:	e016      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_5:
		return 20;
 8000ed2:	2314      	movs	r3, #20
 8000ed4:	e014      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_6:
		return 24;
 8000ed6:	2318      	movs	r3, #24
 8000ed8:	e012      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_7:
		return 28;
 8000eda:	231c      	movs	r3, #28
 8000edc:	e010      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

		//CRH
	case GPIO_PIN_8:
		return 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e00e      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_9:
		return 4;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	e00c      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_10:
		return 8;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	e00a      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_11:
		return 12;
 8000eea:	230c      	movs	r3, #12
 8000eec:	e008      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_12:
		return 16;
 8000eee:	2310      	movs	r3, #16
 8000ef0:	e006      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_13:
		return 20;
 8000ef2:	2314      	movs	r3, #20
 8000ef4:	e004      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_14:
		return 24;
 8000ef6:	2318      	movs	r3, #24
 8000ef8:	e002      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_15:
		return 28;
 8000efa:	231c      	movs	r3, #28
 8000efc:	e000      	b.n	8000f00 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <MCAL_GPIO_Init>:
 * @retval 		- None
 * Note			- STM32F103C6 MCU has GPIO A,B,C,D,E modules
 * 				  but LQFP48 package has only GPIO A,B, part of C/D exported as external Pins from the modules
 **================================================================*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PinConfig_t *Pin_Config)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	volatile uint32_t *ConfigReg = NULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
	uint8_t ConfigPin = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) Configure Pins from 0 --> 7
	//Port configuration register high (GPIOx_CRH) Configure Pins from 8 --> 15
	ConfigReg = ( Pin_Config->GPIO_PinNumber < GPIO_PIN_8 ) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	2bff      	cmp	r3, #255	; 0xff
 8000f24:	d801      	bhi.n	8000f2a <MCAL_GPIO_Init+0x1e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	e001      	b.n	8000f2e <MCAL_GPIO_Init+0x22>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	60bb      	str	r3, [r7, #8]

	//Clear  CNF[1:0] MODE[1:0]
	(*ConfigReg) &= ~( (0xF) << Get_CRLH_Position(Pin_Config->GPIO_PinNumber) );
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff31 	bl	8000d9c <Get_CRLH_Position>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	230f      	movs	r3, #15
 8000f40:	4093      	lsls	r3, r2
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	401a      	ands	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	601a      	str	r2, [r3, #0]

	//If Pin is output
	if( (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_OUTPUT_PP ) || (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_OUTPUT_OD ) | (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_ALTFN_OUTPUT_OD ) | (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_ALTFN_OUTPUT_PP ) )
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	789b      	ldrb	r3, [r3, #2]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d01a      	beq.n	8000f8c <MCAL_GPIO_Init+0x80>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	789b      	ldrb	r3, [r3, #2]
 8000f5a:	2b05      	cmp	r3, #5
 8000f5c:	bf0c      	ite	eq
 8000f5e:	2301      	moveq	r3, #1
 8000f60:	2300      	movne	r3, #0
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	789b      	ldrb	r3, [r3, #2]
 8000f68:	2b07      	cmp	r3, #7
 8000f6a:	bf0c      	ite	eq
 8000f6c:	2301      	moveq	r3, #1
 8000f6e:	2300      	movne	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	789b      	ldrb	r3, [r3, #2]
 8000f7c:	2b06      	cmp	r3, #6
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00e      	beq.n	8000faa <MCAL_GPIO_Init+0x9e>
	{
		//Set CNF[1:0] MODE[1:0]
		ConfigPin = ( (( (Pin_Config->GPIO_Mode - 4) << 2 ) | ( Pin_Config->GPIO_Output_Speed ))  & 0x0F );
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	789b      	ldrb	r3, [r3, #2]
 8000f90:	3b04      	subs	r3, #4
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	b25a      	sxtb	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	78db      	ldrb	r3, [r3, #3]
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e02c      	b.n	8001004 <MCAL_GPIO_Init+0xf8>
	}
	//If Pin is input
	else //MODE = 00 :Input Mode(reset state)
	{
		if( (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_INPUT_FLOA ) || (Pin_Config->GPIO_Mode == GPIO_PIN_MODE_Analog ) )
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	789b      	ldrb	r3, [r3, #2]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d003      	beq.n	8000fba <MCAL_GPIO_Init+0xae>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	789b      	ldrb	r3, [r3, #2]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d107      	bne.n	8000fca <MCAL_GPIO_Init+0xbe>
		{
			//Set CNF[1:0] MODE[1:0]00
			ConfigPin = ( ( (Pin_Config->GPIO_Mode) << 2 ) & 0x0F );
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	789b      	ldrb	r3, [r3, #2]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e01c      	b.n	8001004 <MCAL_GPIO_Init+0xf8>
		}
		else if( Pin_Config->GPIO_Mode == GPIO_PIN_MODE_ALTFN_INPUT ) //Consider it as Input Floating
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	789b      	ldrb	r3, [r3, #2]
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d102      	bne.n	8000fd8 <MCAL_GPIO_Init+0xcc>
		{
			//Set CNF[1:0] MODE[1:0]00
			ConfigPin = ( ( (GPIO_PIN_MODE_INPUT_FLOA) << 2 ) & 0x0F );
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e015      	b.n	8001004 <MCAL_GPIO_Init+0xf8>
		}
		else // PU\PD Input
		{
			ConfigPin = ( ( (GPIO_PIN_MODE_INPUT_PU) << 2 ) & 0x0F );
 8000fd8:	2308      	movs	r3, #8
 8000fda:	73fb      	strb	r3, [r7, #15]

			if ( Pin_Config->GPIO_Mode == GPIO_PIN_MODE_INPUT_PU )
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	789b      	ldrb	r3, [r3, #2]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d107      	bne.n	8000ff4 <MCAL_GPIO_Init+0xe8>
			{
				//PxODR = 1 :Table 20. Port bit configuration table
				GPIOx->ODR |= (Pin_Config->GPIO_PinNumber );
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	8812      	ldrh	r2, [r2, #0]
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	e007      	b.n	8001004 <MCAL_GPIO_Init+0xf8>
			}
			else
			{
				//PxODR = 0 :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(Pin_Config->GPIO_PinNumber);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	8812      	ldrh	r2, [r2, #0]
 8000ffc:	43d2      	mvns	r2, r2
 8000ffe:	401a      	ands	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CRH\CRL
	(*ConfigReg) |= ( ConfigPin << Get_CRLH_Position(Pin_Config->GPIO_PinNumber) );
 8001004:	7bfc      	ldrb	r4, [r7, #15]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fec6 	bl	8000d9c <Get_CRLH_Position>
 8001010:	4603      	mov	r3, r0
 8001012:	fa04 f203 	lsl.w	r2, r4, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	431a      	orrs	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <MCAL_GPIO_ReadPin>:
 * @param [in]	- PinNumber: Set Pin number according to @ref GPIO_PINS_define
 * @retval 		- The input Pin value according to @ref GPIO_PIN_STATE_define
 * Note			- None
 **================================================================*/
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus;

	if( ( (GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_STATE_RESET ) )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_STATE_SET;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e001      	b.n	800104a <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bitstatus = GPIO_PIN_STATE_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
	}

	return bitstatus;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <MCAL_GPIO_WritePin>:
 * @param [in]	- Value: Pin value
 * @retval 		- None
 * Note			- None
 **================================================================*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	807b      	strh	r3, [r7, #2]
 8001062:	4613      	mov	r3, r2
 8001064:	707b      	strb	r3, [r7, #1]
	if( (Value != GPIO_PIN_STATE_RESET) )
 8001066:	787b      	ldrb	r3, [r7, #1]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <MCAL_GPIO_WritePin+0x1e>
		/*Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		 *These bits are write-only and can be accessed in Word mode only.
		 *0: No action on the corresponding ODRx bit
		 *1: Set the corresponding ODRx bit */

		GPIOx->BSRR = (uint32_t)PinNumber;
 800106c:	887a      	ldrh	r2, [r7, #2]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	611a      	str	r2, [r3, #16]
		 *1: Reset the corresponding ODRx bit */

		GPIOx->BRR = (uint32_t)PinNumber;
	}

}
 8001072:	e002      	b.n	800107a <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8001074:	887a      	ldrh	r2, [r7, #2]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	615a      	str	r2, [r3, #20]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <MCAL_GPIO_WritePort>:
 * @param [in]	- Value: Port value
 * @retval 		- None
 * Note			- None
 **================================================================*/
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = Value;
 8001090:	887a      	ldrh	r2, [r7, #2]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60da      	str	r2, [r3, #12]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <SPI1_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void SPI1_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	struct sSPI_IRQ_SRC irq_src;

	irq_src.RXNE  = ( ( USART2->SR & (SPI_RXNE_FLAG) ) >> 0   );
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <SPI1_IRQHandler+0x50>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	793b      	ldrb	r3, [r7, #4]
 80010b2:	f362 0341 	bfi	r3, r2, #1, #1
 80010b6:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART2->SR & (SPI_TXE_FLAG) )  >> 1   );
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <SPI1_IRQHandler+0x50>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	085b      	lsrs	r3, r3, #1
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	793b      	ldrb	r3, [r7, #4]
 80010c6:	f362 0300 	bfi	r3, r2, #0, #1
 80010ca:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = ( ( USART2->SR & (SPI_ERRI_FLAG) )  >> 4   );
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <SPI1_IRQHandler+0x50>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	f362 0382 	bfi	r3, r2, #2, #1
 80010de:	713b      	strb	r3, [r7, #4]

	P_SPI_IRQ_Callback_g[0](irq_src);
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SPI1_IRQHandler+0x54>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	7938      	ldrb	r0, [r7, #4]
 80010e6:	4798      	blx	r3
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40004400 	.word	0x40004400
 80010f4:	20000080 	.word	0x20000080

080010f8 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
	struct sSPI_IRQ_SRC irq_src;

	irq_src.RXNE  = ( ( USART2->SR & (SPI_RXNE_FLAG) ) >> 0   );
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <SPI2_IRQHandler+0x50>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	b2da      	uxtb	r2, r3
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	f362 0341 	bfi	r3, r2, #1, #1
 800110e:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART2->SR & (SPI_TXE_FLAG) )  >> 1   );
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <SPI2_IRQHandler+0x50>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	085b      	lsrs	r3, r3, #1
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	793b      	ldrb	r3, [r7, #4]
 800111e:	f362 0300 	bfi	r3, r2, #0, #1
 8001122:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI  = ( ( USART2->SR & (SPI_ERRI_FLAG) )  >> 4   );
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <SPI2_IRQHandler+0x50>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	793b      	ldrb	r3, [r7, #4]
 8001132:	f362 0382 	bfi	r3, r2, #2, #1
 8001136:	713b      	strb	r3, [r7, #4]

	P_SPI_IRQ_Callback_g[1](irq_src);
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <SPI2_IRQHandler+0x54>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	7938      	ldrb	r0, [r7, #4]
 800113e:	4798      	blx	r3
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40004400 	.word	0x40004400
 800114c:	20000080 	.word	0x20000080

08001150 <USART1_IRQHandler>:
* ======================        ISR FUNCTIONS                 ==============================
* =======================================================================================
*/

void USART1_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART1->SR & (UART_PE_FLAG) )   >> 1   );
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <USART1_IRQHandler+0x68>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	085b      	lsrs	r3, r3, #1
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	793b      	ldrb	r3, [r7, #4]
 8001164:	f362 03c3 	bfi	r3, r2, #3, #1
 8001168:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART1->SR & (UART_RXNE_FLAG) ) >> 5   );
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <USART1_IRQHandler+0x68>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	b2da      	uxtb	r2, r3
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	f362 0341 	bfi	r3, r2, #1, #1
 800117c:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART1->SR & (UART_TC_FLAG) )   >> 6   );
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <USART1_IRQHandler+0x68>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	099b      	lsrs	r3, r3, #6
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	793b      	ldrb	r3, [r7, #4]
 800118c:	f362 0382 	bfi	r3, r2, #2, #1
 8001190:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART1->SR & (UART_TXE_FLAG) )  >> 7   );
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <USART1_IRQHandler+0x68>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	09db      	lsrs	r3, r3, #7
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	793b      	ldrb	r3, [r7, #4]
 80011a0:	f362 0300 	bfi	r3, r2, #0, #1
 80011a4:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[0](irq_src);
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <USART1_IRQHandler+0x6c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	7938      	ldrb	r0, [r7, #4]
 80011ac:	4798      	blx	r3
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40013800 	.word	0x40013800
 80011bc:	20000088 	.word	0x20000088

080011c0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART2->SR & (UART_PE_FLAG) )   >> 1   );
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <USART2_IRQHandler+0x68>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	085b      	lsrs	r3, r3, #1
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	793b      	ldrb	r3, [r7, #4]
 80011d4:	f362 03c3 	bfi	r3, r2, #3, #1
 80011d8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART2->SR & (UART_RXNE_FLAG) ) >> 5   );
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <USART2_IRQHandler+0x68>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	793b      	ldrb	r3, [r7, #4]
 80011e8:	f362 0341 	bfi	r3, r2, #1, #1
 80011ec:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART2->SR & (UART_TC_FLAG) )   >> 6   );
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <USART2_IRQHandler+0x68>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	099b      	lsrs	r3, r3, #6
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	793b      	ldrb	r3, [r7, #4]
 80011fc:	f362 0382 	bfi	r3, r2, #2, #1
 8001200:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART2->SR & (UART_TXE_FLAG) )  >> 7   );
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <USART2_IRQHandler+0x68>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	09db      	lsrs	r3, r3, #7
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	b2da      	uxtb	r2, r3
 800120e:	793b      	ldrb	r3, [r7, #4]
 8001210:	f362 0300 	bfi	r3, r2, #0, #1
 8001214:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[1](irq_src);
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <USART2_IRQHandler+0x6c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	7938      	ldrb	r0, [r7, #4]
 800121c:	4798      	blx	r3
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40004400 	.word	0x40004400
 800122c:	20000088 	.word	0x20000088

08001230 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	struct sUART_IRQ_SRC irq_src;

	irq_src.PE    = ( ( USART3->SR & (UART_PE_FLAG) )   >> 1   );
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <USART3_IRQHandler+0x68>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	085b      	lsrs	r3, r3, #1
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	793b      	ldrb	r3, [r7, #4]
 8001244:	f362 03c3 	bfi	r3, r2, #3, #1
 8001248:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE  = ( ( USART3->SR & (UART_RXNE_FLAG) ) >> 5   );
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <USART3_IRQHandler+0x68>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	793b      	ldrb	r3, [r7, #4]
 8001258:	f362 0341 	bfi	r3, r2, #1, #1
 800125c:	713b      	strb	r3, [r7, #4]
	irq_src.TC    = ( ( USART3->SR & (UART_TC_FLAG) )   >> 6   );
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <USART3_IRQHandler+0x68>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	099b      	lsrs	r3, r3, #6
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	b2da      	uxtb	r2, r3
 800126a:	793b      	ldrb	r3, [r7, #4]
 800126c:	f362 0382 	bfi	r3, r2, #2, #1
 8001270:	713b      	strb	r3, [r7, #4]
	irq_src.TXE   = ( ( USART3->SR & (UART_TXE_FLAG) )  >> 7   );
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <USART3_IRQHandler+0x68>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	09db      	lsrs	r3, r3, #7
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	793b      	ldrb	r3, [r7, #4]
 8001280:	f362 0300 	bfi	r3, r2, #0, #1
 8001284:	713b      	strb	r3, [r7, #4]

	P_UART_IRQ_Callback_g[2](irq_src);
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <USART3_IRQHandler+0x6c>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	7938      	ldrb	r0, [r7, #4]
 800128c:	4798      	blx	r3
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40004800 	.word	0x40004800
 800129c:	20000088 	.word	0x20000088

080012a0 <Wait>:
#include "keypad.h"
#include "lcd.h"
#include "sevensegment.h"

void Wait(unsigned int x)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	int i,j;

	for(i = 0 ; i < x ; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e00b      	b.n	80012c6 <Wait+0x26>
		for(j = 0 ; j < 255 ; j++);
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	e002      	b.n	80012ba <Wait+0x1a>
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	3301      	adds	r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2bfe      	cmp	r3, #254	; 0xfe
 80012be:	ddf9      	ble.n	80012b4 <Wait+0x14>
	for(i = 0 ; i < x ; i++)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3301      	adds	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d8ef      	bhi.n	80012ae <Wait+0xe>
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
	...

080012dc <main>:



int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0

	 SevSegment_Init();
 80012e2:	f7ff fa21 	bl	8000728 <SevSegment_Init>
	 LCD_INIT();
 80012e6:	f7ff f893 	bl	8000410 <LCD_INIT>


	 LCD_WRITE_STRING("SevSEG Display");
 80012ea:	4822      	ldr	r0, [pc, #136]	; (8001374 <main+0x98>)
 80012ec:	f7ff f960 	bl	80005b0 <LCD_WRITE_STRING>
	 Wait(200);
 80012f0:	20c8      	movs	r0, #200	; 0xc8
 80012f2:	f7ff ffd5 	bl	80012a0 <Wait>
	 LCD_Clear_Screen();
 80012f6:	f7ff f9bb 	bl	8000670 <LCD_Clear_Screen>

	 uint8_t i;
	 uint8_t Numbers[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 80012fa:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <main+0x9c>)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001300:	c303      	stmia	r3!, {r0, r1}
 8001302:	801a      	strh	r2, [r3, #0]

	 for(i = 0 ; i < 10 ; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e012      	b.n	8001330 <main+0x54>
	 {
		 SevSegment_Write_Num(i);
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fa57 	bl	80007c0 <SevSegment_Write_Num>
		 LCD_WRITE_CHAR(Numbers[i]);
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	3310      	adds	r3, #16
 8001316:	443b      	add	r3, r7
 8001318:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f923 	bl	8000568 <LCD_WRITE_CHAR>
		 Wait(500);
 8001322:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001326:	f7ff ffbb 	bl	80012a0 <Wait>
	 for(i = 0 ; i < 10 ; i++)
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	3301      	adds	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b09      	cmp	r3, #9
 8001334:	d9e9      	bls.n	800130a <main+0x2e>
	 }

	 LCD_Clear_Screen();
 8001336:	f7ff f99b 	bl	8000670 <LCD_Clear_Screen>
	 LCD_WRITE_STRING("KeyPad Ready..");
 800133a:	4810      	ldr	r0, [pc, #64]	; (800137c <main+0xa0>)
 800133c:	f7ff f938 	bl	80005b0 <LCD_WRITE_STRING>
	 Wait(200);
 8001340:	20c8      	movs	r0, #200	; 0xc8
 8001342:	f7ff ffad 	bl	80012a0 <Wait>
	 LCD_Clear_Screen();
 8001346:	f7ff f993 	bl	8000670 <LCD_Clear_Screen>

	 Keypad_Init();
 800134a:	f7fe ff11 	bl	8000170 <Keypad_Init>

    while (1)
    {
		unsigned char key_pressed = Keypad_GetKey();
 800134e:	f7fe ff75 	bl	800023c <Keypad_GetKey>
 8001352:	4603      	mov	r3, r0
 8001354:	73bb      	strb	r3, [r7, #14]

		switch(key_pressed)
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	2b21      	cmp	r3, #33	; 0x21
 800135a:	d006      	beq.n	800136a <main+0x8e>
 800135c:	2b4e      	cmp	r3, #78	; 0x4e
 800135e:	d007      	beq.n	8001370 <main+0x94>
		{
		default:
			LCD_WRITE_CHAR(key_pressed);
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f900 	bl	8000568 <LCD_WRITE_CHAR>
			break;
 8001368:	e003      	b.n	8001372 <main+0x96>
		case '!':
			LCD_Clear_Screen();
 800136a:	f7ff f981 	bl	8000670 <LCD_Clear_Screen>
			break;
 800136e:	e000      	b.n	8001372 <main+0x96>
		case 'N':
			break;
 8001370:	bf00      	nop
    {
 8001372:	e7ec      	b.n	800134e <main+0x72>
 8001374:	08001434 	.word	0x08001434
 8001378:	08001454 	.word	0x08001454
 800137c:	08001444 	.word	0x08001444

08001380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001382:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001384:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <LoopForever+0x6>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	; (80013c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <LoopForever+0xe>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	; (80013cc <LoopForever+0x16>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013ae:	f000 f811 	bl	80013d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013b2:	f7ff ff93 	bl	80012dc <main>

080013b6 <LoopForever>:

LoopForever:
    b LoopForever
 80013b6:	e7fe      	b.n	80013b6 <LoopForever>
  ldr   r0, =_estack
 80013b8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80013c4:	08001468 	.word	0x08001468
  ldr r2, =_sbss
 80013c8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80013cc:	20000094 	.word	0x20000094

080013d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC1_2_IRQHandler>
	...

080013d4 <__libc_init_array>:
 80013d4:	b570      	push	{r4, r5, r6, lr}
 80013d6:	2600      	movs	r6, #0
 80013d8:	4d0c      	ldr	r5, [pc, #48]	; (800140c <__libc_init_array+0x38>)
 80013da:	4c0d      	ldr	r4, [pc, #52]	; (8001410 <__libc_init_array+0x3c>)
 80013dc:	1b64      	subs	r4, r4, r5
 80013de:	10a4      	asrs	r4, r4, #2
 80013e0:	42a6      	cmp	r6, r4
 80013e2:	d109      	bne.n	80013f8 <__libc_init_array+0x24>
 80013e4:	f000 f81a 	bl	800141c <_init>
 80013e8:	2600      	movs	r6, #0
 80013ea:	4d0a      	ldr	r5, [pc, #40]	; (8001414 <__libc_init_array+0x40>)
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <__libc_init_array+0x44>)
 80013ee:	1b64      	subs	r4, r4, r5
 80013f0:	10a4      	asrs	r4, r4, #2
 80013f2:	42a6      	cmp	r6, r4
 80013f4:	d105      	bne.n	8001402 <__libc_init_array+0x2e>
 80013f6:	bd70      	pop	{r4, r5, r6, pc}
 80013f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80013fc:	4798      	blx	r3
 80013fe:	3601      	adds	r6, #1
 8001400:	e7ee      	b.n	80013e0 <__libc_init_array+0xc>
 8001402:	f855 3b04 	ldr.w	r3, [r5], #4
 8001406:	4798      	blx	r3
 8001408:	3601      	adds	r6, #1
 800140a:	e7f2      	b.n	80013f2 <__libc_init_array+0x1e>
 800140c:	08001460 	.word	0x08001460
 8001410:	08001460 	.word	0x08001460
 8001414:	08001460 	.word	0x08001460
 8001418:	08001464 	.word	0x08001464

0800141c <_init>:
 800141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800141e:	bf00      	nop
 8001420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001422:	bc08      	pop	{r3}
 8001424:	469e      	mov	lr, r3
 8001426:	4770      	bx	lr

08001428 <_fini>:
 8001428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142a:	bf00      	nop
 800142c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800142e:	bc08      	pop	{r3}
 8001430:	469e      	mov	lr, r3
 8001432:	4770      	bx	lr

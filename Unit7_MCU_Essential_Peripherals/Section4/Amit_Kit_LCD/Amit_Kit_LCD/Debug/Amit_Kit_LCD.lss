
Amit_Kit_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000258  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a79  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ba  00000000  00000000  00000e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000500  00000000  00000000  0000152b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000481  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000411  00000000  00000000  00002011  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002422  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 23 01 	call	0x246	; 0x246 <main>
  8a:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Kick>:
	LCD_CTRL &= ~(1<<RW_SWITCH);            // Write Mode	
}

void LCD_Kick(void)
{
	LCD_CTRL |= (1 << EN_SWITCH);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	88 60       	ori	r24, 0x08	; 8
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	8b e4       	ldi	r24, 0x4B	; 75
  9a:	9d e1       	ldi	r25, 0x1D	; 29
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_Kick+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_Kick+0x10>
  a2:	00 00       	nop
	_delay_ms(30);
	LCD_CTRL &= ~(1 << EN_SWITCH);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_isbusy>:
		LCD_WRITE_CHAR(*string++);
}

void LCD_isbusy(void)
{
	LCD_PORT_DataDir &= ~(1 << 7);                // Make 7th bit of LCD data port as input
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	8f 77       	andi	r24, 0x7F	; 127
  b0:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |=  (1<<RW_SWITCH);               // Read Mode
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RS_SWITCH);                // Select command register
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	88 bb       	out	0x18, r24	; 24
	
//	while( (PINB>>7) & 1 )                   //read 7th bit again and again till it becomes 0
	{
		LCD_Kick();
  be:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>

		#ifdef FOUR_BIT_MODE
			   LCD_Kick();
  c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
		#endif
	}                              
	
	LCD_PORT_DataDir |= (1 << 7);              // Make 7th bit of LCD data port as output
  c6:	8a b3       	in	r24, 0x1a	; 26
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1<<RW_SWITCH);            // Write Mode	
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	88 bb       	out	0x18, r24	; 24
  d2:	08 95       	ret

000000d4 <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_WRITE_COMMAND(unsigned char command)
{
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
	LCD_isbusy();
  d8:	0e 94 56 00 	call	0xac	; 0xac <LCD_isbusy>
	       LCD_PORT = command;
	       LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
		   LCD_Kick();		
	#endif
	#ifdef FOUR_BIT_MODE
	       LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);   // Higher Nibble
  dc:	8b b3       	in	r24, 0x1b	; 27
  de:	8f 70       	andi	r24, 0x0F	; 15
  e0:	9c 2f       	mov	r25, r28
  e2:	90 7f       	andi	r25, 0xF0	; 240
  e4:	89 2b       	or	r24, r25
  e6:	8b bb       	out	0x1b, r24	; 27
	       LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	89 7f       	andi	r24, 0xF9	; 249
  ec:	88 bb       	out	0x18, r24	; 24
	       LCD_Kick();
  ee:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
	       LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);   // Lower Nibble
  f2:	2b b3       	in	r18, 0x1b	; 27
  f4:	30 e1       	ldi	r19, 0x10	; 16
  f6:	c3 9f       	mul	r28, r19
  f8:	c0 01       	movw	r24, r0
  fa:	11 24       	eor	r1, r1
  fc:	92 2f       	mov	r25, r18
  fe:	9f 70       	andi	r25, 0x0F	; 15
 100:	89 2b       	or	r24, r25
 102:	8b bb       	out	0x1b, r24	; 27
	       LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
 104:	88 b3       	in	r24, 0x18	; 24
 106:	89 7f       	andi	r24, 0xF9	; 249
 108:	88 bb       	out	0x18, r24	; 24
	       LCD_Kick();		   	       
 10a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
	#endif	
}
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <LCD_Clear_Screen>:
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_Clear_Screen(void)
{
	Position = 0;
 112:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__data_end+0x1>
 116:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_WRITE_COMMAND>
 120:	08 95       	ret

00000122 <LCD_INIT>:
 122:	83 ed       	ldi	r24, 0xD3	; 211
 124:	90 e3       	ldi	r25, 0x30	; 48
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_INIT+0x4>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_INIT+0xa>
 12c:	00 00       	nop

void LCD_INIT(void)
{
	_delay_ms(50);         // LCD power ON delay
	
	LCD_CTRL_DataDir |= ( (1<<RS_SWITCH) | (1<<RW_SWITCH) | (1<<EN_SWITCH) );  
 12e:	87 b3       	in	r24, 0x17	; 23
 130:	8e 60       	ori	r24, 0x0E	; 14
 132:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ ( (1<<RS_SWITCH) | (1<<RW_SWITCH) | (1<<EN_SWITCH) );
 134:	88 b3       	in	r24, 0x18	; 24
 136:	81 7f       	andi	r24, 0xF1	; 241
 138:	88 bb       	out	0x18, r24	; 24
	#ifdef EIGHT_BIT_MODE	
	        LCD_PORT_DataDir = 0xFF;
	        LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);	
	#endif
	#ifdef FOUR_BIT_MODE
		   LCD_PORT_DataDir |= 0xF0; 
 13a:	8a b3       	in	r24, 0x1a	; 26
 13c:	80 6f       	ori	r24, 0xF0	; 240
 13e:	8a bb       	out	0x1a, r24	; 26
	       LCD_WRITE_COMMAND(0x02);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_WRITE_COMMAND>
		   LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_WRITE_COMMAND>
	#endif

	LCD_Clear_Screen();
 14c:	0e 94 89 00 	call	0x112	; 0x112 <LCD_Clear_Screen>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_WRITE_COMMAND>
 162:	08 95       	ret

00000164 <LCD_GOTO_XY>:
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_GOTO_XY(unsigned char Newline, unsigned char NewPosition)
{
	if ( Newline == 0 )
 164:	81 11       	cpse	r24, r1
 166:	0d c0       	rjmp	.+26     	; 0x182 <LCD_GOTO_XY+0x1e>
	{
		Position = NewPosition;
 168:	86 2f       	mov	r24, r22
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 170:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		
		if ( NewPosition < 16 && NewPosition >= 0 )
 174:	60 31       	cpi	r22, 0x10	; 16
 176:	a0 f4       	brcc	.+40     	; 0x1a0 <LCD_GOTO_XY+0x3c>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + NewPosition);
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	86 0f       	add	r24, r22
 17c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_WRITE_COMMAND>
 180:	08 95       	ret
		}
	}
	else if ( Newline == 1 )
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	69 f4       	brne	.+26     	; 0x1a0 <LCD_GOTO_XY+0x3c>
	{
		Position = NewPosition + 16;
 186:	86 2f       	mov	r24, r22
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	40 96       	adiw	r24, 0x10	; 16
 18c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 190:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
				
		if ( NewPosition < 16 && NewPosition >= 0 )
 194:	60 31       	cpi	r22, 0x10	; 16
 196:	20 f4       	brcc	.+8      	; 0x1a0 <LCD_GOTO_XY+0x3c>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + NewPosition);
 198:	80 ec       	ldi	r24, 0xC0	; 192
 19a:	86 0f       	add	r24, r22
 19c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_WRITE_COMMAND>
 1a0:	08 95       	ret

000001a2 <LCD_IsValid_Position>:
	}	
}

void LCD_IsValid_Position(void)
{
	Position++;
 1a2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1a6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 1b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
	
	if (Position == 16)
 1b4:	80 31       	cpi	r24, 0x10	; 16
 1b6:	91 05       	cpc	r25, r1
 1b8:	29 f4       	brne	.+10     	; 0x1c4 <LCD_IsValid_Position+0x22>
	{
		LCD_GOTO_XY(1,0);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_GOTO_XY>
 1c2:	08 95       	ret
	}
	else if (Position == 32 )
 1c4:	80 97       	sbiw	r24, 0x20	; 32
 1c6:	51 f4       	brne	.+20     	; 0x1dc <LCD_IsValid_Position+0x3a>
	{
		LCD_Clear_Screen();
 1c8:	0e 94 89 00 	call	0x112	; 0x112 <LCD_Clear_Screen>
		LCD_GOTO_XY(0,0);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_GOTO_XY>
		Position = 0;
 1d4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__data_end+0x1>
 1d8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
 1dc:	08 95       	ret

000001de <LCD_WRITE_CHAR>:
	       LCD_Kick();		   	       
	#endif	
}

void LCD_WRITE_CHAR(unsigned char character)
{
 1de:	cf 93       	push	r28
 1e0:	c8 2f       	mov	r28, r24
	LCD_isbusy();
 1e2:	0e 94 56 00 	call	0xac	; 0xac <LCD_isbusy>
		   LCD_CTRL &= ~(1 << RW_SWITCH);
		   LCD_CTRL |= (1 << RS_SWITCH);
		   LCD_Kick();
	#endif
	#ifdef FOUR_BIT_MODE
	       LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);   // Higher Nibble
 1e6:	8b b3       	in	r24, 0x1b	; 27
 1e8:	8f 70       	andi	r24, 0x0F	; 15
 1ea:	9c 2f       	mov	r25, r28
 1ec:	90 7f       	andi	r25, 0xF0	; 240
 1ee:	89 2b       	or	r24, r25
 1f0:	8b bb       	out	0x1b, r24	; 27
		   LCD_CTRL &= ~(1 << RW_SWITCH);
 1f2:	88 b3       	in	r24, 0x18	; 24
 1f4:	8b 7f       	andi	r24, 0xFB	; 251
 1f6:	88 bb       	out	0x18, r24	; 24
		   LCD_CTRL |= (1 << RS_SWITCH);
 1f8:	88 b3       	in	r24, 0x18	; 24
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	88 bb       	out	0x18, r24	; 24
	       LCD_Kick();
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
	       LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);   // Lower Nibble
 202:	2b b3       	in	r18, 0x1b	; 27
 204:	30 e1       	ldi	r19, 0x10	; 16
 206:	c3 9f       	mul	r28, r19
 208:	c0 01       	movw	r24, r0
 20a:	11 24       	eor	r1, r1
 20c:	92 2f       	mov	r25, r18
 20e:	9f 70       	andi	r25, 0x0F	; 15
 210:	89 2b       	or	r24, r25
 212:	8b bb       	out	0x1b, r24	; 27
		   LCD_CTRL &= ~(1 << RW_SWITCH);
 214:	88 b3       	in	r24, 0x18	; 24
 216:	8b 7f       	andi	r24, 0xFB	; 251
 218:	88 bb       	out	0x18, r24	; 24
		   LCD_CTRL |= (1 << RS_SWITCH);
 21a:	88 b3       	in	r24, 0x18	; 24
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	88 bb       	out	0x18, r24	; 24
	       LCD_Kick();	
 220:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
	#endif	
	
	LCD_IsValid_Position();
 224:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_IsValid_Position>
}
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string)
{	
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
	while (*string > 0)
 232:	03 c0       	rjmp	.+6      	; 0x23a <LCD_WRITE_STRING+0xe>
		LCD_WRITE_CHAR(*string++);
 234:	21 96       	adiw	r28, 0x01	; 1
 236:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_WRITE_CHAR>
	LCD_IsValid_Position();
}

void LCD_WRITE_STRING(char* string)
{	
	while (*string > 0)
 23a:	88 81       	ld	r24, Y
 23c:	81 11       	cpse	r24, r1
 23e:	fa cf       	rjmp	.-12     	; 0x234 <LCD_WRITE_STRING+0x8>
		LCD_WRITE_CHAR(*string++);
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <main>:
#include "LCD/lcd.h"

int main(void)
{
    /* Replace with your application code */
	 LCD_INIT();
 246:	0e 94 91 00 	call	0x122	; 0x122 <LCD_INIT>
	 
	 LCD_WRITE_STRING("Learn in Depth");
 24a:	80 e6       	ldi	r24, 0x60	; 96
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_WRITE_STRING>
 252:	ff cf       	rjmp	.-2      	; 0x252 <main+0xc>

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>


Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000656  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000570  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bf  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  0000140a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
	RESET_BIT(DDRD,0); // PushButton 0 as input
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	81 bb       	out	0x11, r24	; 17
	RESET_BIT(DDRD,1); // PushButton 1 as input
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	81 bb       	out	0x11, r24	; 17
	RESET_BIT(DDRD,2); // PushButton 2 as input
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	8b 7f       	andi	r24, 0xFB	; 251
  7c:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,4); //Buzzer as Output push/pull
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 61       	ori	r24, 0x10	; 16
  82:	81 bb       	out	0x11, r24	; 17
	//3 Leds as output
	SET_BIT(DDRD,5);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	80 62       	ori	r24, 0x20	; 32
  88:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,6);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,7);
  90:	81 b3       	in	r24, 0x11	; 17
  92:	80 68       	ori	r24, 0x80	; 128
  94:	81 bb       	out	0x11, r24	; 17
		
    while (1) 
    {
		if( READ_BIT(PIND , 0) == 1 )
  96:	80 9b       	sbis	0x10, 0	; 16
  98:	15 c0       	rjmp	.+42     	; 0xc4 <main+0x58>
		{
			SET_BIT(PORTD,4);
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	80 61       	ori	r24, 0x10	; 16
  9e:	82 bb       	out	0x12, r24	; 18
			SET_BIT(PORTD,5);
  a0:	82 b3       	in	r24, 0x12	; 18
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	84 e3       	ldi	r24, 0x34	; 52
  aa:	9c e0       	ldi	r25, 0x0C	; 12
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x40>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x4a>
  b6:	00 00       	nop
			_delay_ms(500);
			RESET_BIT(PORTD,4);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	8f 7e       	andi	r24, 0xEF	; 239
  bc:	82 bb       	out	0x12, r24	; 18
			RESET_BIT(PORTD,5);
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	82 bb       	out	0x12, r24	; 18
		}
		if( READ_BIT(PIND , 1) == 1 )
  c4:	81 9b       	sbis	0x10, 1	; 16
  c6:	15 c0       	rjmp	.+42     	; 0xf2 <main+0x86>
		{
			SET_BIT(PORTD,4);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	82 bb       	out	0x12, r24	; 18
			SET_BIT(PORTD,6);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	82 bb       	out	0x12, r24	; 18
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	84 e3       	ldi	r24, 0x34	; 52
  d8:	9c e0       	ldi	r25, 0x0C	; 12
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x6e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x78>
  e4:	00 00       	nop
			_delay_ms(500);
			RESET_BIT(PORTD,4);
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	8f 7e       	andi	r24, 0xEF	; 239
  ea:	82 bb       	out	0x12, r24	; 18
			RESET_BIT(PORTD,6);
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	8f 7b       	andi	r24, 0xBF	; 191
  f0:	82 bb       	out	0x12, r24	; 18
		}
		if( READ_BIT(PIND , 2) == 1 )
  f2:	82 9b       	sbis	0x10, 2	; 16
  f4:	d0 cf       	rjmp	.-96     	; 0x96 <main+0x2a>
		{
			SET_BIT(PORTD,4);
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	80 61       	ori	r24, 0x10	; 16
  fa:	82 bb       	out	0x12, r24	; 18
			SET_BIT(PORTD,7);
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	82 bb       	out	0x12, r24	; 18
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	84 e3       	ldi	r24, 0x34	; 52
 106:	9c e0       	ldi	r25, 0x0C	; 12
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x9c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0xa6>
 112:	00 00       	nop
			_delay_ms(500);
			RESET_BIT(PORTD,4);
 114:	82 b3       	in	r24, 0x12	; 18
 116:	8f 7e       	andi	r24, 0xEF	; 239
 118:	82 bb       	out	0x12, r24	; 18
			RESET_BIT(PORTD,7);
 11a:	82 b3       	in	r24, 0x12	; 18
 11c:	8f 77       	andi	r24, 0x7F	; 127
 11e:	82 bb       	out	0x12, r24	; 18
 120:	ba cf       	rjmp	.-140    	; 0x96 <main+0x2a>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
